// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mesos.proto

/*
Package mesos_v1 is a generated protocol buffer package.

It is generated from these files:
	mesos.proto

It has these top-level messages:
	FrameworkID
	OfferID
	AgentID
	TaskID
	ExecutorID
	ContainerID
	ResourceProviderID
	OperationID
	TimeInfo
	DurationInfo
	Address
	URL
	Unavailability
	MachineID
	MachineInfo
	FrameworkInfo
	CheckInfo
	HealthCheck
	KillPolicy
	CommandInfo
	ExecutorInfo
	DomainInfo
	MasterInfo
	AgentInfo
	CSIPluginContainerInfo
	CSIPluginInfo
	ResourceProviderInfo
	Value
	Attribute
	Resource
	TrafficControlStatistics
	IpStatistics
	IcmpStatistics
	TcpStatistics
	UdpStatistics
	SNMPStatistics
	DiskStatistics
	ResourceStatistics
	ResourceUsage
	PerfStatistics
	Request
	Offer
	InverseOffer
	TaskInfo
	TaskGroupInfo
	Task
	TaskResourceLimitation
	UUID
	Operation
	OperationStatus
	CheckStatusInfo
	TaskStatus
	Filters
	Environment
	Parameter
	Parameters
	Credential
	Credentials
	Secret
	RateLimit
	RateLimits
	Image
	MountPropagation
	Volume
	NetworkInfo
	CapabilityInfo
	LinuxInfo
	RLimitInfo
	TTYInfo
	ContainerInfo
	ContainerStatus
	CgroupInfo
	Labels
	Label
	Port
	Ports
	DiscoveryInfo
	WeightInfo
	VersionInfo
	Flag
	Role
	Metric
	FileInfo
	Device
	DeviceAccess
	DeviceWhitelist
*/
package mesos_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// Status is used to indicate the state of the scheduler and executor
// driver after function calls.
type Status int32

const (
	Status_DRIVER_NOT_STARTED Status = 1
	Status_DRIVER_RUNNING     Status = 2
	Status_DRIVER_ABORTED     Status = 3
	Status_DRIVER_STOPPED     Status = 4
)

var Status_name = map[int32]string{
	1: "DRIVER_NOT_STARTED",
	2: "DRIVER_RUNNING",
	3: "DRIVER_ABORTED",
	4: "DRIVER_STOPPED",
}
var Status_value = map[string]int32{
	"DRIVER_NOT_STARTED": 1,
	"DRIVER_RUNNING":     2,
	"DRIVER_ABORTED":     3,
	"DRIVER_STOPPED":     4,
}

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}
func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (x *Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Status_value, data, "Status")
	if err != nil {
		return err
	}
	*x = Status(value)
	return nil
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// *
// Describes possible task states. IMPORTANT: Mesos assumes tasks that
// enter terminal states (see below) imply the task is no longer
// running and thus clean up any thing associated with the task
// (ultimately offering any resources being consumed by that task to
// another task).
type TaskState int32

const (
	TaskState_TASK_STAGING  TaskState = 6
	TaskState_TASK_STARTING TaskState = 0
	TaskState_TASK_RUNNING  TaskState = 1
	// NOTE: This should only be sent when the framework has
	// the TASK_KILLING_STATE capability.
	TaskState_TASK_KILLING TaskState = 8
	// The task finished successfully on its own without external interference.
	TaskState_TASK_FINISHED TaskState = 2
	TaskState_TASK_FAILED   TaskState = 3
	TaskState_TASK_KILLED   TaskState = 4
	TaskState_TASK_ERROR    TaskState = 7
	// In Mesos 1.3, this will only be sent when the framework does NOT
	// opt-in to the PARTITION_AWARE capability.
	//
	// NOTE: This state is not always terminal. For example, tasks might
	// transition from TASK_LOST to TASK_RUNNING or other states when a
	// partitioned agent reregisters.
	TaskState_TASK_LOST TaskState = 5
	// The task failed to launch because of a transient error. The
	// task's executor never started running. Unlike TASK_ERROR, the
	// task description is valid -- attempting to launch the task again
	// may be successful.
	TaskState_TASK_DROPPED TaskState = 9
	// The task was running on an agent that has lost contact with the
	// master, typically due to a network failure or partition. The task
	// may or may not still be running.
	TaskState_TASK_UNREACHABLE TaskState = 10
	// The task is no longer running. This can occur if the agent has
	// been terminated along with all of its tasks (e.g., the host that
	// was running the agent was rebooted). It might also occur if the
	// task was terminated due to an agent or containerizer error, or if
	// the task was preempted by the QoS controller in an
	// oversubscription scenario.
	TaskState_TASK_GONE TaskState = 11
	// The task was running on an agent that the master cannot contact;
	// the operator has asserted that the agent has been shutdown, but
	// this has not been directly confirmed by the master. If the
	// operator is correct, the task is not running and this is a
	// terminal state; if the operator is mistaken, the task may still
	// be running and might return to RUNNING in the future.
	TaskState_TASK_GONE_BY_OPERATOR TaskState = 12
	// The master has no knowledge of the task. This is typically
	// because either (a) the master never had knowledge of the task, or
	// (b) the master forgot about the task because it garbage collected
	// its metadata about the task. The task may or may not still be
	// running.
	TaskState_TASK_UNKNOWN TaskState = 13
)

var TaskState_name = map[int32]string{
	6:  "TASK_STAGING",
	0:  "TASK_STARTING",
	1:  "TASK_RUNNING",
	8:  "TASK_KILLING",
	2:  "TASK_FINISHED",
	3:  "TASK_FAILED",
	4:  "TASK_KILLED",
	7:  "TASK_ERROR",
	5:  "TASK_LOST",
	9:  "TASK_DROPPED",
	10: "TASK_UNREACHABLE",
	11: "TASK_GONE",
	12: "TASK_GONE_BY_OPERATOR",
	13: "TASK_UNKNOWN",
}
var TaskState_value = map[string]int32{
	"TASK_STAGING":          6,
	"TASK_STARTING":         0,
	"TASK_RUNNING":          1,
	"TASK_KILLING":          8,
	"TASK_FINISHED":         2,
	"TASK_FAILED":           3,
	"TASK_KILLED":           4,
	"TASK_ERROR":            7,
	"TASK_LOST":             5,
	"TASK_DROPPED":          9,
	"TASK_UNREACHABLE":      10,
	"TASK_GONE":             11,
	"TASK_GONE_BY_OPERATOR": 12,
	"TASK_UNKNOWN":          13,
}

func (x TaskState) Enum() *TaskState {
	p := new(TaskState)
	*p = x
	return p
}
func (x TaskState) String() string {
	return proto.EnumName(TaskState_name, int32(x))
}
func (x *TaskState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskState_value, data, "TaskState")
	if err != nil {
		return err
	}
	*x = TaskState(value)
	return nil
}
func (TaskState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// *
// Describes possible operation states.
type OperationState int32

const (
	// Default value if the enum is not set. See MESOS-4997.
	OperationState_OPERATION_UNSUPPORTED OperationState = 0
	// Initial state.
	OperationState_OPERATION_PENDING OperationState = 1
	// TERMINAL: The operation was successfully applied.
	OperationState_OPERATION_FINISHED OperationState = 2
	// TERMINAL: The operation failed to apply.
	OperationState_OPERATION_FAILED OperationState = 3
	// TERMINAL: The operation description contains an error.
	OperationState_OPERATION_ERROR OperationState = 4
	// TERMINAL: The operation was dropped due to a transient error.
	OperationState_OPERATION_DROPPED OperationState = 5
	// The operation affects an agent that has lost contact with the master,
	// typically due to a network failure or partition. The operation may or may
	// not still be pending.
	OperationState_OPERATION_UNREACHABLE OperationState = 6
	// The operation affected an agent that the master cannot contact;
	// the operator has asserted that the agent has been shutdown, but this has
	// not been directly confirmed by the master.
	//
	// If the operator is correct, the operation is not pending and this is a
	// terminal state; if the operator is mistaken, the operation may still be
	// pending and might return to a different state in the future.
	OperationState_OPERATION_GONE_BY_OPERATOR OperationState = 7
	// The operation affects an agent that the master recovered from its
	// state, but that agent has not yet re-registered.
	//
	// The operation can transition to `OPERATION_UNREACHABLE` if the
	// corresponding agent is marked as unreachable, and will transition to
	// another status if the agent re-registers.
	OperationState_OPERATION_RECOVERING OperationState = 8
	// The master has no knowledge of the operation. This is typically
	// because either (a) the master never had knowledge of the operation, or
	// (b) the master forgot about the operation because it garbage collected
	// its metadata about the operation. The operation may or may not still be
	// pending.
	OperationState_OPERATION_UNKNOWN OperationState = 9
)

var OperationState_name = map[int32]string{
	0: "OPERATION_UNSUPPORTED",
	1: "OPERATION_PENDING",
	2: "OPERATION_FINISHED",
	3: "OPERATION_FAILED",
	4: "OPERATION_ERROR",
	5: "OPERATION_DROPPED",
	6: "OPERATION_UNREACHABLE",
	7: "OPERATION_GONE_BY_OPERATOR",
	8: "OPERATION_RECOVERING",
	9: "OPERATION_UNKNOWN",
}
var OperationState_value = map[string]int32{
	"OPERATION_UNSUPPORTED":      0,
	"OPERATION_PENDING":          1,
	"OPERATION_FINISHED":         2,
	"OPERATION_FAILED":           3,
	"OPERATION_ERROR":            4,
	"OPERATION_DROPPED":          5,
	"OPERATION_UNREACHABLE":      6,
	"OPERATION_GONE_BY_OPERATOR": 7,
	"OPERATION_RECOVERING":       8,
	"OPERATION_UNKNOWN":          9,
}

func (x OperationState) Enum() *OperationState {
	p := new(OperationState)
	*p = x
	return p
}
func (x OperationState) String() string {
	return proto.EnumName(OperationState_name, int32(x))
}
func (x *OperationState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OperationState_value, data, "OperationState")
	if err != nil {
		return err
	}
	*x = OperationState(value)
	return nil
}
func (OperationState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Describes the several states that a machine can be in.  A `Mode`
// applies to a machine and to all associated agents on the machine.
type MachineInfo_Mode int32

const (
	// In this mode, a machine is behaving normally;
	// offering resources, executing tasks, etc.
	MachineInfo_UP MachineInfo_Mode = 1
	// In this mode, all agents on the machine are expected to cooperate with
	// frameworks to drain resources.  In general, draining is done ahead of
	// a pending `unavailability`.  The resources should be drained so as to
	// maximize utilization prior to the maintenance but without knowingly
	// violating the frameworks' requirements.
	MachineInfo_DRAINING MachineInfo_Mode = 2
	// In this mode, a machine is not running any tasks and will not offer
	// any of its resources.  Agents on the machine will not be allowed to
	// register with the master.
	MachineInfo_DOWN MachineInfo_Mode = 3
)

var MachineInfo_Mode_name = map[int32]string{
	1: "UP",
	2: "DRAINING",
	3: "DOWN",
}
var MachineInfo_Mode_value = map[string]int32{
	"UP":       1,
	"DRAINING": 2,
	"DOWN":     3,
}

func (x MachineInfo_Mode) Enum() *MachineInfo_Mode {
	p := new(MachineInfo_Mode)
	*p = x
	return p
}
func (x MachineInfo_Mode) String() string {
	return proto.EnumName(MachineInfo_Mode_name, int32(x))
}
func (x *MachineInfo_Mode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MachineInfo_Mode_value, data, "MachineInfo_Mode")
	if err != nil {
		return err
	}
	*x = MachineInfo_Mode(value)
	return nil
}
func (MachineInfo_Mode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14, 0} }

type FrameworkInfo_Capability_Type int32

const (
	// This must be the first enum value in this list, to
	// ensure that if 'type' is not set, the default value
	// is UNKNOWN. This enables enum values to be added
	// in a backwards-compatible way. See: MESOS-4997.
	FrameworkInfo_Capability_UNKNOWN FrameworkInfo_Capability_Type = 0
	// Receive offers with revocable resources. See 'Resource'
	// message for details.
	FrameworkInfo_Capability_REVOCABLE_RESOURCES FrameworkInfo_Capability_Type = 1
	// Receive the TASK_KILLING TaskState when a task is being
	// killed by an executor. The executor will examine this
	// capability to determine whether it can send TASK_KILLING.
	FrameworkInfo_Capability_TASK_KILLING_STATE FrameworkInfo_Capability_Type = 2
	// Indicates whether the framework is aware of GPU resources.
	// Frameworks that are aware of GPU resources are expected to
	// avoid placing non-GPU workloads on GPU agents, in order
	// to avoid occupying a GPU agent and preventing GPU workloads
	// from running! Currently, if a framework is unaware of GPU
	// resources, it will not be offered *any* of the resources on
	// an agent with GPUs. This restriction is in place because we
	// do not have a revocation mechanism that ensures GPU workloads
	// can evict GPU agent occupants if necessary.
	//
	// TODO(bmahler): As we add revocation we can relax the
	// restriction here. See MESOS-5634 for more information.
	FrameworkInfo_Capability_GPU_RESOURCES FrameworkInfo_Capability_Type = 3
	// Receive offers with resources that are shared.
	FrameworkInfo_Capability_SHARED_RESOURCES FrameworkInfo_Capability_Type = 4
	// Indicates that (1) the framework is prepared to handle the
	// following TaskStates: TASK_UNREACHABLE, TASK_DROPPED,
	// TASK_GONE, TASK_GONE_BY_OPERATOR, and TASK_UNKNOWN, and (2)
	// the framework will assume responsibility for managing
	// partitioned tasks that reregister with the master.
	//
	// Frameworks that enable this capability can define how they
	// would like to handle partitioned tasks. Frameworks will
	// receive TASK_UNREACHABLE for tasks on agents that are
	// partitioned from the master.
	//
	// Without this capability, frameworks will receive TASK_LOST
	// for tasks on partitioned agents.
	// NOTE: Prior to Mesos 1.5, such tasks will be killed by Mesos
	// when the agent reregisters (unless the master has failed over).
	// However due to the lack of benefit in maintaining different
	// behaviors depending on whether the master has failed over
	// (see MESOS-7215), as of 1.5, Mesos will not kill these
	// tasks in either case.
	FrameworkInfo_Capability_PARTITION_AWARE FrameworkInfo_Capability_Type = 5
	// This expresses the ability for the framework to be
	// "multi-tenant" via using the newly introduced `roles`
	// field, and examining `Offer.allocation_info` to determine
	// which role the offers are being made to. We also
	// expect that "single-tenant" schedulers eventually
	// provide this and move away from the deprecated
	// `role` field.
	FrameworkInfo_Capability_MULTI_ROLE FrameworkInfo_Capability_Type = 6
	// This capability has two effects for a framework.
	//
	// (1) The framework is offered resources in a new format.
	//
	//     The offered resources have the `Resource.reservations` field set
	//     rather than `Resource.role` and `Resource.reservation`. In short,
	//     an empty `reservations` field denotes unreserved resources, and
	//     each `ReservationInfo` in the `reservations` field denotes a
	//     reservation that refines the previous one.
	//
	//     See the 'Resource Format' section for more details.
	//
	// (2) The framework can create refined reservations.
	//
	//     A framework can refine an existing reservation via the
	//     `Resource.reservations` field. For example, a reservation for role
	//     `eng` can be refined to `eng/front_end`.
	//
	//     See `ReservationInfo.reservations` for more details.
	//
	// NOTE: Without this capability, a framework is not offered resources
	// that have refined reservations. A resource is said to have refined
	// reservations if it uses the `Resource.reservations` field, and
	// `Resource.reservations_size() > 1`.
	FrameworkInfo_Capability_RESERVATION_REFINEMENT FrameworkInfo_Capability_Type = 7
	// Indicates that the framework is prepared to receive offers
	// for agents whose region is different from the master's
	// region. Network links between hosts in different regions
	// typically have higher latency and lower bandwidth than
	// network links within a region, so frameworks should be
	// careful to only place suitable workloads in remote regions.
	// Frameworks that are not region-aware will never receive
	// offers for remote agents; region-aware frameworks are assumed
	// to implement their own logic to decide which workloads (if
	// any) are suitable for placement on remote agents.
	FrameworkInfo_Capability_REGION_AWARE FrameworkInfo_Capability_Type = 8
)

var FrameworkInfo_Capability_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "REVOCABLE_RESOURCES",
	2: "TASK_KILLING_STATE",
	3: "GPU_RESOURCES",
	4: "SHARED_RESOURCES",
	5: "PARTITION_AWARE",
	6: "MULTI_ROLE",
	7: "RESERVATION_REFINEMENT",
	8: "REGION_AWARE",
}
var FrameworkInfo_Capability_Type_value = map[string]int32{
	"UNKNOWN":                0,
	"REVOCABLE_RESOURCES":    1,
	"TASK_KILLING_STATE":     2,
	"GPU_RESOURCES":          3,
	"SHARED_RESOURCES":       4,
	"PARTITION_AWARE":        5,
	"MULTI_ROLE":             6,
	"RESERVATION_REFINEMENT": 7,
	"REGION_AWARE":           8,
}

func (x FrameworkInfo_Capability_Type) Enum() *FrameworkInfo_Capability_Type {
	p := new(FrameworkInfo_Capability_Type)
	*p = x
	return p
}
func (x FrameworkInfo_Capability_Type) String() string {
	return proto.EnumName(FrameworkInfo_Capability_Type_name, int32(x))
}
func (x *FrameworkInfo_Capability_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FrameworkInfo_Capability_Type_value, data, "FrameworkInfo_Capability_Type")
	if err != nil {
		return err
	}
	*x = FrameworkInfo_Capability_Type(value)
	return nil
}
func (FrameworkInfo_Capability_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15, 0, 0}
}

type CheckInfo_Type int32

const (
	CheckInfo_UNKNOWN CheckInfo_Type = 0
	CheckInfo_COMMAND CheckInfo_Type = 1
	CheckInfo_HTTP    CheckInfo_Type = 2
	CheckInfo_TCP     CheckInfo_Type = 3
)

var CheckInfo_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "COMMAND",
	2: "HTTP",
	3: "TCP",
}
var CheckInfo_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"COMMAND": 1,
	"HTTP":    2,
	"TCP":     3,
}

func (x CheckInfo_Type) Enum() *CheckInfo_Type {
	p := new(CheckInfo_Type)
	*p = x
	return p
}
func (x CheckInfo_Type) String() string {
	return proto.EnumName(CheckInfo_Type_name, int32(x))
}
func (x *CheckInfo_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CheckInfo_Type_value, data, "CheckInfo_Type")
	if err != nil {
		return err
	}
	*x = CheckInfo_Type(value)
	return nil
}
func (CheckInfo_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 0} }

type HealthCheck_Type int32

const (
	HealthCheck_UNKNOWN HealthCheck_Type = 0
	HealthCheck_COMMAND HealthCheck_Type = 1
	HealthCheck_HTTP    HealthCheck_Type = 2
	HealthCheck_TCP     HealthCheck_Type = 3
)

var HealthCheck_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "COMMAND",
	2: "HTTP",
	3: "TCP",
}
var HealthCheck_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"COMMAND": 1,
	"HTTP":    2,
	"TCP":     3,
}

func (x HealthCheck_Type) Enum() *HealthCheck_Type {
	p := new(HealthCheck_Type)
	*p = x
	return p
}
func (x HealthCheck_Type) String() string {
	return proto.EnumName(HealthCheck_Type_name, int32(x))
}
func (x *HealthCheck_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HealthCheck_Type_value, data, "HealthCheck_Type")
	if err != nil {
		return err
	}
	*x = HealthCheck_Type(value)
	return nil
}
func (HealthCheck_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{17, 0} }

type ExecutorInfo_Type int32

const (
	ExecutorInfo_UNKNOWN ExecutorInfo_Type = 0
	// Mesos provides a simple built-in default executor that frameworks can
	// leverage to run shell commands and containers.
	//
	// NOTES:
	//
	// 1) `command` must not be set when using a default executor.
	//
	// 2) Default executor only accepts a *single* `LAUNCH` or `LAUNCH_GROUP`
	//    operation.
	//
	// 3) If `container` is set, `container.type` must be `MESOS`
	//    and `container.mesos.image` must not be set.
	ExecutorInfo_DEFAULT ExecutorInfo_Type = 1
	// For frameworks that need custom functionality to run tasks, a `CUSTOM`
	// executor can be used. Note that `command` must be set when using a
	// `CUSTOM` executor.
	ExecutorInfo_CUSTOM ExecutorInfo_Type = 2
)

var ExecutorInfo_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "DEFAULT",
	2: "CUSTOM",
}
var ExecutorInfo_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"DEFAULT": 1,
	"CUSTOM":  2,
}

func (x ExecutorInfo_Type) Enum() *ExecutorInfo_Type {
	p := new(ExecutorInfo_Type)
	*p = x
	return p
}
func (x ExecutorInfo_Type) String() string {
	return proto.EnumName(ExecutorInfo_Type_name, int32(x))
}
func (x *ExecutorInfo_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExecutorInfo_Type_value, data, "ExecutorInfo_Type")
	if err != nil {
		return err
	}
	*x = ExecutorInfo_Type(value)
	return nil
}
func (ExecutorInfo_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{20, 0} }

type MasterInfo_Capability_Type int32

const (
	MasterInfo_Capability_UNKNOWN MasterInfo_Capability_Type = 0
	// The master can handle slaves whose state
	// changes after reregistering.
	MasterInfo_Capability_AGENT_UPDATE MasterInfo_Capability_Type = 1
)

var MasterInfo_Capability_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "AGENT_UPDATE",
}
var MasterInfo_Capability_Type_value = map[string]int32{
	"UNKNOWN":      0,
	"AGENT_UPDATE": 1,
}

func (x MasterInfo_Capability_Type) Enum() *MasterInfo_Capability_Type {
	p := new(MasterInfo_Capability_Type)
	*p = x
	return p
}
func (x MasterInfo_Capability_Type) String() string {
	return proto.EnumName(MasterInfo_Capability_Type_name, int32(x))
}
func (x *MasterInfo_Capability_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MasterInfo_Capability_Type_value, data, "MasterInfo_Capability_Type")
	if err != nil {
		return err
	}
	*x = MasterInfo_Capability_Type(value)
	return nil
}
func (MasterInfo_Capability_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22, 0, 0}
}

type AgentInfo_Capability_Type int32

const (
	// This must be the first enum value in this list, to
	// ensure that if 'type' is not set, the default value
	// is UNKNOWN. This enables enum values to be added
	// in a backwards-compatible way. See: MESOS-4997.
	AgentInfo_Capability_UNKNOWN AgentInfo_Capability_Type = 0
	// This expresses the ability for the agent to be able
	// to launch tasks of a 'multi-role' framework.
	AgentInfo_Capability_MULTI_ROLE AgentInfo_Capability_Type = 1
	// This expresses the ability for the agent to be able to launch
	// tasks, reserve resources, and create volumes using resources
	// allocated to a 'hierarchical-role'.
	// NOTE: This capability is required specifically for creating
	// volumes because a hierchical role includes '/' (slashes) in them.
	// Agents with this capability know to transform the '/' (slashes)
	// into ' ' (spaces).
	AgentInfo_Capability_HIERARCHICAL_ROLE AgentInfo_Capability_Type = 2
	// This capability has three effects for an agent.
	//
	// (1) The format of the checkpointed resources, and
	//     the resources reported to master.
	//
	//     These resources are reported in the "pre-reservation-refinement"
	//     format if none of the resources have refined reservations. If any
	//     of the resources have refined reservations, they are reported in
	//     the "post-reservation-refinement" format. The purpose is to allow
	//     downgrading of an agent as well as communication with a pre-1.4.0
	//     master until the reservation refinement feature is actually used.
	//
	//     See the 'Resource Format' section for more details.
	//
	// (2) The format of the resources reported by the HTTP endpoints.
	//
	//     For resources reported by agent endpoints, the
	//     "pre-reservation-refinement" format is "injected" if possible.
	//     That is, resources without refined reservations will have the
	//     `Resource.role` and `Resource.reservation` set, whereas
	//     resources with refined reservations will not.
	//
	//     See the 'Resource Format' section for more details.
	//
	// (3) The ability for the agent to launch tasks, reserve resources, and
	//     create volumes using resources that have refined reservations.
	//
	//     See `ReservationInfo.reservations` section for more details.
	//
	// NOTE: Resources are said to have refined reservations if it uses the
	// `Resource.reservations` field, and `Resource.reservations_size() > 1`.
	AgentInfo_Capability_RESERVATION_REFINEMENT AgentInfo_Capability_Type = 3
	// This expresses the ability for the agent to handle resource
	// provider related operations. This includes the following:
	//
	// (1) The ability to report resources that are provided by some
	//     local resource providers through the resource provider API.
	//
	// (2) The ability to provide operation feedback.
	AgentInfo_Capability_RESOURCE_PROVIDER AgentInfo_Capability_Type = 4
	// This expresses the capability for the agent to handle persistent volume
	// resize operations safely. This capability is turned on by default.
	AgentInfo_Capability_RESIZE_VOLUME AgentInfo_Capability_Type = 5
)

var AgentInfo_Capability_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "MULTI_ROLE",
	2: "HIERARCHICAL_ROLE",
	3: "RESERVATION_REFINEMENT",
	4: "RESOURCE_PROVIDER",
	5: "RESIZE_VOLUME",
}
var AgentInfo_Capability_Type_value = map[string]int32{
	"UNKNOWN":                0,
	"MULTI_ROLE":             1,
	"HIERARCHICAL_ROLE":      2,
	"RESERVATION_REFINEMENT": 3,
	"RESOURCE_PROVIDER":      4,
	"RESIZE_VOLUME":          5,
}

func (x AgentInfo_Capability_Type) Enum() *AgentInfo_Capability_Type {
	p := new(AgentInfo_Capability_Type)
	*p = x
	return p
}
func (x AgentInfo_Capability_Type) String() string {
	return proto.EnumName(AgentInfo_Capability_Type_name, int32(x))
}
func (x *AgentInfo_Capability_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AgentInfo_Capability_Type_value, data, "AgentInfo_Capability_Type")
	if err != nil {
		return err
	}
	*x = AgentInfo_Capability_Type(value)
	return nil
}
func (AgentInfo_Capability_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{23, 0, 0}
}

type CSIPluginContainerInfo_Service int32

const (
	CSIPluginContainerInfo_UNKNOWN            CSIPluginContainerInfo_Service = 0
	CSIPluginContainerInfo_CONTROLLER_SERVICE CSIPluginContainerInfo_Service = 1
	CSIPluginContainerInfo_NODE_SERVICE       CSIPluginContainerInfo_Service = 2
)

var CSIPluginContainerInfo_Service_name = map[int32]string{
	0: "UNKNOWN",
	1: "CONTROLLER_SERVICE",
	2: "NODE_SERVICE",
}
var CSIPluginContainerInfo_Service_value = map[string]int32{
	"UNKNOWN":            0,
	"CONTROLLER_SERVICE": 1,
	"NODE_SERVICE":       2,
}

func (x CSIPluginContainerInfo_Service) Enum() *CSIPluginContainerInfo_Service {
	p := new(CSIPluginContainerInfo_Service)
	*p = x
	return p
}
func (x CSIPluginContainerInfo_Service) String() string {
	return proto.EnumName(CSIPluginContainerInfo_Service_name, int32(x))
}
func (x *CSIPluginContainerInfo_Service) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSIPluginContainerInfo_Service_value, data, "CSIPluginContainerInfo_Service")
	if err != nil {
		return err
	}
	*x = CSIPluginContainerInfo_Service(value)
	return nil
}
func (CSIPluginContainerInfo_Service) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24, 0}
}

type Value_Type int32

const (
	Value_SCALAR Value_Type = 0
	Value_RANGES Value_Type = 1
	Value_SET    Value_Type = 2
	Value_TEXT   Value_Type = 3
)

var Value_Type_name = map[int32]string{
	0: "SCALAR",
	1: "RANGES",
	2: "SET",
	3: "TEXT",
}
var Value_Type_value = map[string]int32{
	"SCALAR": 0,
	"RANGES": 1,
	"SET":    2,
	"TEXT":   3,
}

func (x Value_Type) Enum() *Value_Type {
	p := new(Value_Type)
	*p = x
	return p
}
func (x Value_Type) String() string {
	return proto.EnumName(Value_Type_name, int32(x))
}
func (x *Value_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Value_Type_value, data, "Value_Type")
	if err != nil {
		return err
	}
	*x = Value_Type(value)
	return nil
}
func (Value_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{27, 0} }

type Resource_ReservationInfo_Type int32

const (
	Resource_ReservationInfo_UNKNOWN Resource_ReservationInfo_Type = 0
	Resource_ReservationInfo_STATIC  Resource_ReservationInfo_Type = 1
	Resource_ReservationInfo_DYNAMIC Resource_ReservationInfo_Type = 2
)

var Resource_ReservationInfo_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "STATIC",
	2: "DYNAMIC",
}
var Resource_ReservationInfo_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"STATIC":  1,
	"DYNAMIC": 2,
}

func (x Resource_ReservationInfo_Type) Enum() *Resource_ReservationInfo_Type {
	p := new(Resource_ReservationInfo_Type)
	*p = x
	return p
}
func (x Resource_ReservationInfo_Type) String() string {
	return proto.EnumName(Resource_ReservationInfo_Type_name, int32(x))
}
func (x *Resource_ReservationInfo_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Resource_ReservationInfo_Type_value, data, "Resource_ReservationInfo_Type")
	if err != nil {
		return err
	}
	*x = Resource_ReservationInfo_Type(value)
	return nil
}
func (Resource_ReservationInfo_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29, 1, 0}
}

type Resource_DiskInfo_Source_Type int32

const (
	Resource_DiskInfo_Source_UNKNOWN Resource_DiskInfo_Source_Type = 0
	Resource_DiskInfo_Source_PATH    Resource_DiskInfo_Source_Type = 1
	Resource_DiskInfo_Source_MOUNT   Resource_DiskInfo_Source_Type = 2
	Resource_DiskInfo_Source_BLOCK   Resource_DiskInfo_Source_Type = 3
	Resource_DiskInfo_Source_RAW     Resource_DiskInfo_Source_Type = 4
)

var Resource_DiskInfo_Source_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "PATH",
	2: "MOUNT",
	3: "BLOCK",
	4: "RAW",
}
var Resource_DiskInfo_Source_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"PATH":    1,
	"MOUNT":   2,
	"BLOCK":   3,
	"RAW":     4,
}

func (x Resource_DiskInfo_Source_Type) Enum() *Resource_DiskInfo_Source_Type {
	p := new(Resource_DiskInfo_Source_Type)
	*p = x
	return p
}
func (x Resource_DiskInfo_Source_Type) String() string {
	return proto.EnumName(Resource_DiskInfo_Source_Type_name, int32(x))
}
func (x *Resource_DiskInfo_Source_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Resource_DiskInfo_Source_Type_value, data, "Resource_DiskInfo_Source_Type")
	if err != nil {
		return err
	}
	*x = Resource_DiskInfo_Source_Type(value)
	return nil
}
func (Resource_DiskInfo_Source_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29, 2, 1, 0}
}

type Offer_Operation_Type int32

const (
	Offer_Operation_UNKNOWN        Offer_Operation_Type = 0
	Offer_Operation_LAUNCH         Offer_Operation_Type = 1
	Offer_Operation_LAUNCH_GROUP   Offer_Operation_Type = 6
	Offer_Operation_RESERVE        Offer_Operation_Type = 2
	Offer_Operation_UNRESERVE      Offer_Operation_Type = 3
	Offer_Operation_CREATE         Offer_Operation_Type = 4
	Offer_Operation_DESTROY        Offer_Operation_Type = 5
	Offer_Operation_CREATE_VOLUME  Offer_Operation_Type = 7
	Offer_Operation_DESTROY_VOLUME Offer_Operation_Type = 8
	Offer_Operation_CREATE_BLOCK   Offer_Operation_Type = 9
	Offer_Operation_DESTROY_BLOCK  Offer_Operation_Type = 10
	Offer_Operation_GROW_VOLUME    Offer_Operation_Type = 11
	Offer_Operation_SHRINK_VOLUME  Offer_Operation_Type = 12
)

var Offer_Operation_Type_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "LAUNCH",
	6:  "LAUNCH_GROUP",
	2:  "RESERVE",
	3:  "UNRESERVE",
	4:  "CREATE",
	5:  "DESTROY",
	7:  "CREATE_VOLUME",
	8:  "DESTROY_VOLUME",
	9:  "CREATE_BLOCK",
	10: "DESTROY_BLOCK",
	11: "GROW_VOLUME",
	12: "SHRINK_VOLUME",
}
var Offer_Operation_Type_value = map[string]int32{
	"UNKNOWN":        0,
	"LAUNCH":         1,
	"LAUNCH_GROUP":   6,
	"RESERVE":        2,
	"UNRESERVE":      3,
	"CREATE":         4,
	"DESTROY":        5,
	"CREATE_VOLUME":  7,
	"DESTROY_VOLUME": 8,
	"CREATE_BLOCK":   9,
	"DESTROY_BLOCK":  10,
	"GROW_VOLUME":    11,
	"SHRINK_VOLUME":  12,
}

func (x Offer_Operation_Type) Enum() *Offer_Operation_Type {
	p := new(Offer_Operation_Type)
	*p = x
	return p
}
func (x Offer_Operation_Type) String() string {
	return proto.EnumName(Offer_Operation_Type_name, int32(x))
}
func (x *Offer_Operation_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Offer_Operation_Type_value, data, "Offer_Operation_Type")
	if err != nil {
		return err
	}
	*x = Offer_Operation_Type(value)
	return nil
}
func (Offer_Operation_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{41, 0, 0} }

// Describes the source of the task status update.
type TaskStatus_Source int32

const (
	TaskStatus_SOURCE_MASTER   TaskStatus_Source = 0
	TaskStatus_SOURCE_AGENT    TaskStatus_Source = 1
	TaskStatus_SOURCE_EXECUTOR TaskStatus_Source = 2
)

var TaskStatus_Source_name = map[int32]string{
	0: "SOURCE_MASTER",
	1: "SOURCE_AGENT",
	2: "SOURCE_EXECUTOR",
}
var TaskStatus_Source_value = map[string]int32{
	"SOURCE_MASTER":   0,
	"SOURCE_AGENT":    1,
	"SOURCE_EXECUTOR": 2,
}

func (x TaskStatus_Source) Enum() *TaskStatus_Source {
	p := new(TaskStatus_Source)
	*p = x
	return p
}
func (x TaskStatus_Source) String() string {
	return proto.EnumName(TaskStatus_Source_name, int32(x))
}
func (x *TaskStatus_Source) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskStatus_Source_value, data, "TaskStatus_Source")
	if err != nil {
		return err
	}
	*x = TaskStatus_Source(value)
	return nil
}
func (TaskStatus_Source) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{51, 0} }

// Detailed reason for the task status update.
// Refer to docs/task-state-reasons.md for additional explanation.
type TaskStatus_Reason int32

const (
	// TODO(jieyu): The default value when a caller doesn't check for
	// presence is 0 and so ideally the 0 reason is not a valid one.
	// Since this is not used anywhere, consider removing this reason.
	TaskStatus_REASON_COMMAND_EXECUTOR_FAILED          TaskStatus_Reason = 0
	TaskStatus_REASON_CONTAINER_LAUNCH_FAILED          TaskStatus_Reason = 21
	TaskStatus_REASON_CONTAINER_LIMITATION             TaskStatus_Reason = 19
	TaskStatus_REASON_CONTAINER_LIMITATION_DISK        TaskStatus_Reason = 20
	TaskStatus_REASON_CONTAINER_LIMITATION_MEMORY      TaskStatus_Reason = 8
	TaskStatus_REASON_CONTAINER_PREEMPTED              TaskStatus_Reason = 17
	TaskStatus_REASON_CONTAINER_UPDATE_FAILED          TaskStatus_Reason = 22
	TaskStatus_REASON_MAX_COMPLETION_TIME_REACHED      TaskStatus_Reason = 33
	TaskStatus_REASON_EXECUTOR_REGISTRATION_TIMEOUT    TaskStatus_Reason = 23
	TaskStatus_REASON_EXECUTOR_REREGISTRATION_TIMEOUT  TaskStatus_Reason = 24
	TaskStatus_REASON_EXECUTOR_TERMINATED              TaskStatus_Reason = 1
	TaskStatus_REASON_EXECUTOR_UNREGISTERED            TaskStatus_Reason = 2
	TaskStatus_REASON_FRAMEWORK_REMOVED                TaskStatus_Reason = 3
	TaskStatus_REASON_GC_ERROR                         TaskStatus_Reason = 4
	TaskStatus_REASON_INVALID_FRAMEWORKID              TaskStatus_Reason = 5
	TaskStatus_REASON_INVALID_OFFERS                   TaskStatus_Reason = 6
	TaskStatus_REASON_IO_SWITCHBOARD_EXITED            TaskStatus_Reason = 27
	TaskStatus_REASON_MASTER_DISCONNECTED              TaskStatus_Reason = 7
	TaskStatus_REASON_RECONCILIATION                   TaskStatus_Reason = 9
	TaskStatus_REASON_RESOURCES_UNKNOWN                TaskStatus_Reason = 18
	TaskStatus_REASON_AGENT_DISCONNECTED               TaskStatus_Reason = 10
	TaskStatus_REASON_AGENT_REMOVED                    TaskStatus_Reason = 11
	TaskStatus_REASON_AGENT_REMOVED_BY_OPERATOR        TaskStatus_Reason = 31
	TaskStatus_REASON_AGENT_REREGISTERED               TaskStatus_Reason = 32
	TaskStatus_REASON_AGENT_RESTARTED                  TaskStatus_Reason = 12
	TaskStatus_REASON_AGENT_UNKNOWN                    TaskStatus_Reason = 13
	TaskStatus_REASON_TASK_KILLED_DURING_LAUNCH        TaskStatus_Reason = 30
	TaskStatus_REASON_TASK_CHECK_STATUS_UPDATED        TaskStatus_Reason = 28
	TaskStatus_REASON_TASK_HEALTH_CHECK_STATUS_UPDATED TaskStatus_Reason = 29
	TaskStatus_REASON_TASK_GROUP_INVALID               TaskStatus_Reason = 25
	TaskStatus_REASON_TASK_GROUP_UNAUTHORIZED          TaskStatus_Reason = 26
	TaskStatus_REASON_TASK_INVALID                     TaskStatus_Reason = 14
	TaskStatus_REASON_TASK_UNAUTHORIZED                TaskStatus_Reason = 15
	TaskStatus_REASON_TASK_UNKNOWN                     TaskStatus_Reason = 16
)

var TaskStatus_Reason_name = map[int32]string{
	0:  "REASON_COMMAND_EXECUTOR_FAILED",
	21: "REASON_CONTAINER_LAUNCH_FAILED",
	19: "REASON_CONTAINER_LIMITATION",
	20: "REASON_CONTAINER_LIMITATION_DISK",
	8:  "REASON_CONTAINER_LIMITATION_MEMORY",
	17: "REASON_CONTAINER_PREEMPTED",
	22: "REASON_CONTAINER_UPDATE_FAILED",
	33: "REASON_MAX_COMPLETION_TIME_REACHED",
	23: "REASON_EXECUTOR_REGISTRATION_TIMEOUT",
	24: "REASON_EXECUTOR_REREGISTRATION_TIMEOUT",
	1:  "REASON_EXECUTOR_TERMINATED",
	2:  "REASON_EXECUTOR_UNREGISTERED",
	3:  "REASON_FRAMEWORK_REMOVED",
	4:  "REASON_GC_ERROR",
	5:  "REASON_INVALID_FRAMEWORKID",
	6:  "REASON_INVALID_OFFERS",
	27: "REASON_IO_SWITCHBOARD_EXITED",
	7:  "REASON_MASTER_DISCONNECTED",
	9:  "REASON_RECONCILIATION",
	18: "REASON_RESOURCES_UNKNOWN",
	10: "REASON_AGENT_DISCONNECTED",
	11: "REASON_AGENT_REMOVED",
	31: "REASON_AGENT_REMOVED_BY_OPERATOR",
	32: "REASON_AGENT_REREGISTERED",
	12: "REASON_AGENT_RESTARTED",
	13: "REASON_AGENT_UNKNOWN",
	30: "REASON_TASK_KILLED_DURING_LAUNCH",
	28: "REASON_TASK_CHECK_STATUS_UPDATED",
	29: "REASON_TASK_HEALTH_CHECK_STATUS_UPDATED",
	25: "REASON_TASK_GROUP_INVALID",
	26: "REASON_TASK_GROUP_UNAUTHORIZED",
	14: "REASON_TASK_INVALID",
	15: "REASON_TASK_UNAUTHORIZED",
	16: "REASON_TASK_UNKNOWN",
}
var TaskStatus_Reason_value = map[string]int32{
	"REASON_COMMAND_EXECUTOR_FAILED":          0,
	"REASON_CONTAINER_LAUNCH_FAILED":          21,
	"REASON_CONTAINER_LIMITATION":             19,
	"REASON_CONTAINER_LIMITATION_DISK":        20,
	"REASON_CONTAINER_LIMITATION_MEMORY":      8,
	"REASON_CONTAINER_PREEMPTED":              17,
	"REASON_CONTAINER_UPDATE_FAILED":          22,
	"REASON_MAX_COMPLETION_TIME_REACHED":      33,
	"REASON_EXECUTOR_REGISTRATION_TIMEOUT":    23,
	"REASON_EXECUTOR_REREGISTRATION_TIMEOUT":  24,
	"REASON_EXECUTOR_TERMINATED":              1,
	"REASON_EXECUTOR_UNREGISTERED":            2,
	"REASON_FRAMEWORK_REMOVED":                3,
	"REASON_GC_ERROR":                         4,
	"REASON_INVALID_FRAMEWORKID":              5,
	"REASON_INVALID_OFFERS":                   6,
	"REASON_IO_SWITCHBOARD_EXITED":            27,
	"REASON_MASTER_DISCONNECTED":              7,
	"REASON_RECONCILIATION":                   9,
	"REASON_RESOURCES_UNKNOWN":                18,
	"REASON_AGENT_DISCONNECTED":               10,
	"REASON_AGENT_REMOVED":                    11,
	"REASON_AGENT_REMOVED_BY_OPERATOR":        31,
	"REASON_AGENT_REREGISTERED":               32,
	"REASON_AGENT_RESTARTED":                  12,
	"REASON_AGENT_UNKNOWN":                    13,
	"REASON_TASK_KILLED_DURING_LAUNCH":        30,
	"REASON_TASK_CHECK_STATUS_UPDATED":        28,
	"REASON_TASK_HEALTH_CHECK_STATUS_UPDATED": 29,
	"REASON_TASK_GROUP_INVALID":               25,
	"REASON_TASK_GROUP_UNAUTHORIZED":          26,
	"REASON_TASK_INVALID":                     14,
	"REASON_TASK_UNAUTHORIZED":                15,
	"REASON_TASK_UNKNOWN":                     16,
}

func (x TaskStatus_Reason) Enum() *TaskStatus_Reason {
	p := new(TaskStatus_Reason)
	*p = x
	return p
}
func (x TaskStatus_Reason) String() string {
	return proto.EnumName(TaskStatus_Reason_name, int32(x))
}
func (x *TaskStatus_Reason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskStatus_Reason_value, data, "TaskStatus_Reason")
	if err != nil {
		return err
	}
	*x = TaskStatus_Reason(value)
	return nil
}
func (TaskStatus_Reason) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{51, 1} }

type Environment_Variable_Type int32

const (
	Environment_Variable_UNKNOWN Environment_Variable_Type = 0
	Environment_Variable_VALUE   Environment_Variable_Type = 1
	Environment_Variable_SECRET  Environment_Variable_Type = 2
)

var Environment_Variable_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "VALUE",
	2: "SECRET",
}
var Environment_Variable_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"VALUE":   1,
	"SECRET":  2,
}

func (x Environment_Variable_Type) Enum() *Environment_Variable_Type {
	p := new(Environment_Variable_Type)
	*p = x
	return p
}
func (x Environment_Variable_Type) String() string {
	return proto.EnumName(Environment_Variable_Type_name, int32(x))
}
func (x *Environment_Variable_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Environment_Variable_Type_value, data, "Environment_Variable_Type")
	if err != nil {
		return err
	}
	*x = Environment_Variable_Type(value)
	return nil
}
func (Environment_Variable_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{53, 0, 0}
}

type Secret_Type int32

const (
	Secret_UNKNOWN   Secret_Type = 0
	Secret_REFERENCE Secret_Type = 1
	Secret_VALUE     Secret_Type = 2
)

var Secret_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "REFERENCE",
	2: "VALUE",
}
var Secret_Type_value = map[string]int32{
	"UNKNOWN":   0,
	"REFERENCE": 1,
	"VALUE":     2,
}

func (x Secret_Type) Enum() *Secret_Type {
	p := new(Secret_Type)
	*p = x
	return p
}
func (x Secret_Type) String() string {
	return proto.EnumName(Secret_Type_name, int32(x))
}
func (x *Secret_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Secret_Type_value, data, "Secret_Type")
	if err != nil {
		return err
	}
	*x = Secret_Type(value)
	return nil
}
func (Secret_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{58, 0} }

type Image_Type int32

const (
	Image_APPC   Image_Type = 1
	Image_DOCKER Image_Type = 2
)

var Image_Type_name = map[int32]string{
	1: "APPC",
	2: "DOCKER",
}
var Image_Type_value = map[string]int32{
	"APPC":   1,
	"DOCKER": 2,
}

func (x Image_Type) Enum() *Image_Type {
	p := new(Image_Type)
	*p = x
	return p
}
func (x Image_Type) String() string {
	return proto.EnumName(Image_Type_name, int32(x))
}
func (x *Image_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Image_Type_value, data, "Image_Type")
	if err != nil {
		return err
	}
	*x = Image_Type(value)
	return nil
}
func (Image_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{61, 0} }

type MountPropagation_Mode int32

const (
	MountPropagation_UNKNOWN MountPropagation_Mode = 0
	// The volume in a container will receive new mounts from the host
	// or other containers, but filesystems mounted inside the
	// container won't be propagated to the host or other containers.
	// This is currently the default behavior for all volumes.
	MountPropagation_HOST_TO_CONTAINER MountPropagation_Mode = 1
	// The volume in a container will receive new mounts from the host
	// or other containers, and its own mounts will be propagated from
	// the container to the host or other containers.
	MountPropagation_BIDIRECTIONAL MountPropagation_Mode = 2
)

var MountPropagation_Mode_name = map[int32]string{
	0: "UNKNOWN",
	1: "HOST_TO_CONTAINER",
	2: "BIDIRECTIONAL",
}
var MountPropagation_Mode_value = map[string]int32{
	"UNKNOWN":           0,
	"HOST_TO_CONTAINER": 1,
	"BIDIRECTIONAL":     2,
}

func (x MountPropagation_Mode) Enum() *MountPropagation_Mode {
	p := new(MountPropagation_Mode)
	*p = x
	return p
}
func (x MountPropagation_Mode) String() string {
	return proto.EnumName(MountPropagation_Mode_name, int32(x))
}
func (x *MountPropagation_Mode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MountPropagation_Mode_value, data, "MountPropagation_Mode")
	if err != nil {
		return err
	}
	*x = MountPropagation_Mode(value)
	return nil
}
func (MountPropagation_Mode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{62, 0} }

type Volume_Mode int32

const (
	Volume_RW Volume_Mode = 1
	Volume_RO Volume_Mode = 2
)

var Volume_Mode_name = map[int32]string{
	1: "RW",
	2: "RO",
}
var Volume_Mode_value = map[string]int32{
	"RW": 1,
	"RO": 2,
}

func (x Volume_Mode) Enum() *Volume_Mode {
	p := new(Volume_Mode)
	*p = x
	return p
}
func (x Volume_Mode) String() string {
	return proto.EnumName(Volume_Mode_name, int32(x))
}
func (x *Volume_Mode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Volume_Mode_value, data, "Volume_Mode")
	if err != nil {
		return err
	}
	*x = Volume_Mode(value)
	return nil
}
func (Volume_Mode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{63, 0} }

type Volume_Source_Type int32

const (
	// This must be the first enum value in this list, to
	// ensure that if 'type' is not set, the default value
	// is UNKNOWN. This enables enum values to be added
	// in a backwards-compatible way. See: MESOS-4997.
	Volume_Source_UNKNOWN Volume_Source_Type = 0
	// TODO(gyliu513): Add IMAGE as volume source type.
	Volume_Source_DOCKER_VOLUME Volume_Source_Type = 1
	Volume_Source_HOST_PATH     Volume_Source_Type = 4
	Volume_Source_SANDBOX_PATH  Volume_Source_Type = 2
	Volume_Source_SECRET        Volume_Source_Type = 3
)

var Volume_Source_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "DOCKER_VOLUME",
	4: "HOST_PATH",
	2: "SANDBOX_PATH",
	3: "SECRET",
}
var Volume_Source_Type_value = map[string]int32{
	"UNKNOWN":       0,
	"DOCKER_VOLUME": 1,
	"HOST_PATH":     4,
	"SANDBOX_PATH":  2,
	"SECRET":        3,
}

func (x Volume_Source_Type) Enum() *Volume_Source_Type {
	p := new(Volume_Source_Type)
	*p = x
	return p
}
func (x Volume_Source_Type) String() string {
	return proto.EnumName(Volume_Source_Type_name, int32(x))
}
func (x *Volume_Source_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Volume_Source_Type_value, data, "Volume_Source_Type")
	if err != nil {
		return err
	}
	*x = Volume_Source_Type(value)
	return nil
}
func (Volume_Source_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{63, 0, 0} }

type Volume_Source_SandboxPath_Type int32

const (
	Volume_Source_SandboxPath_UNKNOWN Volume_Source_SandboxPath_Type = 0
	Volume_Source_SandboxPath_SELF    Volume_Source_SandboxPath_Type = 1
	Volume_Source_SandboxPath_PARENT  Volume_Source_SandboxPath_Type = 2
)

var Volume_Source_SandboxPath_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "SELF",
	2: "PARENT",
}
var Volume_Source_SandboxPath_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"SELF":    1,
	"PARENT":  2,
}

func (x Volume_Source_SandboxPath_Type) Enum() *Volume_Source_SandboxPath_Type {
	p := new(Volume_Source_SandboxPath_Type)
	*p = x
	return p
}
func (x Volume_Source_SandboxPath_Type) String() string {
	return proto.EnumName(Volume_Source_SandboxPath_Type_name, int32(x))
}
func (x *Volume_Source_SandboxPath_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Volume_Source_SandboxPath_Type_value, data, "Volume_Source_SandboxPath_Type")
	if err != nil {
		return err
	}
	*x = Volume_Source_SandboxPath_Type(value)
	return nil
}
func (Volume_Source_SandboxPath_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{63, 0, 2, 0}
}

type NetworkInfo_Protocol int32

const (
	NetworkInfo_IPv4 NetworkInfo_Protocol = 1
	NetworkInfo_IPv6 NetworkInfo_Protocol = 2
)

var NetworkInfo_Protocol_name = map[int32]string{
	1: "IPv4",
	2: "IPv6",
}
var NetworkInfo_Protocol_value = map[string]int32{
	"IPv4": 1,
	"IPv6": 2,
}

func (x NetworkInfo_Protocol) Enum() *NetworkInfo_Protocol {
	p := new(NetworkInfo_Protocol)
	*p = x
	return p
}
func (x NetworkInfo_Protocol) String() string {
	return proto.EnumName(NetworkInfo_Protocol_name, int32(x))
}
func (x *NetworkInfo_Protocol) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NetworkInfo_Protocol_value, data, "NetworkInfo_Protocol")
	if err != nil {
		return err
	}
	*x = NetworkInfo_Protocol(value)
	return nil
}
func (NetworkInfo_Protocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{64, 0} }

// We start the actual values at an offset(1000) because Protobuf 2
// uses the first value as the default one. Separating the default
// value from the real first value helps to disambiguate them. This
// is especially valuable for backward compatibility.
// See: MESOS-4997.
type CapabilityInfo_Capability int32

const (
	CapabilityInfo_UNKNOWN          CapabilityInfo_Capability = 0
	CapabilityInfo_CHOWN            CapabilityInfo_Capability = 1000
	CapabilityInfo_DAC_OVERRIDE     CapabilityInfo_Capability = 1001
	CapabilityInfo_DAC_READ_SEARCH  CapabilityInfo_Capability = 1002
	CapabilityInfo_FOWNER           CapabilityInfo_Capability = 1003
	CapabilityInfo_FSETID           CapabilityInfo_Capability = 1004
	CapabilityInfo_KILL             CapabilityInfo_Capability = 1005
	CapabilityInfo_SETGID           CapabilityInfo_Capability = 1006
	CapabilityInfo_SETUID           CapabilityInfo_Capability = 1007
	CapabilityInfo_SETPCAP          CapabilityInfo_Capability = 1008
	CapabilityInfo_LINUX_IMMUTABLE  CapabilityInfo_Capability = 1009
	CapabilityInfo_NET_BIND_SERVICE CapabilityInfo_Capability = 1010
	CapabilityInfo_NET_BROADCAST    CapabilityInfo_Capability = 1011
	CapabilityInfo_NET_ADMIN        CapabilityInfo_Capability = 1012
	CapabilityInfo_NET_RAW          CapabilityInfo_Capability = 1013
	CapabilityInfo_IPC_LOCK         CapabilityInfo_Capability = 1014
	CapabilityInfo_IPC_OWNER        CapabilityInfo_Capability = 1015
	CapabilityInfo_SYS_MODULE       CapabilityInfo_Capability = 1016
	CapabilityInfo_SYS_RAWIO        CapabilityInfo_Capability = 1017
	CapabilityInfo_SYS_CHROOT       CapabilityInfo_Capability = 1018
	CapabilityInfo_SYS_PTRACE       CapabilityInfo_Capability = 1019
	CapabilityInfo_SYS_PACCT        CapabilityInfo_Capability = 1020
	CapabilityInfo_SYS_ADMIN        CapabilityInfo_Capability = 1021
	CapabilityInfo_SYS_BOOT         CapabilityInfo_Capability = 1022
	CapabilityInfo_SYS_NICE         CapabilityInfo_Capability = 1023
	CapabilityInfo_SYS_RESOURCE     CapabilityInfo_Capability = 1024
	CapabilityInfo_SYS_TIME         CapabilityInfo_Capability = 1025
	CapabilityInfo_SYS_TTY_CONFIG   CapabilityInfo_Capability = 1026
	CapabilityInfo_MKNOD            CapabilityInfo_Capability = 1027
	CapabilityInfo_LEASE            CapabilityInfo_Capability = 1028
	CapabilityInfo_AUDIT_WRITE      CapabilityInfo_Capability = 1029
	CapabilityInfo_AUDIT_CONTROL    CapabilityInfo_Capability = 1030
	CapabilityInfo_SETFCAP          CapabilityInfo_Capability = 1031
	CapabilityInfo_MAC_OVERRIDE     CapabilityInfo_Capability = 1032
	CapabilityInfo_MAC_ADMIN        CapabilityInfo_Capability = 1033
	CapabilityInfo_SYSLOG           CapabilityInfo_Capability = 1034
	CapabilityInfo_WAKE_ALARM       CapabilityInfo_Capability = 1035
	CapabilityInfo_BLOCK_SUSPEND    CapabilityInfo_Capability = 1036
	CapabilityInfo_AUDIT_READ       CapabilityInfo_Capability = 1037
)

var CapabilityInfo_Capability_name = map[int32]string{
	0:    "UNKNOWN",
	1000: "CHOWN",
	1001: "DAC_OVERRIDE",
	1002: "DAC_READ_SEARCH",
	1003: "FOWNER",
	1004: "FSETID",
	1005: "KILL",
	1006: "SETGID",
	1007: "SETUID",
	1008: "SETPCAP",
	1009: "LINUX_IMMUTABLE",
	1010: "NET_BIND_SERVICE",
	1011: "NET_BROADCAST",
	1012: "NET_ADMIN",
	1013: "NET_RAW",
	1014: "IPC_LOCK",
	1015: "IPC_OWNER",
	1016: "SYS_MODULE",
	1017: "SYS_RAWIO",
	1018: "SYS_CHROOT",
	1019: "SYS_PTRACE",
	1020: "SYS_PACCT",
	1021: "SYS_ADMIN",
	1022: "SYS_BOOT",
	1023: "SYS_NICE",
	1024: "SYS_RESOURCE",
	1025: "SYS_TIME",
	1026: "SYS_TTY_CONFIG",
	1027: "MKNOD",
	1028: "LEASE",
	1029: "AUDIT_WRITE",
	1030: "AUDIT_CONTROL",
	1031: "SETFCAP",
	1032: "MAC_OVERRIDE",
	1033: "MAC_ADMIN",
	1034: "SYSLOG",
	1035: "WAKE_ALARM",
	1036: "BLOCK_SUSPEND",
	1037: "AUDIT_READ",
}
var CapabilityInfo_Capability_value = map[string]int32{
	"UNKNOWN":          0,
	"CHOWN":            1000,
	"DAC_OVERRIDE":     1001,
	"DAC_READ_SEARCH":  1002,
	"FOWNER":           1003,
	"FSETID":           1004,
	"KILL":             1005,
	"SETGID":           1006,
	"SETUID":           1007,
	"SETPCAP":          1008,
	"LINUX_IMMUTABLE":  1009,
	"NET_BIND_SERVICE": 1010,
	"NET_BROADCAST":    1011,
	"NET_ADMIN":        1012,
	"NET_RAW":          1013,
	"IPC_LOCK":         1014,
	"IPC_OWNER":        1015,
	"SYS_MODULE":       1016,
	"SYS_RAWIO":        1017,
	"SYS_CHROOT":       1018,
	"SYS_PTRACE":       1019,
	"SYS_PACCT":        1020,
	"SYS_ADMIN":        1021,
	"SYS_BOOT":         1022,
	"SYS_NICE":         1023,
	"SYS_RESOURCE":     1024,
	"SYS_TIME":         1025,
	"SYS_TTY_CONFIG":   1026,
	"MKNOD":            1027,
	"LEASE":            1028,
	"AUDIT_WRITE":      1029,
	"AUDIT_CONTROL":    1030,
	"SETFCAP":          1031,
	"MAC_OVERRIDE":     1032,
	"MAC_ADMIN":        1033,
	"SYSLOG":           1034,
	"WAKE_ALARM":       1035,
	"BLOCK_SUSPEND":    1036,
	"AUDIT_READ":       1037,
}

func (x CapabilityInfo_Capability) Enum() *CapabilityInfo_Capability {
	p := new(CapabilityInfo_Capability)
	*p = x
	return p
}
func (x CapabilityInfo_Capability) String() string {
	return proto.EnumName(CapabilityInfo_Capability_name, int32(x))
}
func (x *CapabilityInfo_Capability) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CapabilityInfo_Capability_value, data, "CapabilityInfo_Capability")
	if err != nil {
		return err
	}
	*x = CapabilityInfo_Capability(value)
	return nil
}
func (CapabilityInfo_Capability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{65, 0}
}

type RLimitInfo_RLimit_Type int32

const (
	RLimitInfo_RLimit_UNKNOWN         RLimitInfo_RLimit_Type = 0
	RLimitInfo_RLimit_RLMT_AS         RLimitInfo_RLimit_Type = 1
	RLimitInfo_RLimit_RLMT_CORE       RLimitInfo_RLimit_Type = 2
	RLimitInfo_RLimit_RLMT_CPU        RLimitInfo_RLimit_Type = 3
	RLimitInfo_RLimit_RLMT_DATA       RLimitInfo_RLimit_Type = 4
	RLimitInfo_RLimit_RLMT_FSIZE      RLimitInfo_RLimit_Type = 5
	RLimitInfo_RLimit_RLMT_LOCKS      RLimitInfo_RLimit_Type = 6
	RLimitInfo_RLimit_RLMT_MEMLOCK    RLimitInfo_RLimit_Type = 7
	RLimitInfo_RLimit_RLMT_MSGQUEUE   RLimitInfo_RLimit_Type = 8
	RLimitInfo_RLimit_RLMT_NICE       RLimitInfo_RLimit_Type = 9
	RLimitInfo_RLimit_RLMT_NOFILE     RLimitInfo_RLimit_Type = 10
	RLimitInfo_RLimit_RLMT_NPROC      RLimitInfo_RLimit_Type = 11
	RLimitInfo_RLimit_RLMT_RSS        RLimitInfo_RLimit_Type = 12
	RLimitInfo_RLimit_RLMT_RTPRIO     RLimitInfo_RLimit_Type = 13
	RLimitInfo_RLimit_RLMT_RTTIME     RLimitInfo_RLimit_Type = 14
	RLimitInfo_RLimit_RLMT_SIGPENDING RLimitInfo_RLimit_Type = 15
	RLimitInfo_RLimit_RLMT_STACK      RLimitInfo_RLimit_Type = 16
)

var RLimitInfo_RLimit_Type_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "RLMT_AS",
	2:  "RLMT_CORE",
	3:  "RLMT_CPU",
	4:  "RLMT_DATA",
	5:  "RLMT_FSIZE",
	6:  "RLMT_LOCKS",
	7:  "RLMT_MEMLOCK",
	8:  "RLMT_MSGQUEUE",
	9:  "RLMT_NICE",
	10: "RLMT_NOFILE",
	11: "RLMT_NPROC",
	12: "RLMT_RSS",
	13: "RLMT_RTPRIO",
	14: "RLMT_RTTIME",
	15: "RLMT_SIGPENDING",
	16: "RLMT_STACK",
}
var RLimitInfo_RLimit_Type_value = map[string]int32{
	"UNKNOWN":         0,
	"RLMT_AS":         1,
	"RLMT_CORE":       2,
	"RLMT_CPU":        3,
	"RLMT_DATA":       4,
	"RLMT_FSIZE":      5,
	"RLMT_LOCKS":      6,
	"RLMT_MEMLOCK":    7,
	"RLMT_MSGQUEUE":   8,
	"RLMT_NICE":       9,
	"RLMT_NOFILE":     10,
	"RLMT_NPROC":      11,
	"RLMT_RSS":        12,
	"RLMT_RTPRIO":     13,
	"RLMT_RTTIME":     14,
	"RLMT_SIGPENDING": 15,
	"RLMT_STACK":      16,
}

func (x RLimitInfo_RLimit_Type) Enum() *RLimitInfo_RLimit_Type {
	p := new(RLimitInfo_RLimit_Type)
	*p = x
	return p
}
func (x RLimitInfo_RLimit_Type) String() string {
	return proto.EnumName(RLimitInfo_RLimit_Type_name, int32(x))
}
func (x *RLimitInfo_RLimit_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RLimitInfo_RLimit_Type_value, data, "RLimitInfo_RLimit_Type")
	if err != nil {
		return err
	}
	*x = RLimitInfo_RLimit_Type(value)
	return nil
}
func (RLimitInfo_RLimit_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{67, 0, 0}
}

// All container implementation types.
type ContainerInfo_Type int32

const (
	ContainerInfo_DOCKER ContainerInfo_Type = 1
	ContainerInfo_MESOS  ContainerInfo_Type = 2
)

var ContainerInfo_Type_name = map[int32]string{
	1: "DOCKER",
	2: "MESOS",
}
var ContainerInfo_Type_value = map[string]int32{
	"DOCKER": 1,
	"MESOS":  2,
}

func (x ContainerInfo_Type) Enum() *ContainerInfo_Type {
	p := new(ContainerInfo_Type)
	*p = x
	return p
}
func (x ContainerInfo_Type) String() string {
	return proto.EnumName(ContainerInfo_Type_name, int32(x))
}
func (x *ContainerInfo_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContainerInfo_Type_value, data, "ContainerInfo_Type")
	if err != nil {
		return err
	}
	*x = ContainerInfo_Type(value)
	return nil
}
func (ContainerInfo_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{69, 0} }

// Network options.
type ContainerInfo_DockerInfo_Network int32

const (
	ContainerInfo_DockerInfo_HOST   ContainerInfo_DockerInfo_Network = 1
	ContainerInfo_DockerInfo_BRIDGE ContainerInfo_DockerInfo_Network = 2
	ContainerInfo_DockerInfo_NONE   ContainerInfo_DockerInfo_Network = 3
	ContainerInfo_DockerInfo_USER   ContainerInfo_DockerInfo_Network = 4
)

var ContainerInfo_DockerInfo_Network_name = map[int32]string{
	1: "HOST",
	2: "BRIDGE",
	3: "NONE",
	4: "USER",
}
var ContainerInfo_DockerInfo_Network_value = map[string]int32{
	"HOST":   1,
	"BRIDGE": 2,
	"NONE":   3,
	"USER":   4,
}

func (x ContainerInfo_DockerInfo_Network) Enum() *ContainerInfo_DockerInfo_Network {
	p := new(ContainerInfo_DockerInfo_Network)
	*p = x
	return p
}
func (x ContainerInfo_DockerInfo_Network) String() string {
	return proto.EnumName(ContainerInfo_DockerInfo_Network_name, int32(x))
}
func (x *ContainerInfo_DockerInfo_Network) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContainerInfo_DockerInfo_Network_value, data, "ContainerInfo_DockerInfo_Network")
	if err != nil {
		return err
	}
	*x = ContainerInfo_DockerInfo_Network(value)
	return nil
}
func (ContainerInfo_DockerInfo_Network) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{69, 0, 0}
}

type CgroupInfo_Blkio_Operation int32

const (
	CgroupInfo_Blkio_UNKNOWN CgroupInfo_Blkio_Operation = 0
	CgroupInfo_Blkio_TOTAL   CgroupInfo_Blkio_Operation = 1
	CgroupInfo_Blkio_READ    CgroupInfo_Blkio_Operation = 2
	CgroupInfo_Blkio_WRITE   CgroupInfo_Blkio_Operation = 3
	CgroupInfo_Blkio_SYNC    CgroupInfo_Blkio_Operation = 4
	CgroupInfo_Blkio_ASYNC   CgroupInfo_Blkio_Operation = 5
)

var CgroupInfo_Blkio_Operation_name = map[int32]string{
	0: "UNKNOWN",
	1: "TOTAL",
	2: "READ",
	3: "WRITE",
	4: "SYNC",
	5: "ASYNC",
}
var CgroupInfo_Blkio_Operation_value = map[string]int32{
	"UNKNOWN": 0,
	"TOTAL":   1,
	"READ":    2,
	"WRITE":   3,
	"SYNC":    4,
	"ASYNC":   5,
}

func (x CgroupInfo_Blkio_Operation) Enum() *CgroupInfo_Blkio_Operation {
	p := new(CgroupInfo_Blkio_Operation)
	*p = x
	return p
}
func (x CgroupInfo_Blkio_Operation) String() string {
	return proto.EnumName(CgroupInfo_Blkio_Operation_name, int32(x))
}
func (x *CgroupInfo_Blkio_Operation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CgroupInfo_Blkio_Operation_value, data, "CgroupInfo_Blkio_Operation")
	if err != nil {
		return err
	}
	*x = CgroupInfo_Blkio_Operation(value)
	return nil
}
func (CgroupInfo_Blkio_Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{71, 0, 0}
}

type DiscoveryInfo_Visibility int32

const (
	DiscoveryInfo_FRAMEWORK DiscoveryInfo_Visibility = 0
	DiscoveryInfo_CLUSTER   DiscoveryInfo_Visibility = 1
	DiscoveryInfo_EXTERNAL  DiscoveryInfo_Visibility = 2
)

var DiscoveryInfo_Visibility_name = map[int32]string{
	0: "FRAMEWORK",
	1: "CLUSTER",
	2: "EXTERNAL",
}
var DiscoveryInfo_Visibility_value = map[string]int32{
	"FRAMEWORK": 0,
	"CLUSTER":   1,
	"EXTERNAL":  2,
}

func (x DiscoveryInfo_Visibility) Enum() *DiscoveryInfo_Visibility {
	p := new(DiscoveryInfo_Visibility)
	*p = x
	return p
}
func (x DiscoveryInfo_Visibility) String() string {
	return proto.EnumName(DiscoveryInfo_Visibility_name, int32(x))
}
func (x *DiscoveryInfo_Visibility) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DiscoveryInfo_Visibility_value, data, "DiscoveryInfo_Visibility")
	if err != nil {
		return err
	}
	*x = DiscoveryInfo_Visibility(value)
	return nil
}
func (DiscoveryInfo_Visibility) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{76, 0} }

// *
// A unique ID assigned to a framework. A framework can reuse this ID
// in order to do failover (see MesosSchedulerDriver).
type FrameworkID struct {
	Value            *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FrameworkID) Reset()                    { *m = FrameworkID{} }
func (m *FrameworkID) String() string            { return proto.CompactTextString(m) }
func (*FrameworkID) ProtoMessage()               {}
func (*FrameworkID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FrameworkID) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// *
// A unique ID assigned to an offer.
type OfferID struct {
	Value            *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OfferID) Reset()                    { *m = OfferID{} }
func (m *OfferID) String() string            { return proto.CompactTextString(m) }
func (*OfferID) ProtoMessage()               {}
func (*OfferID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OfferID) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// *
// A unique ID assigned to an agent. Currently, an agent gets a new ID
// whenever it (re)registers with Mesos. Framework writers shouldn't
// assume any binding between an agent ID and and a hostname.
type AgentID struct {
	Value            *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AgentID) Reset()                    { *m = AgentID{} }
func (m *AgentID) String() string            { return proto.CompactTextString(m) }
func (*AgentID) ProtoMessage()               {}
func (*AgentID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AgentID) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// *
// A framework-generated ID to distinguish a task. The ID must remain
// unique while the task is active. A framework can reuse an ID _only_
// if the previous task with the same ID has reached a terminal state
// (e.g., TASK_FINISHED, TASK_KILLED, etc.). However, reusing task IDs
// is strongly discouraged (MESOS-2198).
type TaskID struct {
	Value            *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TaskID) Reset()                    { *m = TaskID{} }
func (m *TaskID) String() string            { return proto.CompactTextString(m) }
func (*TaskID) ProtoMessage()               {}
func (*TaskID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TaskID) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// *
// A framework-generated ID to distinguish an executor. Only one
// executor with the same ID can be active on the same agent at a
// time. However, reusing executor IDs is discouraged.
type ExecutorID struct {
	Value            *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExecutorID) Reset()                    { *m = ExecutorID{} }
func (m *ExecutorID) String() string            { return proto.CompactTextString(m) }
func (*ExecutorID) ProtoMessage()               {}
func (*ExecutorID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ExecutorID) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// *
// ID used to uniquely identify a container. If the `parent` is not
// specified, the ID is a UUID generated by the agent to uniquely
// identify the container of an executor run. If the `parent` field is
// specified, it represents a nested container.
type ContainerID struct {
	Value            *string      `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	Parent           *ContainerID `protobuf:"bytes,2,opt,name=parent" json:"parent,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ContainerID) Reset()                    { *m = ContainerID{} }
func (m *ContainerID) String() string            { return proto.CompactTextString(m) }
func (*ContainerID) ProtoMessage()               {}
func (*ContainerID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ContainerID) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *ContainerID) GetParent() *ContainerID {
	if m != nil {
		return m.Parent
	}
	return nil
}

// *
// A unique ID assigned to a resource provider. Currently, a resource
// provider gets a new ID whenever it (re)registers with Mesos.
type ResourceProviderID struct {
	Value            *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ResourceProviderID) Reset()                    { *m = ResourceProviderID{} }
func (m *ResourceProviderID) String() string            { return proto.CompactTextString(m) }
func (*ResourceProviderID) ProtoMessage()               {}
func (*ResourceProviderID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ResourceProviderID) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// *
// A framework-generated ID to distinguish an operation. The ID
// must be unique within the framework.
type OperationID struct {
	Value            *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OperationID) Reset()                    { *m = OperationID{} }
func (m *OperationID) String() string            { return proto.CompactTextString(m) }
func (*OperationID) ProtoMessage()               {}
func (*OperationID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *OperationID) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// *
// Represents time since the epoch, in nanoseconds.
type TimeInfo struct {
	Nanoseconds      *int64 `protobuf:"varint,1,req,name=nanoseconds" json:"nanoseconds,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TimeInfo) Reset()                    { *m = TimeInfo{} }
func (m *TimeInfo) String() string            { return proto.CompactTextString(m) }
func (*TimeInfo) ProtoMessage()               {}
func (*TimeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TimeInfo) GetNanoseconds() int64 {
	if m != nil && m.Nanoseconds != nil {
		return *m.Nanoseconds
	}
	return 0
}

// *
// Represents duration in nanoseconds.
type DurationInfo struct {
	Nanoseconds      *int64 `protobuf:"varint,1,req,name=nanoseconds" json:"nanoseconds,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DurationInfo) Reset()                    { *m = DurationInfo{} }
func (m *DurationInfo) String() string            { return proto.CompactTextString(m) }
func (*DurationInfo) ProtoMessage()               {}
func (*DurationInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DurationInfo) GetNanoseconds() int64 {
	if m != nil && m.Nanoseconds != nil {
		return *m.Nanoseconds
	}
	return 0
}

// *
// A network address.
//
// TODO(bmahler): Use this more widely.
type Address struct {
	// May contain a hostname, IP address, or both.
	Hostname         *string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Ip               *string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Port             *int32  `protobuf:"varint,3,req,name=port" json:"port,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Address) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *Address) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *Address) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

// *
// Represents a URL.
type URL struct {
	Scheme           *string      `protobuf:"bytes,1,req,name=scheme" json:"scheme,omitempty"`
	Address          *Address     `protobuf:"bytes,2,req,name=address" json:"address,omitempty"`
	Path             *string      `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	Query            []*Parameter `protobuf:"bytes,4,rep,name=query" json:"query,omitempty"`
	Fragment         *string      `protobuf:"bytes,5,opt,name=fragment" json:"fragment,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *URL) Reset()                    { *m = URL{} }
func (m *URL) String() string            { return proto.CompactTextString(m) }
func (*URL) ProtoMessage()               {}
func (*URL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *URL) GetScheme() string {
	if m != nil && m.Scheme != nil {
		return *m.Scheme
	}
	return ""
}

func (m *URL) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *URL) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *URL) GetQuery() []*Parameter {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *URL) GetFragment() string {
	if m != nil && m.Fragment != nil {
		return *m.Fragment
	}
	return ""
}

// *
// Represents an interval, from a given start time over a given duration.
// This interval pertains to an unavailability event, such as maintenance,
// and is not a generic interval.
type Unavailability struct {
	Start *TimeInfo `protobuf:"bytes,1,req,name=start" json:"start,omitempty"`
	// When added to `start`, this represents the end of the interval.
	// If unspecified, the duration is assumed to be infinite.
	Duration         *DurationInfo `protobuf:"bytes,2,opt,name=duration" json:"duration,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Unavailability) Reset()                    { *m = Unavailability{} }
func (m *Unavailability) String() string            { return proto.CompactTextString(m) }
func (*Unavailability) ProtoMessage()               {}
func (*Unavailability) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Unavailability) GetStart() *TimeInfo {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Unavailability) GetDuration() *DurationInfo {
	if m != nil {
		return m.Duration
	}
	return nil
}

// *
// Represents a single machine, which may hold one or more agents.
//
// NOTE: In order to match an agent to a machine, both the `hostname` and
// `ip` must match the values advertised by the agent to the master.
// Hostname is not case-sensitive.
type MachineID struct {
	Hostname         *string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Ip               *string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MachineID) Reset()                    { *m = MachineID{} }
func (m *MachineID) String() string            { return proto.CompactTextString(m) }
func (*MachineID) ProtoMessage()               {}
func (*MachineID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MachineID) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *MachineID) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

// *
// Holds information about a single machine, its `mode`, and any other
// relevant information which may affect the behavior of the machine.
type MachineInfo struct {
	Id   *MachineID        `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Mode *MachineInfo_Mode `protobuf:"varint,2,opt,name=mode,enum=mesos.v1.MachineInfo_Mode" json:"mode,omitempty"`
	// Signifies that the machine may be unavailable during the given interval.
	// See comments in `Unavailability` and for the `unavailability` fields
	// in `Offer` and `InverseOffer` for more information.
	Unavailability   *Unavailability `protobuf:"bytes,3,opt,name=unavailability" json:"unavailability,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *MachineInfo) Reset()                    { *m = MachineInfo{} }
func (m *MachineInfo) String() string            { return proto.CompactTextString(m) }
func (*MachineInfo) ProtoMessage()               {}
func (*MachineInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *MachineInfo) GetId() *MachineID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MachineInfo) GetMode() MachineInfo_Mode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return MachineInfo_UP
}

func (m *MachineInfo) GetUnavailability() *Unavailability {
	if m != nil {
		return m.Unavailability
	}
	return nil
}

// *
// Describes a framework.
type FrameworkInfo struct {
	// Used to determine the Unix user that an executor or task should be
	// launched as.
	//
	// When using the MesosSchedulerDriver, if the field is set to an
	// empty string, it will automagically set it to the current user.
	//
	// When using the HTTP Scheduler API, the user has to be set
	// explicitly.
	User *string `protobuf:"bytes,1,req,name=user" json:"user,omitempty"`
	// Name of the framework that shows up in the Mesos Web UI.
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// Note that 'id' is only available after a framework has
	// registered, however, it is included here in order to facilitate
	// scheduler failover (i.e., if it is set then the
	// MesosSchedulerDriver expects the scheduler is performing
	// failover).
	Id *FrameworkID `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	// The amount of time (in seconds) that the master will wait for the
	// scheduler to failover before it tears down the framework by
	// killing all its tasks/executors. This should be non-zero if a
	// framework expects to reconnect after a failure and not lose its
	// tasks/executors.
	//
	// NOTE: To avoid accidental destruction of tasks, production
	// frameworks typically set this to a large value (e.g., 1 week).
	FailoverTimeout *float64 `protobuf:"fixed64,4,opt,name=failover_timeout,json=failover_timeout,def=0" json:"failover_timeout,omitempty"`
	// If set, agents running tasks started by this framework will write
	// the framework pid, executor pids and status updates to disk. If
	// the agent exits (e.g., due to a crash or as part of upgrading
	// Mesos), this checkpointed data allows the restarted agent to
	// reconnect to executors that were started by the old instance of
	// the agent. Enabling checkpointing improves fault tolerance, at
	// the cost of a (usually small) increase in disk I/O.
	Checkpoint *bool `protobuf:"varint,5,opt,name=checkpoint,def=0" json:"checkpoint,omitempty"`
	// Roles are the entities to which allocations are made.
	// The framework must have at least one role in order to
	// be offered resources. Note that `role` is deprecated
	// in favor of `roles` and only one of these fields must
	// be used. Since we cannot distinguish between empty
	// `roles` and the default unset `role`, we require that
	// frameworks set the `MULTI_ROLE` capability if
	// setting the `roles` field.
	Role  *string  `protobuf:"bytes,6,opt,name=role,def=*" json:"role,omitempty"`
	Roles []string `protobuf:"bytes,12,rep,name=roles" json:"roles,omitempty"`
	// Used to indicate the current host from which the scheduler is
	// registered in the Mesos Web UI. If set to an empty string Mesos
	// will automagically set it to the current hostname if one is
	// available.
	Hostname *string `protobuf:"bytes,7,opt,name=hostname" json:"hostname,omitempty"`
	// This field should match the credential's principal the framework
	// uses for authentication. This field is used for framework API
	// rate limiting and dynamic reservations. It should be set even
	// if authentication is not enabled if these features are desired.
	Principal *string `protobuf:"bytes,8,opt,name=principal" json:"principal,omitempty"`
	// This field allows a framework to advertise its web UI, so that
	// the Mesos web UI can link to it. It is expected to be a full URL,
	// for example http://my-scheduler.example.com:8080/.
	WebuiUrl *string `protobuf:"bytes,9,opt,name=webui_url,json=webui_url" json:"webui_url,omitempty"`
	// This field allows a framework to advertise its set of
	// capabilities (e.g., ability to receive offers for revocable
	// resources).
	Capabilities []*FrameworkInfo_Capability `protobuf:"bytes,10,rep,name=capabilities" json:"capabilities,omitempty"`
	// Labels are free-form key value pairs supplied by the framework
	// scheduler (e.g., to describe additional functionality offered by
	// the framework). These labels are not interpreted by Mesos itself.
	// Labels should not contain duplicate key-value pairs.
	Labels           *Labels `protobuf:"bytes,11,opt,name=labels" json:"labels,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FrameworkInfo) Reset()                    { *m = FrameworkInfo{} }
func (m *FrameworkInfo) String() string            { return proto.CompactTextString(m) }
func (*FrameworkInfo) ProtoMessage()               {}
func (*FrameworkInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

const Default_FrameworkInfo_FailoverTimeout float64 = 0
const Default_FrameworkInfo_Checkpoint bool = false
const Default_FrameworkInfo_Role string = "*"

func (m *FrameworkInfo) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

func (m *FrameworkInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *FrameworkInfo) GetId() *FrameworkID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *FrameworkInfo) GetFailoverTimeout() float64 {
	if m != nil && m.FailoverTimeout != nil {
		return *m.FailoverTimeout
	}
	return Default_FrameworkInfo_FailoverTimeout
}

func (m *FrameworkInfo) GetCheckpoint() bool {
	if m != nil && m.Checkpoint != nil {
		return *m.Checkpoint
	}
	return Default_FrameworkInfo_Checkpoint
}

func (m *FrameworkInfo) GetRole() string {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return Default_FrameworkInfo_Role
}

func (m *FrameworkInfo) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *FrameworkInfo) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *FrameworkInfo) GetPrincipal() string {
	if m != nil && m.Principal != nil {
		return *m.Principal
	}
	return ""
}

func (m *FrameworkInfo) GetWebuiUrl() string {
	if m != nil && m.WebuiUrl != nil {
		return *m.WebuiUrl
	}
	return ""
}

func (m *FrameworkInfo) GetCapabilities() []*FrameworkInfo_Capability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *FrameworkInfo) GetLabels() *Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

type FrameworkInfo_Capability struct {
	// Enum fields should be optional, see: MESOS-4997.
	Type             *FrameworkInfo_Capability_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.FrameworkInfo_Capability_Type" json:"type,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *FrameworkInfo_Capability) Reset()                    { *m = FrameworkInfo_Capability{} }
func (m *FrameworkInfo_Capability) String() string            { return proto.CompactTextString(m) }
func (*FrameworkInfo_Capability) ProtoMessage()               {}
func (*FrameworkInfo_Capability) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15, 0} }

func (m *FrameworkInfo_Capability) GetType() FrameworkInfo_Capability_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return FrameworkInfo_Capability_UNKNOWN
}

// *
// Describes a general non-interpreting non-killing check for a task or
// executor (or any arbitrary process/command). A type is picked by
// specifying one of the optional fields. Specifying more than one type
// is an error.
//
// NOTE: This API is subject to change and the related feature is experimental.
type CheckInfo struct {
	// The type of the check.
	Type *CheckInfo_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.CheckInfo_Type" json:"type,omitempty"`
	// Command check.
	Command *CheckInfo_Command `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	// HTTP check.
	Http *CheckInfo_Http `protobuf:"bytes,3,opt,name=http" json:"http,omitempty"`
	// TCP check.
	Tcp *CheckInfo_Tcp `protobuf:"bytes,7,opt,name=tcp" json:"tcp,omitempty"`
	// Amount of time to wait to start checking the task after it
	// transitions to `TASK_RUNNING` or `TASK_STARTING` if the latter
	// is used by the executor.
	DelaySeconds *float64 `protobuf:"fixed64,4,opt,name=delay_seconds,json=delay_seconds,def=15" json:"delay_seconds,omitempty"`
	// Interval between check attempts, i.e., amount of time to wait after
	// the previous check finished or timed out to start the next check.
	IntervalSeconds *float64 `protobuf:"fixed64,5,opt,name=interval_seconds,json=interval_seconds,def=10" json:"interval_seconds,omitempty"`
	// Amount of time to wait for the check to complete. Zero means infinite
	// timeout.
	//
	// After this timeout, the check attempt is aborted and no result is
	// reported. Note that this may be considered a state change and hence
	// may trigger a check status change delivery to the corresponding
	// scheduler. See `CheckStatusInfo` for more details.
	TimeoutSeconds   *float64 `protobuf:"fixed64,6,opt,name=timeout_seconds,json=timeout_seconds,def=20" json:"timeout_seconds,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CheckInfo) Reset()                    { *m = CheckInfo{} }
func (m *CheckInfo) String() string            { return proto.CompactTextString(m) }
func (*CheckInfo) ProtoMessage()               {}
func (*CheckInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

const Default_CheckInfo_DelaySeconds float64 = 15
const Default_CheckInfo_IntervalSeconds float64 = 10
const Default_CheckInfo_TimeoutSeconds float64 = 20

func (m *CheckInfo) GetType() CheckInfo_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CheckInfo_UNKNOWN
}

func (m *CheckInfo) GetCommand() *CheckInfo_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *CheckInfo) GetHttp() *CheckInfo_Http {
	if m != nil {
		return m.Http
	}
	return nil
}

func (m *CheckInfo) GetTcp() *CheckInfo_Tcp {
	if m != nil {
		return m.Tcp
	}
	return nil
}

func (m *CheckInfo) GetDelaySeconds() float64 {
	if m != nil && m.DelaySeconds != nil {
		return *m.DelaySeconds
	}
	return Default_CheckInfo_DelaySeconds
}

func (m *CheckInfo) GetIntervalSeconds() float64 {
	if m != nil && m.IntervalSeconds != nil {
		return *m.IntervalSeconds
	}
	return Default_CheckInfo_IntervalSeconds
}

func (m *CheckInfo) GetTimeoutSeconds() float64 {
	if m != nil && m.TimeoutSeconds != nil {
		return *m.TimeoutSeconds
	}
	return Default_CheckInfo_TimeoutSeconds
}

// Describes a command check. If applicable, enters mount and/or network
// namespaces of the task.
type CheckInfo_Command struct {
	Command          *CommandInfo `protobuf:"bytes,1,req,name=command" json:"command,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *CheckInfo_Command) Reset()                    { *m = CheckInfo_Command{} }
func (m *CheckInfo_Command) String() string            { return proto.CompactTextString(m) }
func (*CheckInfo_Command) ProtoMessage()               {}
func (*CheckInfo_Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 0} }

func (m *CheckInfo_Command) GetCommand() *CommandInfo {
	if m != nil {
		return m.Command
	}
	return nil
}

// Describes an HTTP check. Sends a GET request to
// http://<host>:port/path. Note that <host> is not configurable and is
// resolved automatically to 127.0.0.1.
type CheckInfo_Http struct {
	// Port to send the HTTP request.
	Port *uint32 `protobuf:"varint,1,req,name=port" json:"port,omitempty"`
	// HTTP request path.
	Path             *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CheckInfo_Http) Reset()                    { *m = CheckInfo_Http{} }
func (m *CheckInfo_Http) String() string            { return proto.CompactTextString(m) }
func (*CheckInfo_Http) ProtoMessage()               {}
func (*CheckInfo_Http) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 1} }

func (m *CheckInfo_Http) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *CheckInfo_Http) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

// Describes a TCP check, i.e. based on establishing a TCP connection to
// the specified port. Note that <host> is not configurable and is resolved
// automatically to 127.0.0.1.
type CheckInfo_Tcp struct {
	Port             *uint32 `protobuf:"varint,1,req,name=port" json:"port,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CheckInfo_Tcp) Reset()                    { *m = CheckInfo_Tcp{} }
func (m *CheckInfo_Tcp) String() string            { return proto.CompactTextString(m) }
func (*CheckInfo_Tcp) ProtoMessage()               {}
func (*CheckInfo_Tcp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 2} }

func (m *CheckInfo_Tcp) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

// *
// Describes a health check for a task or executor (or any arbitrary
// process/command). A type is picked by specifying one of the
// optional fields. Specifying more than one type is an error.
type HealthCheck struct {
	// Amount of time to wait to start health checking the task after it
	// transitions to `TASK_RUNNING` or `TASK_STATING` if the latter is
	// used by the executor.
	DelaySeconds *float64 `protobuf:"fixed64,2,opt,name=delay_seconds,json=delay_seconds,def=15" json:"delay_seconds,omitempty"`
	// Interval between health checks, i.e., amount of time to wait after
	// the previous health check finished or timed out to start the next
	// health check.
	IntervalSeconds *float64 `protobuf:"fixed64,3,opt,name=interval_seconds,json=interval_seconds,def=10" json:"interval_seconds,omitempty"`
	// Amount of time to wait for the health check to complete. After this
	// timeout, the health check is aborted and treated as a failure. Zero
	// means infinite timeout.
	TimeoutSeconds *float64 `protobuf:"fixed64,4,opt,name=timeout_seconds,json=timeout_seconds,def=20" json:"timeout_seconds,omitempty"`
	// Number of consecutive failures until the task is killed by the executor.
	ConsecutiveFailures *uint32 `protobuf:"varint,5,opt,name=consecutive_failures,json=consecutive_failures,def=3" json:"consecutive_failures,omitempty"`
	// Amount of time after the task is launched during which health check
	// failures are ignored. Once a check succeeds for the first time,
	// the grace period does not apply anymore. Note that it includes
	// `delay_seconds`, i.e., setting `grace_period_seconds` < `delay_seconds`
	// has no effect.
	GracePeriodSeconds *float64 `protobuf:"fixed64,6,opt,name=grace_period_seconds,json=grace_period_seconds,def=10" json:"grace_period_seconds,omitempty"`
	// The type of health check.
	Type *HealthCheck_Type `protobuf:"varint,8,opt,name=type,enum=mesos.v1.HealthCheck_Type" json:"type,omitempty"`
	// Command health check.
	Command *CommandInfo `protobuf:"bytes,7,opt,name=command" json:"command,omitempty"`
	// HTTP health check.
	Http *HealthCheck_HTTPCheckInfo `protobuf:"bytes,1,opt,name=http" json:"http,omitempty"`
	// TCP health check.
	Tcp              *HealthCheck_TCPCheckInfo `protobuf:"bytes,9,opt,name=tcp" json:"tcp,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *HealthCheck) Reset()                    { *m = HealthCheck{} }
func (m *HealthCheck) String() string            { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()               {}
func (*HealthCheck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

const Default_HealthCheck_DelaySeconds float64 = 15
const Default_HealthCheck_IntervalSeconds float64 = 10
const Default_HealthCheck_TimeoutSeconds float64 = 20
const Default_HealthCheck_ConsecutiveFailures uint32 = 3
const Default_HealthCheck_GracePeriodSeconds float64 = 10

func (m *HealthCheck) GetDelaySeconds() float64 {
	if m != nil && m.DelaySeconds != nil {
		return *m.DelaySeconds
	}
	return Default_HealthCheck_DelaySeconds
}

func (m *HealthCheck) GetIntervalSeconds() float64 {
	if m != nil && m.IntervalSeconds != nil {
		return *m.IntervalSeconds
	}
	return Default_HealthCheck_IntervalSeconds
}

func (m *HealthCheck) GetTimeoutSeconds() float64 {
	if m != nil && m.TimeoutSeconds != nil {
		return *m.TimeoutSeconds
	}
	return Default_HealthCheck_TimeoutSeconds
}

func (m *HealthCheck) GetConsecutiveFailures() uint32 {
	if m != nil && m.ConsecutiveFailures != nil {
		return *m.ConsecutiveFailures
	}
	return Default_HealthCheck_ConsecutiveFailures
}

func (m *HealthCheck) GetGracePeriodSeconds() float64 {
	if m != nil && m.GracePeriodSeconds != nil {
		return *m.GracePeriodSeconds
	}
	return Default_HealthCheck_GracePeriodSeconds
}

func (m *HealthCheck) GetType() HealthCheck_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return HealthCheck_UNKNOWN
}

func (m *HealthCheck) GetCommand() *CommandInfo {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *HealthCheck) GetHttp() *HealthCheck_HTTPCheckInfo {
	if m != nil {
		return m.Http
	}
	return nil
}

func (m *HealthCheck) GetTcp() *HealthCheck_TCPCheckInfo {
	if m != nil {
		return m.Tcp
	}
	return nil
}

// Describes an HTTP health check. Sends a GET request to
// scheme://<host>:port/path. Note that <host> is not configurable and is
// resolved automatically, in most cases to 127.0.0.1. Default executors
// treat return codes between 200 and 399 as success; custom executors
// may employ a different strategy, e.g. leveraging the `statuses` field.
type HealthCheck_HTTPCheckInfo struct {
	Protocol *NetworkInfo_Protocol `protobuf:"varint,5,opt,name=protocol,enum=mesos.v1.NetworkInfo_Protocol,def=1" json:"protocol,omitempty"`
	// Currently "http" and "https" are supported.
	Scheme *string `protobuf:"bytes,3,opt,name=scheme" json:"scheme,omitempty"`
	// Port to send the HTTP request.
	Port *uint32 `protobuf:"varint,1,req,name=port" json:"port,omitempty"`
	// HTTP request path.
	Path *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// NOTE: It is up to the custom executor to interpret and act on this
	// field. Setting this field has no effect on the default executors.
	//
	// TODO(haosdent): Deprecate this field when we add better support for
	// success and possibly failure statuses, e.g. ranges of success and
	// failure statuses.
	Statuses         []uint32 `protobuf:"varint,4,rep,name=statuses" json:"statuses,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *HealthCheck_HTTPCheckInfo) Reset()                    { *m = HealthCheck_HTTPCheckInfo{} }
func (m *HealthCheck_HTTPCheckInfo) String() string            { return proto.CompactTextString(m) }
func (*HealthCheck_HTTPCheckInfo) ProtoMessage()               {}
func (*HealthCheck_HTTPCheckInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17, 0} }

const Default_HealthCheck_HTTPCheckInfo_Protocol NetworkInfo_Protocol = NetworkInfo_IPv4

func (m *HealthCheck_HTTPCheckInfo) GetProtocol() NetworkInfo_Protocol {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return Default_HealthCheck_HTTPCheckInfo_Protocol
}

func (m *HealthCheck_HTTPCheckInfo) GetScheme() string {
	if m != nil && m.Scheme != nil {
		return *m.Scheme
	}
	return ""
}

func (m *HealthCheck_HTTPCheckInfo) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *HealthCheck_HTTPCheckInfo) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *HealthCheck_HTTPCheckInfo) GetStatuses() []uint32 {
	if m != nil {
		return m.Statuses
	}
	return nil
}

// Describes a TCP health check, i.e. based on establishing
// a TCP connection to the specified port.
type HealthCheck_TCPCheckInfo struct {
	Protocol *NetworkInfo_Protocol `protobuf:"varint,2,opt,name=protocol,enum=mesos.v1.NetworkInfo_Protocol,def=1" json:"protocol,omitempty"`
	// Port expected to be open.
	Port             *uint32 `protobuf:"varint,1,req,name=port" json:"port,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HealthCheck_TCPCheckInfo) Reset()                    { *m = HealthCheck_TCPCheckInfo{} }
func (m *HealthCheck_TCPCheckInfo) String() string            { return proto.CompactTextString(m) }
func (*HealthCheck_TCPCheckInfo) ProtoMessage()               {}
func (*HealthCheck_TCPCheckInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17, 1} }

const Default_HealthCheck_TCPCheckInfo_Protocol NetworkInfo_Protocol = NetworkInfo_IPv4

func (m *HealthCheck_TCPCheckInfo) GetProtocol() NetworkInfo_Protocol {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return Default_HealthCheck_TCPCheckInfo_Protocol
}

func (m *HealthCheck_TCPCheckInfo) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

// *
// Describes a kill policy for a task. Currently does not express
// different policies (e.g. hitting HTTP endpoints), only controls
// how long to wait between graceful and forcible task kill:
//
//     graceful kill --------------> forcible kill
//                    grace_period
//
// Kill policies are best-effort, because machine failures / forcible
// terminations may occur.
//
// NOTE: For executor-less command-based tasks, the kill is performed
// via sending a signal to the task process: SIGTERM for the graceful
// kill and SIGKILL for the forcible kill. For the docker executor-less
// tasks the grace period is passed to 'docker stop --time'.
type KillPolicy struct {
	// The grace period specifies how long to wait before forcibly
	// killing the task. It is recommended to attempt to gracefully
	// kill the task (and send TASK_KILLING) to indicate that the
	// graceful kill is in progress. Once the grace period elapses,
	// if the task has not terminated, a forcible kill should occur.
	// The task should not assume that it will always be allotted
	// the full grace period. For example, the executor may be
	// shutdown more quickly by the agent, or failures / forcible
	// terminations may occur.
	GracePeriod      *DurationInfo `protobuf:"bytes,1,opt,name=grace_period,json=grace_period" json:"grace_period,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *KillPolicy) Reset()                    { *m = KillPolicy{} }
func (m *KillPolicy) String() string            { return proto.CompactTextString(m) }
func (*KillPolicy) ProtoMessage()               {}
func (*KillPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *KillPolicy) GetGracePeriod() *DurationInfo {
	if m != nil {
		return m.GracePeriod
	}
	return nil
}

// *
// Describes a command, executed via: '/bin/sh -c value'. Any URIs specified
// are fetched before executing the command.  If the executable field for an
// uri is set, executable file permission is set on the downloaded file.
// Otherwise, if the downloaded file has a recognized archive extension
// (currently [compressed] tar and zip) it is extracted into the executor's
// working directory. This extraction can be disabled by setting `extract` to
// false. In addition, any environment variables are set before executing
// the command (so they can be used to "parameterize" your command).
type CommandInfo struct {
	Uris        []*CommandInfo_URI `protobuf:"bytes,1,rep,name=uris" json:"uris,omitempty"`
	Environment *Environment       `protobuf:"bytes,2,opt,name=environment" json:"environment,omitempty"`
	// There are two ways to specify the command:
	// 1) If 'shell == true', the command will be launched via shell
	// 		(i.e., /bin/sh -c 'value'). The 'value' specified will be
	// 		treated as the shell command. The 'arguments' will be ignored.
	// 2) If 'shell == false', the command will be launched by passing
	// 		arguments to an executable. The 'value' specified will be
	// 		treated as the filename of the executable. The 'arguments'
	// 		will be treated as the arguments to the executable. This is
	// 		similar to how POSIX exec families launch processes (i.e.,
	// 		execlp(value, arguments(0), arguments(1), ...)).
	// NOTE: The field 'value' is changed from 'required' to 'optional'
	// in 0.20.0. It will only cause issues if a new framework is
	// connecting to an old master.
	Shell     *bool    `protobuf:"varint,6,opt,name=shell,def=1" json:"shell,omitempty"`
	Value     *string  `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Arguments []string `protobuf:"bytes,7,rep,name=arguments" json:"arguments,omitempty"`
	// Enables executor and tasks to run as a specific user. If the user
	// field is present both in FrameworkInfo and here, the CommandInfo
	// user value takes precedence.
	User             *string `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandInfo) Reset()                    { *m = CommandInfo{} }
func (m *CommandInfo) String() string            { return proto.CompactTextString(m) }
func (*CommandInfo) ProtoMessage()               {}
func (*CommandInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

const Default_CommandInfo_Shell bool = true

func (m *CommandInfo) GetUris() []*CommandInfo_URI {
	if m != nil {
		return m.Uris
	}
	return nil
}

func (m *CommandInfo) GetEnvironment() *Environment {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *CommandInfo) GetShell() bool {
	if m != nil && m.Shell != nil {
		return *m.Shell
	}
	return Default_CommandInfo_Shell
}

func (m *CommandInfo) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *CommandInfo) GetArguments() []string {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *CommandInfo) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

type CommandInfo_URI struct {
	Value      *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	Executable *bool   `protobuf:"varint,2,opt,name=executable" json:"executable,omitempty"`
	// In case the fetched file is recognized as an archive, extract
	// its contents into the sandbox. Note that a cached archive is
	// not copied from the cache to the sandbox in case extraction
	// originates from an archive in the cache.
	Extract *bool `protobuf:"varint,3,opt,name=extract,def=1" json:"extract,omitempty"`
	// If this field is "true", the fetcher cache will be used. If not,
	// fetching bypasses the cache and downloads directly into the
	// sandbox directory, no matter whether a suitable cache file is
	// available or not. The former directs the fetcher to download to
	// the file cache, then copy from there to the sandbox. Subsequent
	// fetch attempts with the same URI will omit downloading and copy
	// from the cache as long as the file is resident there. Cache files
	// may get evicted at any time, which then leads to renewed
	// downloading. See also "docs/fetcher.md" and
	// "docs/fetcher-cache-internals.md".
	Cache *bool `protobuf:"varint,4,opt,name=cache" json:"cache,omitempty"`
	// The fetcher's default behavior is to use the URI string's basename to
	// name the local copy. If this field is provided, the local copy will be
	// named with its value instead. If there is a directory component (which
	// must be a relative path), the local copy will be stored in that
	// subdirectory inside the sandbox.
	OutputFile       *string `protobuf:"bytes,5,opt,name=output_file,json=output_file" json:"output_file,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandInfo_URI) Reset()                    { *m = CommandInfo_URI{} }
func (m *CommandInfo_URI) String() string            { return proto.CompactTextString(m) }
func (*CommandInfo_URI) ProtoMessage()               {}
func (*CommandInfo_URI) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 0} }

const Default_CommandInfo_URI_Extract bool = true

func (m *CommandInfo_URI) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *CommandInfo_URI) GetExecutable() bool {
	if m != nil && m.Executable != nil {
		return *m.Executable
	}
	return false
}

func (m *CommandInfo_URI) GetExtract() bool {
	if m != nil && m.Extract != nil {
		return *m.Extract
	}
	return Default_CommandInfo_URI_Extract
}

func (m *CommandInfo_URI) GetCache() bool {
	if m != nil && m.Cache != nil {
		return *m.Cache
	}
	return false
}

func (m *CommandInfo_URI) GetOutputFile() string {
	if m != nil && m.OutputFile != nil {
		return *m.OutputFile
	}
	return ""
}

// *
// Describes information about an executor.
type ExecutorInfo struct {
	// For backwards compatibility, if this field is not set when using `LAUNCH`
	// operation, Mesos will infer the type by checking if `command` is set
	// (`CUSTOM`) or unset (`DEFAULT`). `type` must be set when using
	// `LAUNCH_GROUP` operation.
	//
	// TODO(vinod): Add support for explicitly setting `type` to `DEFAULT` in
	// `LAUNCH` operation.
	Type        *ExecutorInfo_Type `protobuf:"varint,15,opt,name=type,enum=mesos.v1.ExecutorInfo_Type" json:"type,omitempty"`
	ExecutorId  *ExecutorID        `protobuf:"bytes,1,req,name=executor_id,json=executor_id" json:"executor_id,omitempty"`
	FrameworkId *FrameworkID       `protobuf:"bytes,8,opt,name=framework_id,json=framework_id" json:"framework_id,omitempty"`
	Command     *CommandInfo       `protobuf:"bytes,7,opt,name=command" json:"command,omitempty"`
	// Executor provided with a container will launch the container
	// with the executor's CommandInfo and we expect the container to
	// act as a Mesos executor.
	Container *ContainerInfo `protobuf:"bytes,11,opt,name=container" json:"container,omitempty"`
	Resources []*Resource    `protobuf:"bytes,5,rep,name=resources" json:"resources,omitempty"`
	Name      *string        `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	// 'source' is an identifier style string used by frameworks to
	// track the source of an executor. This is useful when it's
	// possible for different executor ids to be related semantically.
	//
	// NOTE: 'source' is exposed alongside the resource usage of the
	// executor via JSON on the agent. This allows users to import usage
	// information into a time series database for monitoring.
	//
	// This field is deprecated since 1.0. Please use labels for
	// free-form metadata instead.
	Source *string `protobuf:"bytes,10,opt,name=source" json:"source,omitempty"`
	// This field can be used to pass arbitrary bytes to an executor.
	Data []byte `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	// Service discovery information for the executor. It is not
	// interpreted or acted upon by Mesos. It is up to a service
	// discovery system to use this information as needed and to handle
	// executors without service discovery information.
	Discovery *DiscoveryInfo `protobuf:"bytes,12,opt,name=discovery" json:"discovery,omitempty"`
	// When shutting down an executor the agent will wait in a
	// best-effort manner for the grace period specified here
	// before forcibly destroying the container. The executor
	// must not assume that it will always be allotted the full
	// grace period, as the agent may decide to allot a shorter
	// period and failures / forcible terminations may occur.
	ShutdownGracePeriod *DurationInfo `protobuf:"bytes,13,opt,name=shutdown_grace_period,json=shutdown_grace_period" json:"shutdown_grace_period,omitempty"`
	// Labels are free-form key value pairs which are exposed through
	// master and agent endpoints. Labels will not be interpreted or
	// acted upon by Mesos itself. As opposed to the data field, labels
	// will be kept in memory on master and agent processes. Therefore,
	// labels should be used to tag executors with lightweight metadata.
	// Labels should not contain duplicate key-value pairs.
	Labels           *Labels `protobuf:"bytes,14,opt,name=labels" json:"labels,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExecutorInfo) Reset()                    { *m = ExecutorInfo{} }
func (m *ExecutorInfo) String() string            { return proto.CompactTextString(m) }
func (*ExecutorInfo) ProtoMessage()               {}
func (*ExecutorInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ExecutorInfo) GetType() ExecutorInfo_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ExecutorInfo_UNKNOWN
}

func (m *ExecutorInfo) GetExecutorId() *ExecutorID {
	if m != nil {
		return m.ExecutorId
	}
	return nil
}

func (m *ExecutorInfo) GetFrameworkId() *FrameworkID {
	if m != nil {
		return m.FrameworkId
	}
	return nil
}

func (m *ExecutorInfo) GetCommand() *CommandInfo {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *ExecutorInfo) GetContainer() *ContainerInfo {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *ExecutorInfo) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *ExecutorInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ExecutorInfo) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *ExecutorInfo) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ExecutorInfo) GetDiscovery() *DiscoveryInfo {
	if m != nil {
		return m.Discovery
	}
	return nil
}

func (m *ExecutorInfo) GetShutdownGracePeriod() *DurationInfo {
	if m != nil {
		return m.ShutdownGracePeriod
	}
	return nil
}

func (m *ExecutorInfo) GetLabels() *Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

// *
// Describes a domain. A domain is a collection of hosts that have
// similar characteristics. Mesos currently only supports "fault
// domains", which identify groups of hosts with similar failure
// characteristics.
//
// Frameworks can generally assume that network links between hosts in
// the same fault domain have lower latency, higher bandwidth, and better
// availability than network links between hosts in different domains.
// Schedulers may prefer to place network-intensive workloads in the
// same domain, as this may improve performance. Conversely, a single
// failure that affects a host in a domain may be more likely to
// affect other hosts in the same domain; hence, schedulers may prefer
// to place workloads that require high availability in multiple
// domains. (For example, all the hosts in a single rack might lose
// power or network connectivity simultaneously.)
//
// There are two kinds of fault domains: regions and zones. Regions
// offer the highest degree of fault isolation, but network latency
// between regions is typically high (typically >50 ms). Zones offer a
// modest degree of fault isolation along with reasonably low network
// latency (typically <10 ms).
//
// The mapping from fault domains to physical infrastructure is up to
// the operator to configure. In cloud environments, regions and zones
// can be mapped to the "region" and "availability zone" concepts
// exposed by most cloud providers, respectively. In on-premise
// deployments, regions and zones can be mapped to data centers and
// racks, respectively.
//
// Both masters and agents can be configured with domains. Frameworks
// can compare the domains of two hosts to determine if the hosts are
// in the same zone, in different zones in the same region, or in
// different regions. Note that all masters in a given Mesos cluster
// must be in the same region.
type DomainInfo struct {
	FaultDomain      *DomainInfo_FaultDomain `protobuf:"bytes,1,opt,name=fault_domain,json=fault_domain" json:"fault_domain,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *DomainInfo) Reset()                    { *m = DomainInfo{} }
func (m *DomainInfo) String() string            { return proto.CompactTextString(m) }
func (*DomainInfo) ProtoMessage()               {}
func (*DomainInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *DomainInfo) GetFaultDomain() *DomainInfo_FaultDomain {
	if m != nil {
		return m.FaultDomain
	}
	return nil
}

type DomainInfo_FaultDomain struct {
	Region           *DomainInfo_FaultDomain_RegionInfo `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	Zone             *DomainInfo_FaultDomain_ZoneInfo   `protobuf:"bytes,2,req,name=zone" json:"zone,omitempty"`
	XXX_unrecognized []byte                             `json:"-"`
}

func (m *DomainInfo_FaultDomain) Reset()                    { *m = DomainInfo_FaultDomain{} }
func (m *DomainInfo_FaultDomain) String() string            { return proto.CompactTextString(m) }
func (*DomainInfo_FaultDomain) ProtoMessage()               {}
func (*DomainInfo_FaultDomain) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21, 0} }

func (m *DomainInfo_FaultDomain) GetRegion() *DomainInfo_FaultDomain_RegionInfo {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *DomainInfo_FaultDomain) GetZone() *DomainInfo_FaultDomain_ZoneInfo {
	if m != nil {
		return m.Zone
	}
	return nil
}

type DomainInfo_FaultDomain_RegionInfo struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DomainInfo_FaultDomain_RegionInfo) Reset()         { *m = DomainInfo_FaultDomain_RegionInfo{} }
func (m *DomainInfo_FaultDomain_RegionInfo) String() string { return proto.CompactTextString(m) }
func (*DomainInfo_FaultDomain_RegionInfo) ProtoMessage()    {}
func (*DomainInfo_FaultDomain_RegionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21, 0, 0}
}

func (m *DomainInfo_FaultDomain_RegionInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type DomainInfo_FaultDomain_ZoneInfo struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DomainInfo_FaultDomain_ZoneInfo) Reset()         { *m = DomainInfo_FaultDomain_ZoneInfo{} }
func (m *DomainInfo_FaultDomain_ZoneInfo) String() string { return proto.CompactTextString(m) }
func (*DomainInfo_FaultDomain_ZoneInfo) ProtoMessage()    {}
func (*DomainInfo_FaultDomain_ZoneInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21, 0, 1}
}

func (m *DomainInfo_FaultDomain_ZoneInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

// *
// Describes a master. This will probably have more fields in the
// future which might be used, for example, to link a framework webui
// to a master webui.
type MasterInfo struct {
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// The IP address (only IPv4) as a packed 4-bytes integer,
	// stored in network order.  Deprecated, use `address.ip` instead.
	Ip *uint32 `protobuf:"varint,2,req,name=ip" json:"ip,omitempty"`
	// The TCP port the Master is listening on for incoming
	// HTTP requests; deprecated, use `address.port` instead.
	Port *uint32 `protobuf:"varint,3,req,name=port,def=5050" json:"port,omitempty"`
	// In the default implementation, this will contain information
	// about both the IP address, port and Master name; it should really
	// not be relied upon by external tooling/frameworks and be
	// considered an "internal" implementation field.
	Pid *string `protobuf:"bytes,4,opt,name=pid" json:"pid,omitempty"`
	// The server's hostname, if available; it may be unreliable
	// in environments where the DNS configuration does not resolve
	// internal hostnames (eg, some public cloud providers).
	// Deprecated, use `address.hostname` instead.
	Hostname *string `protobuf:"bytes,5,opt,name=hostname" json:"hostname,omitempty"`
	// The running Master version, as a string; taken from the
	// generated "master/version.hpp".
	Version *string `protobuf:"bytes,6,opt,name=version" json:"version,omitempty"`
	// The full IP address (supports both IPv4 and IPv6 formats)
	// and supersedes the use of `ip`, `port` and `hostname`.
	// Since Mesos 0.24.
	Address *Address `protobuf:"bytes,7,opt,name=address" json:"address,omitempty"`
	// The domain that this master belongs to. All masters in a Mesos
	// cluster should belong to the same region.
	Domain           *DomainInfo              `protobuf:"bytes,8,opt,name=domain" json:"domain,omitempty"`
	Capabilities     []*MasterInfo_Capability `protobuf:"bytes,9,rep,name=capabilities" json:"capabilities,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *MasterInfo) Reset()                    { *m = MasterInfo{} }
func (m *MasterInfo) String() string            { return proto.CompactTextString(m) }
func (*MasterInfo) ProtoMessage()               {}
func (*MasterInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

const Default_MasterInfo_Port uint32 = 5050

func (m *MasterInfo) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *MasterInfo) GetIp() uint32 {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return 0
}

func (m *MasterInfo) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return Default_MasterInfo_Port
}

func (m *MasterInfo) GetPid() string {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return ""
}

func (m *MasterInfo) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *MasterInfo) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *MasterInfo) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *MasterInfo) GetDomain() *DomainInfo {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *MasterInfo) GetCapabilities() []*MasterInfo_Capability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

type MasterInfo_Capability struct {
	Type             *MasterInfo_Capability_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.MasterInfo_Capability_Type" json:"type,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *MasterInfo_Capability) Reset()                    { *m = MasterInfo_Capability{} }
func (m *MasterInfo_Capability) String() string            { return proto.CompactTextString(m) }
func (*MasterInfo_Capability) ProtoMessage()               {}
func (*MasterInfo_Capability) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 0} }

func (m *MasterInfo_Capability) GetType() MasterInfo_Capability_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return MasterInfo_Capability_UNKNOWN
}

// *
// Describes an agent. Note that the 'id' field is only available
// after an agent is registered with the master, and is made available
// here to facilitate re-registration.
type AgentInfo struct {
	Hostname *string `protobuf:"bytes,1,req,name=hostname" json:"hostname,omitempty"`
	Port     *int32  `protobuf:"varint,8,opt,name=port,def=5051" json:"port,omitempty"`
	// The configured resources at the agent. This does not include any
	// dynamic reservations or persistent volumes that may currently
	// exist at the agent.
	Resources  []*Resource  `protobuf:"bytes,3,rep,name=resources" json:"resources,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,5,rep,name=attributes" json:"attributes,omitempty"`
	Id         *AgentID     `protobuf:"bytes,6,opt,name=id" json:"id,omitempty"`
	// The domain that this agent belongs to. If the agent's region
	// differs from the master's region, it will not appear in resource
	// offers to frameworks that have not enabled the REGION_AWARE
	// capability.
	Domain           *DomainInfo `protobuf:"bytes,10,opt,name=domain" json:"domain,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *AgentInfo) Reset()                    { *m = AgentInfo{} }
func (m *AgentInfo) String() string            { return proto.CompactTextString(m) }
func (*AgentInfo) ProtoMessage()               {}
func (*AgentInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

const Default_AgentInfo_Port int32 = 5051

func (m *AgentInfo) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *AgentInfo) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return Default_AgentInfo_Port
}

func (m *AgentInfo) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *AgentInfo) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *AgentInfo) GetId() *AgentID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *AgentInfo) GetDomain() *DomainInfo {
	if m != nil {
		return m.Domain
	}
	return nil
}

type AgentInfo_Capability struct {
	// Enum fields should be optional, see: MESOS-4997.
	Type             *AgentInfo_Capability_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.AgentInfo_Capability_Type" json:"type,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *AgentInfo_Capability) Reset()                    { *m = AgentInfo_Capability{} }
func (m *AgentInfo_Capability) String() string            { return proto.CompactTextString(m) }
func (*AgentInfo_Capability) ProtoMessage()               {}
func (*AgentInfo_Capability) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23, 0} }

func (m *AgentInfo_Capability) GetType() AgentInfo_Capability_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return AgentInfo_Capability_UNKNOWN
}

// *
// Describes the container configuration to run a CSI plugin component.
type CSIPluginContainerInfo struct {
	Services         []CSIPluginContainerInfo_Service `protobuf:"varint,1,rep,name=services,enum=mesos.v1.CSIPluginContainerInfo_Service" json:"services,omitempty"`
	Command          *CommandInfo                     `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	Resources        []*Resource                      `protobuf:"bytes,3,rep,name=resources" json:"resources,omitempty"`
	Container        *ContainerInfo                   `protobuf:"bytes,4,opt,name=container" json:"container,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *CSIPluginContainerInfo) Reset()                    { *m = CSIPluginContainerInfo{} }
func (m *CSIPluginContainerInfo) String() string            { return proto.CompactTextString(m) }
func (*CSIPluginContainerInfo) ProtoMessage()               {}
func (*CSIPluginContainerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CSIPluginContainerInfo) GetServices() []CSIPluginContainerInfo_Service {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *CSIPluginContainerInfo) GetCommand() *CommandInfo {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *CSIPluginContainerInfo) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *CSIPluginContainerInfo) GetContainer() *ContainerInfo {
	if m != nil {
		return m.Container
	}
	return nil
}

// *
// Describes a CSI plugin.
type CSIPluginInfo struct {
	// The type of the CSI service. This uniquely identifies a CSI
	// implementation. For instance:
	//     org.apache.mesos.csi.test
	//
	// Please follow to Java package naming convention
	// (https://en.wikipedia.org/wiki/Java_package#Package_naming_conventions)
	// to avoid conflicts on type names.
	Type *string `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	// The name of the CSI service. There could be mutliple instances of a
	// type of CSI service. The name field is used to distinguish these
	// instances. It should be a legal Java identifier
	// (https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html)
	// to avoid conflicts on concatenation of type and name.
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// A list of container configurations to run CSI plugin components.
	// The controller service will be served by the first configuration
	// that contains `CONTROLLER_SERVICE`, and the node service will be
	// served by the first configuration that contains `NODE_SERVICE`.
	Containers       []*CSIPluginContainerInfo `protobuf:"bytes,3,rep,name=containers" json:"containers,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CSIPluginInfo) Reset()                    { *m = CSIPluginInfo{} }
func (m *CSIPluginInfo) String() string            { return proto.CompactTextString(m) }
func (*CSIPluginInfo) ProtoMessage()               {}
func (*CSIPluginInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CSIPluginInfo) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *CSIPluginInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CSIPluginInfo) GetContainers() []*CSIPluginContainerInfo {
	if m != nil {
		return m.Containers
	}
	return nil
}

// *
// Describes a resource provider. Note that the 'id' field is only available
// after a resource provider is registered with the master, and is made
// available here to facilitate re-registration.
type ResourceProviderInfo struct {
	Id         *ResourceProviderID `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Attributes []*Attribute        `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
	// The type of the resource provider. This uniquely identifies a
	// resource provider implementation. For instance:
	//     org.apache.mesos.rp.local.storage
	//
	// Please follow to Java package naming convention
	// (https://en.wikipedia.org/wiki/Java_package#Package_naming_conventions)
	// to avoid conflicts on type names.
	Type *string `protobuf:"bytes,3,req,name=type" json:"type,omitempty"`
	// The name of the resource provider. There could be multiple
	// instances of a type of resource provider. The name field is used
	// to distinguish these instances. It should be a legal Java identifier
	// (https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html)
	// to avoid conflicts on concatenation of type and name.
	Name *string `protobuf:"bytes,4,req,name=name" json:"name,omitempty"`
	// The stack of default reservations. If this field is not empty, it
	// indicates that resources from this resource provider are reserved
	// by default, except for the resources that have been reserved or
	// unreserved through operations. The first `ReservationInfo`
	// may have type `STATIC` or `DYNAMIC`, but the rest must have
	// `DYNAMIC`. One can create a new reservation on top of an existing
	// one by pushing a new `ReservationInfo` to the back. The last
	// `ReservationInfo` in this stack is the "current" reservation. The
	// new reservation's role must be a child of the current one.
	DefaultReservations []*Resource_ReservationInfo   `protobuf:"bytes,5,rep,name=default_reservations,json=default_reservations" json:"default_reservations,omitempty"`
	Storage             *ResourceProviderInfo_Storage `protobuf:"bytes,6,opt,name=storage" json:"storage,omitempty"`
	XXX_unrecognized    []byte                        `json:"-"`
}

func (m *ResourceProviderInfo) Reset()                    { *m = ResourceProviderInfo{} }
func (m *ResourceProviderInfo) String() string            { return proto.CompactTextString(m) }
func (*ResourceProviderInfo) ProtoMessage()               {}
func (*ResourceProviderInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ResourceProviderInfo) GetId() *ResourceProviderID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ResourceProviderInfo) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ResourceProviderInfo) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *ResourceProviderInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ResourceProviderInfo) GetDefaultReservations() []*Resource_ReservationInfo {
	if m != nil {
		return m.DefaultReservations
	}
	return nil
}

func (m *ResourceProviderInfo) GetStorage() *ResourceProviderInfo_Storage {
	if m != nil {
		return m.Storage
	}
	return nil
}

// Storage resource provider related information.
type ResourceProviderInfo_Storage struct {
	Plugin           *CSIPluginInfo `protobuf:"bytes,1,req,name=plugin" json:"plugin,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ResourceProviderInfo_Storage) Reset()         { *m = ResourceProviderInfo_Storage{} }
func (m *ResourceProviderInfo_Storage) String() string { return proto.CompactTextString(m) }
func (*ResourceProviderInfo_Storage) ProtoMessage()    {}
func (*ResourceProviderInfo_Storage) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26, 0}
}

func (m *ResourceProviderInfo_Storage) GetPlugin() *CSIPluginInfo {
	if m != nil {
		return m.Plugin
	}
	return nil
}

// *
// Describes an Attribute or Resource "value". A value is described
// using the standard protocol buffer "union" trick.
type Value struct {
	Type             *Value_Type   `protobuf:"varint,1,req,name=type,enum=mesos.v1.Value_Type" json:"type,omitempty"`
	Scalar           *Value_Scalar `protobuf:"bytes,2,opt,name=scalar" json:"scalar,omitempty"`
	Ranges           *Value_Ranges `protobuf:"bytes,3,opt,name=ranges" json:"ranges,omitempty"`
	Set              *Value_Set    `protobuf:"bytes,4,opt,name=set" json:"set,omitempty"`
	Text             *Value_Text   `protobuf:"bytes,5,opt,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *Value) GetType() Value_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Value_SCALAR
}

func (m *Value) GetScalar() *Value_Scalar {
	if m != nil {
		return m.Scalar
	}
	return nil
}

func (m *Value) GetRanges() *Value_Ranges {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *Value) GetSet() *Value_Set {
	if m != nil {
		return m.Set
	}
	return nil
}

func (m *Value) GetText() *Value_Text {
	if m != nil {
		return m.Text
	}
	return nil
}

type Value_Scalar struct {
	// Scalar values are represented using floating point. To reduce
	// the chance of unpredictable floating point behavior due to
	// roundoff error, Mesos only supports three decimal digits of
	// precision for scalar resource values. That is, floating point
	// values are converted to a fixed point format that supports
	// three decimal digits of precision, and then converted back to
	// floating point on output. Any additional precision in scalar
	// resource values is discarded (via rounding).
	Value            *float64 `protobuf:"fixed64,1,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Value_Scalar) Reset()                    { *m = Value_Scalar{} }
func (m *Value_Scalar) String() string            { return proto.CompactTextString(m) }
func (*Value_Scalar) ProtoMessage()               {}
func (*Value_Scalar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27, 0} }

func (m *Value_Scalar) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type Value_Range struct {
	Begin            *uint64 `protobuf:"varint,1,req,name=begin" json:"begin,omitempty"`
	End              *uint64 `protobuf:"varint,2,req,name=end" json:"end,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Value_Range) Reset()                    { *m = Value_Range{} }
func (m *Value_Range) String() string            { return proto.CompactTextString(m) }
func (*Value_Range) ProtoMessage()               {}
func (*Value_Range) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27, 1} }

func (m *Value_Range) GetBegin() uint64 {
	if m != nil && m.Begin != nil {
		return *m.Begin
	}
	return 0
}

func (m *Value_Range) GetEnd() uint64 {
	if m != nil && m.End != nil {
		return *m.End
	}
	return 0
}

type Value_Ranges struct {
	Range            []*Value_Range `protobuf:"bytes,1,rep,name=range" json:"range,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Value_Ranges) Reset()                    { *m = Value_Ranges{} }
func (m *Value_Ranges) String() string            { return proto.CompactTextString(m) }
func (*Value_Ranges) ProtoMessage()               {}
func (*Value_Ranges) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27, 2} }

func (m *Value_Ranges) GetRange() []*Value_Range {
	if m != nil {
		return m.Range
	}
	return nil
}

type Value_Set struct {
	Item             []string `protobuf:"bytes,1,rep,name=item" json:"item,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Value_Set) Reset()                    { *m = Value_Set{} }
func (m *Value_Set) String() string            { return proto.CompactTextString(m) }
func (*Value_Set) ProtoMessage()               {}
func (*Value_Set) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27, 3} }

func (m *Value_Set) GetItem() []string {
	if m != nil {
		return m.Item
	}
	return nil
}

type Value_Text struct {
	Value            *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Value_Text) Reset()                    { *m = Value_Text{} }
func (m *Value_Text) String() string            { return proto.CompactTextString(m) }
func (*Value_Text) ProtoMessage()               {}
func (*Value_Text) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27, 4} }

func (m *Value_Text) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// *
// Describes an attribute that can be set on a machine. For now,
// attributes and resources share the same "value" type, but this may
// change in the future and attributes may only be string based.
type Attribute struct {
	Name             *string       `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Type             *Value_Type   `protobuf:"varint,2,req,name=type,enum=mesos.v1.Value_Type" json:"type,omitempty"`
	Scalar           *Value_Scalar `protobuf:"bytes,3,opt,name=scalar" json:"scalar,omitempty"`
	Ranges           *Value_Ranges `protobuf:"bytes,4,opt,name=ranges" json:"ranges,omitempty"`
	Set              *Value_Set    `protobuf:"bytes,6,opt,name=set" json:"set,omitempty"`
	Text             *Value_Text   `protobuf:"bytes,5,opt,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Attribute) Reset()                    { *m = Attribute{} }
func (m *Attribute) String() string            { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()               {}
func (*Attribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *Attribute) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Attribute) GetType() Value_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Value_SCALAR
}

func (m *Attribute) GetScalar() *Value_Scalar {
	if m != nil {
		return m.Scalar
	}
	return nil
}

func (m *Attribute) GetRanges() *Value_Ranges {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *Attribute) GetSet() *Value_Set {
	if m != nil {
		return m.Set
	}
	return nil
}

func (m *Attribute) GetText() *Value_Text {
	if m != nil {
		return m.Text
	}
	return nil
}

// *
// Describes a resource from a resource provider. The `name` field is
// a string like "cpus" or "mem" that indicates which kind of resource
// this is; the rest of the fields describe the properties of the
// resource. A resource can take on one of three types: scalar
// (double), a list of finite and discrete ranges (e.g., [1-10,
// 20-30]), or a set of items. A resource is described using the
// standard protocol buffer "union" trick.
//
// Note that "disk" and "mem" resources are scalar values expressed in
// megabytes. Fractional "cpus" values are allowed (e.g., "0.5"),
// which correspond to partial shares of a CPU.
type Resource struct {
	ProviderId *ResourceProviderID `protobuf:"bytes,12,opt,name=provider_id,json=provider_id" json:"provider_id,omitempty"`
	Name       *string             `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Type       *Value_Type         `protobuf:"varint,2,req,name=type,enum=mesos.v1.Value_Type" json:"type,omitempty"`
	Scalar     *Value_Scalar       `protobuf:"bytes,3,opt,name=scalar" json:"scalar,omitempty"`
	Ranges     *Value_Ranges       `protobuf:"bytes,4,opt,name=ranges" json:"ranges,omitempty"`
	Set        *Value_Set          `protobuf:"bytes,5,opt,name=set" json:"set,omitempty"`
	// The role that this resource is reserved for. If "*", this indicates
	// that the resource is unreserved. Otherwise, the resource will only
	// be offered to frameworks that belong to this role.
	//
	// NOTE: Frameworks must not set this field if `reservations` is set.
	//       See the 'Resource Format' section for more details.
	//
	// TODO(mpark): Deprecate once `reservations` is no longer experimental.
	Role           *string                  `protobuf:"bytes,6,opt,name=role,def=*" json:"role,omitempty"`
	AllocationInfo *Resource_AllocationInfo `protobuf:"bytes,11,opt,name=allocation_info,json=allocation_info" json:"allocation_info,omitempty"`
	// If this is set, this resource was dynamically reserved by an
	// operator or a framework. Otherwise, this resource is either unreserved
	// or statically reserved by an operator via the --resources flag.
	//
	// NOTE: Frameworks must not set this field if `reservations` is set.
	//       See the 'Resource Format' section for more details.
	//
	// TODO(mpark): Deprecate once `reservations` is no longer experimental.
	Reservation *Resource_ReservationInfo `protobuf:"bytes,8,opt,name=reservation" json:"reservation,omitempty"`
	// The stack of reservations. If this field is empty, it indicates that this
	// resource is unreserved. Otherwise, the resource is reserved. The first
	// `ReservationInfo` may have type `STATIC` or `DYNAMIC`, but the rest must
	// have `DYNAMIC`. One can create a new reservation on top of an existing
	// one by pushing a new `ReservationInfo` to the back. The last
	// `ReservationInfo` in this stack is the "current" reservation. The new
	// reservation's role must be a child of the current reservation's role.
	//
	// NOTE: Frameworks must not set this field if `reservation` is set.
	//       See the 'Resource Format' section for more details.
	//
	// TODO(mpark): Deprecate `role` and `reservation` once this is stable.
	Reservations []*Resource_ReservationInfo `protobuf:"bytes,13,rep,name=reservations" json:"reservations,omitempty"`
	Disk         *Resource_DiskInfo          `protobuf:"bytes,7,opt,name=disk" json:"disk,omitempty"`
	// If this is set, the resources are revocable, i.e., any tasks or
	// executors launched using these resources could get preempted or
	// throttled at any time. This could be used by frameworks to run
	// best effort tasks that do not need strict uptime or performance
	// guarantees. Note that if this is set, 'disk' or 'reservation'
	// cannot be set.
	Revocable *Resource_RevocableInfo `protobuf:"bytes,9,opt,name=revocable" json:"revocable,omitempty"`
	// If this is set, the resources are shared, i.e. multiple tasks
	// can be launched using this resource and all of them shall refer
	// to the same physical resource on the cluster. Note that only
	// persistent volumes can be shared currently.
	Shared           *Resource_SharedInfo `protobuf:"bytes,10,opt,name=shared" json:"shared,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Resource) Reset()                    { *m = Resource{} }
func (m *Resource) String() string            { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()               {}
func (*Resource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

const Default_Resource_Role string = "*"

func (m *Resource) GetProviderId() *ResourceProviderID {
	if m != nil {
		return m.ProviderId
	}
	return nil
}

func (m *Resource) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Resource) GetType() Value_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Value_SCALAR
}

func (m *Resource) GetScalar() *Value_Scalar {
	if m != nil {
		return m.Scalar
	}
	return nil
}

func (m *Resource) GetRanges() *Value_Ranges {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *Resource) GetSet() *Value_Set {
	if m != nil {
		return m.Set
	}
	return nil
}

func (m *Resource) GetRole() string {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return Default_Resource_Role
}

func (m *Resource) GetAllocationInfo() *Resource_AllocationInfo {
	if m != nil {
		return m.AllocationInfo
	}
	return nil
}

func (m *Resource) GetReservation() *Resource_ReservationInfo {
	if m != nil {
		return m.Reservation
	}
	return nil
}

func (m *Resource) GetReservations() []*Resource_ReservationInfo {
	if m != nil {
		return m.Reservations
	}
	return nil
}

func (m *Resource) GetDisk() *Resource_DiskInfo {
	if m != nil {
		return m.Disk
	}
	return nil
}

func (m *Resource) GetRevocable() *Resource_RevocableInfo {
	if m != nil {
		return m.Revocable
	}
	return nil
}

func (m *Resource) GetShared() *Resource_SharedInfo {
	if m != nil {
		return m.Shared
	}
	return nil
}

// This was initially introduced to support MULTI_ROLE capable
// frameworks. Frameworks that are not MULTI_ROLE capable can
// continue to assume that the offered resources are allocated
// to their role.
type Resource_AllocationInfo struct {
	// If set, this resource is allocated to a role. Note that in the
	// future, this may be unset and the scheduler may be responsible
	// for allocating to one of its roles.
	Role             *string `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Resource_AllocationInfo) Reset()                    { *m = Resource_AllocationInfo{} }
func (m *Resource_AllocationInfo) String() string            { return proto.CompactTextString(m) }
func (*Resource_AllocationInfo) ProtoMessage()               {}
func (*Resource_AllocationInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29, 0} }

func (m *Resource_AllocationInfo) GetRole() string {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return ""
}

type Resource_ReservationInfo struct {
	// The type of this reservation.
	//
	// NOTE: This field must not be set for `Resource.reservation`.
	//       See the 'Resource Format' section for more details.
	Type *Resource_ReservationInfo_Type `protobuf:"varint,4,opt,name=type,enum=mesos.v1.Resource_ReservationInfo_Type" json:"type,omitempty"`
	// The role to which this reservation is made for.
	//
	// NOTE: This field must not be set for `Resource.reservation`.
	//       See the 'Resource Format' section for more details.
	Role *string `protobuf:"bytes,3,opt,name=role" json:"role,omitempty"`
	// Indicates the principal, if any, of the framework or operator
	// that reserved this resource. If reserved by a framework, the
	// field should match the `FrameworkInfo.principal`. It is used in
	// conjunction with the `UnreserveResources` ACL to determine
	// whether the entity attempting to unreserve this resource is
	// permitted to do so.
	Principal *string `protobuf:"bytes,1,opt,name=principal" json:"principal,omitempty"`
	// Labels are free-form key value pairs that can be used to
	// associate arbitrary metadata with a reserved resource.  For
	// example, frameworks can use labels to identify the intended
	// purpose for a portion of the resources the framework has
	// reserved at a given agent. Labels should not contain duplicate
	// key-value pairs.
	Labels           *Labels `protobuf:"bytes,2,opt,name=labels" json:"labels,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Resource_ReservationInfo) Reset()                    { *m = Resource_ReservationInfo{} }
func (m *Resource_ReservationInfo) String() string            { return proto.CompactTextString(m) }
func (*Resource_ReservationInfo) ProtoMessage()               {}
func (*Resource_ReservationInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29, 1} }

func (m *Resource_ReservationInfo) GetType() Resource_ReservationInfo_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Resource_ReservationInfo_UNKNOWN
}

func (m *Resource_ReservationInfo) GetRole() string {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return ""
}

func (m *Resource_ReservationInfo) GetPrincipal() string {
	if m != nil && m.Principal != nil {
		return *m.Principal
	}
	return ""
}

func (m *Resource_ReservationInfo) GetLabels() *Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

type Resource_DiskInfo struct {
	Persistence *Resource_DiskInfo_Persistence `protobuf:"bytes,1,opt,name=persistence" json:"persistence,omitempty"`
	// Describes how this disk resource will be mounted in the
	// container. If not set, the disk resource will be used as the
	// sandbox. Otherwise, it will be mounted according to the
	// 'container_path' inside 'volume'. The 'host_path' inside
	// 'volume' is ignored.
	// NOTE: If 'volume' is set but 'persistence' is not set, the
	// volume will be automatically garbage collected after
	// task/executor terminates. Currently, if 'persistence' is set,
	// 'volume' must be set.
	Volume           *Volume                   `protobuf:"bytes,2,opt,name=volume" json:"volume,omitempty"`
	Source           *Resource_DiskInfo_Source `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *Resource_DiskInfo) Reset()                    { *m = Resource_DiskInfo{} }
func (m *Resource_DiskInfo) String() string            { return proto.CompactTextString(m) }
func (*Resource_DiskInfo) ProtoMessage()               {}
func (*Resource_DiskInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29, 2} }

func (m *Resource_DiskInfo) GetPersistence() *Resource_DiskInfo_Persistence {
	if m != nil {
		return m.Persistence
	}
	return nil
}

func (m *Resource_DiskInfo) GetVolume() *Volume {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *Resource_DiskInfo) GetSource() *Resource_DiskInfo_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

// Describes a persistent disk volume.
//
// A persistent disk volume will not be automatically garbage
// collected if the task/executor/agent terminates, but will be
// re-offered to the framework(s) belonging to the 'role'.
//
// NOTE: Currently, we do not allow persistent disk volumes
// without a reservation (i.e., 'role' cannot be '*').
type Resource_DiskInfo_Persistence struct {
	// A unique ID for the persistent disk volume. This ID must be
	// unique per role on each agent. Although it is possible to use
	// the same ID on different agents in the cluster and to reuse
	// IDs after a volume with that ID has been destroyed, both
	// practices are discouraged.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// This field indicates the principal of the operator or
	// framework that created this volume. It is used in conjunction
	// with the "destroy" ACL to determine whether an entity
	// attempting to destroy the volume is permitted to do so.
	//
	// NOTE: This field should match the FrameworkInfo.principal of
	// the framework that created the volume.
	Principal        *string `protobuf:"bytes,2,opt,name=principal" json:"principal,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Resource_DiskInfo_Persistence) Reset()         { *m = Resource_DiskInfo_Persistence{} }
func (m *Resource_DiskInfo_Persistence) String() string { return proto.CompactTextString(m) }
func (*Resource_DiskInfo_Persistence) ProtoMessage()    {}
func (*Resource_DiskInfo_Persistence) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29, 2, 0}
}

func (m *Resource_DiskInfo_Persistence) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Resource_DiskInfo_Persistence) GetPrincipal() string {
	if m != nil && m.Principal != nil {
		return *m.Principal
	}
	return ""
}

// Describes where a disk originates from.
type Resource_DiskInfo_Source struct {
	Type  *Resource_DiskInfo_Source_Type  `protobuf:"varint,1,req,name=type,enum=mesos.v1.Resource_DiskInfo_Source_Type" json:"type,omitempty"`
	Path  *Resource_DiskInfo_Source_Path  `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Mount *Resource_DiskInfo_Source_Mount `protobuf:"bytes,3,opt,name=mount" json:"mount,omitempty"`
	// An identifier for this source. This field maps onto CSI
	// volume IDs and is not expected to be set by frameworks.
	Id *string `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	// Additional metadata for this source. This field maps onto CSI
	// volume metadata and is not expected to be set by frameworks.
	Metadata *Labels `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
	// This field serves as an indirection to a set of storage
	// vendor specific disk parameters which describe the properties
	// of the disk. The operator will setup mappings between a
	// profile name to a set of vendor specific disk parameters. And
	// the framework will do disk selection based on profile names,
	// instead of vendor specific disk parameters.
	//
	// Also see the DiskProfileAdaptor module.
	Profile          *string `protobuf:"bytes,6,opt,name=profile" json:"profile,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Resource_DiskInfo_Source) Reset()                    { *m = Resource_DiskInfo_Source{} }
func (m *Resource_DiskInfo_Source) String() string            { return proto.CompactTextString(m) }
func (*Resource_DiskInfo_Source) ProtoMessage()               {}
func (*Resource_DiskInfo_Source) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29, 2, 1} }

func (m *Resource_DiskInfo_Source) GetType() Resource_DiskInfo_Source_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Resource_DiskInfo_Source_UNKNOWN
}

func (m *Resource_DiskInfo_Source) GetPath() *Resource_DiskInfo_Source_Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *Resource_DiskInfo_Source) GetMount() *Resource_DiskInfo_Source_Mount {
	if m != nil {
		return m.Mount
	}
	return nil
}

func (m *Resource_DiskInfo_Source) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Resource_DiskInfo_Source) GetMetadata() *Labels {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Resource_DiskInfo_Source) GetProfile() string {
	if m != nil && m.Profile != nil {
		return *m.Profile
	}
	return ""
}

// A folder that can be located on a separate disk device. This
// can be shared and carved up as necessary between frameworks.
type Resource_DiskInfo_Source_Path struct {
	// Path to the folder (e.g., /mnt/raid/disk0). If the path is a
	// relative path, it is relative to the agent work directory.
	Root             *string `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Resource_DiskInfo_Source_Path) Reset()         { *m = Resource_DiskInfo_Source_Path{} }
func (m *Resource_DiskInfo_Source_Path) String() string { return proto.CompactTextString(m) }
func (*Resource_DiskInfo_Source_Path) ProtoMessage()    {}
func (*Resource_DiskInfo_Source_Path) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29, 2, 1, 0}
}

func (m *Resource_DiskInfo_Source_Path) GetRoot() string {
	if m != nil && m.Root != nil {
		return *m.Root
	}
	return ""
}

// A mounted file-system set up by the Agent administrator. This
// can only be used exclusively: a framework cannot accept a
// partial amount of this disk.
type Resource_DiskInfo_Source_Mount struct {
	// Path to mount point (e.g., /mnt/raid/disk0). If the path is a
	// relative path, it is relative to the agent work directory.
	Root             *string `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Resource_DiskInfo_Source_Mount) Reset()         { *m = Resource_DiskInfo_Source_Mount{} }
func (m *Resource_DiskInfo_Source_Mount) String() string { return proto.CompactTextString(m) }
func (*Resource_DiskInfo_Source_Mount) ProtoMessage()    {}
func (*Resource_DiskInfo_Source_Mount) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29, 2, 1, 1}
}

func (m *Resource_DiskInfo_Source_Mount) GetRoot() string {
	if m != nil && m.Root != nil {
		return *m.Root
	}
	return ""
}

type Resource_RevocableInfo struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Resource_RevocableInfo) Reset()                    { *m = Resource_RevocableInfo{} }
func (m *Resource_RevocableInfo) String() string            { return proto.CompactTextString(m) }
func (*Resource_RevocableInfo) ProtoMessage()               {}
func (*Resource_RevocableInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29, 3} }

// Allow the resource to be shared across tasks.
type Resource_SharedInfo struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Resource_SharedInfo) Reset()                    { *m = Resource_SharedInfo{} }
func (m *Resource_SharedInfo) String() string            { return proto.CompactTextString(m) }
func (*Resource_SharedInfo) ProtoMessage()               {}
func (*Resource_SharedInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29, 4} }

// *
// When the network bandwidth caps are enabled and the container
// is over its limit, outbound packets may be either delayed or
// dropped completely either because it exceeds the maximum bandwidth
// allocation for a single container (the cap) or because the combined
// network traffic of multiple containers on the host exceeds the
// transmit capacity of the host (the share). We can report the
// following statistics for each of these conditions exported directly
// from the Linux Traffic Control Queueing Discipline.
//
// id         : name of the limiter, e.g. 'tx_bw_cap'
// backlog    : number of packets currently delayed
// bytes      : total bytes seen
// drops      : number of packets dropped in total
// overlimits : number of packets which exceeded allocation
// packets    : total packets seen
// qlen       : number of packets currently queued
// rate_bps   : throughput in bytes/sec
// rate_pps   : throughput in packets/sec
// requeues   : number of times a packet has been delayed due to
//              locking or device contention issues
//
// More information on the operation of Linux Traffic Control can be
// found at http://www.lartc.org/lartc.html.
type TrafficControlStatistics struct {
	Id               *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Backlog          *uint64 `protobuf:"varint,2,opt,name=backlog" json:"backlog,omitempty"`
	Bytes            *uint64 `protobuf:"varint,3,opt,name=bytes" json:"bytes,omitempty"`
	Drops            *uint64 `protobuf:"varint,4,opt,name=drops" json:"drops,omitempty"`
	Overlimits       *uint64 `protobuf:"varint,5,opt,name=overlimits" json:"overlimits,omitempty"`
	Packets          *uint64 `protobuf:"varint,6,opt,name=packets" json:"packets,omitempty"`
	Qlen             *uint64 `protobuf:"varint,7,opt,name=qlen" json:"qlen,omitempty"`
	Ratebps          *uint64 `protobuf:"varint,8,opt,name=ratebps" json:"ratebps,omitempty"`
	Ratepps          *uint64 `protobuf:"varint,9,opt,name=ratepps" json:"ratepps,omitempty"`
	Requeues         *uint64 `protobuf:"varint,10,opt,name=requeues" json:"requeues,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TrafficControlStatistics) Reset()                    { *m = TrafficControlStatistics{} }
func (m *TrafficControlStatistics) String() string            { return proto.CompactTextString(m) }
func (*TrafficControlStatistics) ProtoMessage()               {}
func (*TrafficControlStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *TrafficControlStatistics) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *TrafficControlStatistics) GetBacklog() uint64 {
	if m != nil && m.Backlog != nil {
		return *m.Backlog
	}
	return 0
}

func (m *TrafficControlStatistics) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *TrafficControlStatistics) GetDrops() uint64 {
	if m != nil && m.Drops != nil {
		return *m.Drops
	}
	return 0
}

func (m *TrafficControlStatistics) GetOverlimits() uint64 {
	if m != nil && m.Overlimits != nil {
		return *m.Overlimits
	}
	return 0
}

func (m *TrafficControlStatistics) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *TrafficControlStatistics) GetQlen() uint64 {
	if m != nil && m.Qlen != nil {
		return *m.Qlen
	}
	return 0
}

func (m *TrafficControlStatistics) GetRatebps() uint64 {
	if m != nil && m.Ratebps != nil {
		return *m.Ratebps
	}
	return 0
}

func (m *TrafficControlStatistics) GetRatepps() uint64 {
	if m != nil && m.Ratepps != nil {
		return *m.Ratepps
	}
	return 0
}

func (m *TrafficControlStatistics) GetRequeues() uint64 {
	if m != nil && m.Requeues != nil {
		return *m.Requeues
	}
	return 0
}

type IpStatistics struct {
	Forwarding       *int64 `protobuf:"varint,1,opt,name=Forwarding" json:"Forwarding,omitempty"`
	DefaultTTL       *int64 `protobuf:"varint,2,opt,name=DefaultTTL" json:"DefaultTTL,omitempty"`
	InReceives       *int64 `protobuf:"varint,3,opt,name=InReceives" json:"InReceives,omitempty"`
	InHdrErrors      *int64 `protobuf:"varint,4,opt,name=InHdrErrors" json:"InHdrErrors,omitempty"`
	InAddrErrors     *int64 `protobuf:"varint,5,opt,name=InAddrErrors" json:"InAddrErrors,omitempty"`
	ForwDatagrams    *int64 `protobuf:"varint,6,opt,name=ForwDatagrams" json:"ForwDatagrams,omitempty"`
	InUnknownProtos  *int64 `protobuf:"varint,7,opt,name=InUnknownProtos" json:"InUnknownProtos,omitempty"`
	InDiscards       *int64 `protobuf:"varint,8,opt,name=InDiscards" json:"InDiscards,omitempty"`
	InDelivers       *int64 `protobuf:"varint,9,opt,name=InDelivers" json:"InDelivers,omitempty"`
	OutRequests      *int64 `protobuf:"varint,10,opt,name=OutRequests" json:"OutRequests,omitempty"`
	OutDiscards      *int64 `protobuf:"varint,11,opt,name=OutDiscards" json:"OutDiscards,omitempty"`
	OutNoRoutes      *int64 `protobuf:"varint,12,opt,name=OutNoRoutes" json:"OutNoRoutes,omitempty"`
	ReasmTimeout     *int64 `protobuf:"varint,13,opt,name=ReasmTimeout" json:"ReasmTimeout,omitempty"`
	ReasmReqds       *int64 `protobuf:"varint,14,opt,name=ReasmReqds" json:"ReasmReqds,omitempty"`
	ReasmOKs         *int64 `protobuf:"varint,15,opt,name=ReasmOKs" json:"ReasmOKs,omitempty"`
	ReasmFails       *int64 `protobuf:"varint,16,opt,name=ReasmFails" json:"ReasmFails,omitempty"`
	FragOKs          *int64 `protobuf:"varint,17,opt,name=FragOKs" json:"FragOKs,omitempty"`
	FragFails        *int64 `protobuf:"varint,18,opt,name=FragFails" json:"FragFails,omitempty"`
	FragCreates      *int64 `protobuf:"varint,19,opt,name=FragCreates" json:"FragCreates,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IpStatistics) Reset()                    { *m = IpStatistics{} }
func (m *IpStatistics) String() string            { return proto.CompactTextString(m) }
func (*IpStatistics) ProtoMessage()               {}
func (*IpStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *IpStatistics) GetForwarding() int64 {
	if m != nil && m.Forwarding != nil {
		return *m.Forwarding
	}
	return 0
}

func (m *IpStatistics) GetDefaultTTL() int64 {
	if m != nil && m.DefaultTTL != nil {
		return *m.DefaultTTL
	}
	return 0
}

func (m *IpStatistics) GetInReceives() int64 {
	if m != nil && m.InReceives != nil {
		return *m.InReceives
	}
	return 0
}

func (m *IpStatistics) GetInHdrErrors() int64 {
	if m != nil && m.InHdrErrors != nil {
		return *m.InHdrErrors
	}
	return 0
}

func (m *IpStatistics) GetInAddrErrors() int64 {
	if m != nil && m.InAddrErrors != nil {
		return *m.InAddrErrors
	}
	return 0
}

func (m *IpStatistics) GetForwDatagrams() int64 {
	if m != nil && m.ForwDatagrams != nil {
		return *m.ForwDatagrams
	}
	return 0
}

func (m *IpStatistics) GetInUnknownProtos() int64 {
	if m != nil && m.InUnknownProtos != nil {
		return *m.InUnknownProtos
	}
	return 0
}

func (m *IpStatistics) GetInDiscards() int64 {
	if m != nil && m.InDiscards != nil {
		return *m.InDiscards
	}
	return 0
}

func (m *IpStatistics) GetInDelivers() int64 {
	if m != nil && m.InDelivers != nil {
		return *m.InDelivers
	}
	return 0
}

func (m *IpStatistics) GetOutRequests() int64 {
	if m != nil && m.OutRequests != nil {
		return *m.OutRequests
	}
	return 0
}

func (m *IpStatistics) GetOutDiscards() int64 {
	if m != nil && m.OutDiscards != nil {
		return *m.OutDiscards
	}
	return 0
}

func (m *IpStatistics) GetOutNoRoutes() int64 {
	if m != nil && m.OutNoRoutes != nil {
		return *m.OutNoRoutes
	}
	return 0
}

func (m *IpStatistics) GetReasmTimeout() int64 {
	if m != nil && m.ReasmTimeout != nil {
		return *m.ReasmTimeout
	}
	return 0
}

func (m *IpStatistics) GetReasmReqds() int64 {
	if m != nil && m.ReasmReqds != nil {
		return *m.ReasmReqds
	}
	return 0
}

func (m *IpStatistics) GetReasmOKs() int64 {
	if m != nil && m.ReasmOKs != nil {
		return *m.ReasmOKs
	}
	return 0
}

func (m *IpStatistics) GetReasmFails() int64 {
	if m != nil && m.ReasmFails != nil {
		return *m.ReasmFails
	}
	return 0
}

func (m *IpStatistics) GetFragOKs() int64 {
	if m != nil && m.FragOKs != nil {
		return *m.FragOKs
	}
	return 0
}

func (m *IpStatistics) GetFragFails() int64 {
	if m != nil && m.FragFails != nil {
		return *m.FragFails
	}
	return 0
}

func (m *IpStatistics) GetFragCreates() int64 {
	if m != nil && m.FragCreates != nil {
		return *m.FragCreates
	}
	return 0
}

type IcmpStatistics struct {
	InMsgs           *int64 `protobuf:"varint,1,opt,name=InMsgs" json:"InMsgs,omitempty"`
	InErrors         *int64 `protobuf:"varint,2,opt,name=InErrors" json:"InErrors,omitempty"`
	InCsumErrors     *int64 `protobuf:"varint,3,opt,name=InCsumErrors" json:"InCsumErrors,omitempty"`
	InDestUnreachs   *int64 `protobuf:"varint,4,opt,name=InDestUnreachs" json:"InDestUnreachs,omitempty"`
	InTimeExcds      *int64 `protobuf:"varint,5,opt,name=InTimeExcds" json:"InTimeExcds,omitempty"`
	InParmProbs      *int64 `protobuf:"varint,6,opt,name=InParmProbs" json:"InParmProbs,omitempty"`
	InSrcQuenchs     *int64 `protobuf:"varint,7,opt,name=InSrcQuenchs" json:"InSrcQuenchs,omitempty"`
	InRedirects      *int64 `protobuf:"varint,8,opt,name=InRedirects" json:"InRedirects,omitempty"`
	InEchos          *int64 `protobuf:"varint,9,opt,name=InEchos" json:"InEchos,omitempty"`
	InEchoReps       *int64 `protobuf:"varint,10,opt,name=InEchoReps" json:"InEchoReps,omitempty"`
	InTimestamps     *int64 `protobuf:"varint,11,opt,name=InTimestamps" json:"InTimestamps,omitempty"`
	InTimestampReps  *int64 `protobuf:"varint,12,opt,name=InTimestampReps" json:"InTimestampReps,omitempty"`
	InAddrMasks      *int64 `protobuf:"varint,13,opt,name=InAddrMasks" json:"InAddrMasks,omitempty"`
	InAddrMaskReps   *int64 `protobuf:"varint,14,opt,name=InAddrMaskReps" json:"InAddrMaskReps,omitempty"`
	OutMsgs          *int64 `protobuf:"varint,15,opt,name=OutMsgs" json:"OutMsgs,omitempty"`
	OutErrors        *int64 `protobuf:"varint,16,opt,name=OutErrors" json:"OutErrors,omitempty"`
	OutDestUnreachs  *int64 `protobuf:"varint,17,opt,name=OutDestUnreachs" json:"OutDestUnreachs,omitempty"`
	OutTimeExcds     *int64 `protobuf:"varint,18,opt,name=OutTimeExcds" json:"OutTimeExcds,omitempty"`
	OutParmProbs     *int64 `protobuf:"varint,19,opt,name=OutParmProbs" json:"OutParmProbs,omitempty"`
	OutSrcQuenchs    *int64 `protobuf:"varint,20,opt,name=OutSrcQuenchs" json:"OutSrcQuenchs,omitempty"`
	OutRedirects     *int64 `protobuf:"varint,21,opt,name=OutRedirects" json:"OutRedirects,omitempty"`
	OutEchos         *int64 `protobuf:"varint,22,opt,name=OutEchos" json:"OutEchos,omitempty"`
	OutEchoReps      *int64 `protobuf:"varint,23,opt,name=OutEchoReps" json:"OutEchoReps,omitempty"`
	OutTimestamps    *int64 `protobuf:"varint,24,opt,name=OutTimestamps" json:"OutTimestamps,omitempty"`
	OutTimestampReps *int64 `protobuf:"varint,25,opt,name=OutTimestampReps" json:"OutTimestampReps,omitempty"`
	OutAddrMasks     *int64 `protobuf:"varint,26,opt,name=OutAddrMasks" json:"OutAddrMasks,omitempty"`
	OutAddrMaskReps  *int64 `protobuf:"varint,27,opt,name=OutAddrMaskReps" json:"OutAddrMaskReps,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IcmpStatistics) Reset()                    { *m = IcmpStatistics{} }
func (m *IcmpStatistics) String() string            { return proto.CompactTextString(m) }
func (*IcmpStatistics) ProtoMessage()               {}
func (*IcmpStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *IcmpStatistics) GetInMsgs() int64 {
	if m != nil && m.InMsgs != nil {
		return *m.InMsgs
	}
	return 0
}

func (m *IcmpStatistics) GetInErrors() int64 {
	if m != nil && m.InErrors != nil {
		return *m.InErrors
	}
	return 0
}

func (m *IcmpStatistics) GetInCsumErrors() int64 {
	if m != nil && m.InCsumErrors != nil {
		return *m.InCsumErrors
	}
	return 0
}

func (m *IcmpStatistics) GetInDestUnreachs() int64 {
	if m != nil && m.InDestUnreachs != nil {
		return *m.InDestUnreachs
	}
	return 0
}

func (m *IcmpStatistics) GetInTimeExcds() int64 {
	if m != nil && m.InTimeExcds != nil {
		return *m.InTimeExcds
	}
	return 0
}

func (m *IcmpStatistics) GetInParmProbs() int64 {
	if m != nil && m.InParmProbs != nil {
		return *m.InParmProbs
	}
	return 0
}

func (m *IcmpStatistics) GetInSrcQuenchs() int64 {
	if m != nil && m.InSrcQuenchs != nil {
		return *m.InSrcQuenchs
	}
	return 0
}

func (m *IcmpStatistics) GetInRedirects() int64 {
	if m != nil && m.InRedirects != nil {
		return *m.InRedirects
	}
	return 0
}

func (m *IcmpStatistics) GetInEchos() int64 {
	if m != nil && m.InEchos != nil {
		return *m.InEchos
	}
	return 0
}

func (m *IcmpStatistics) GetInEchoReps() int64 {
	if m != nil && m.InEchoReps != nil {
		return *m.InEchoReps
	}
	return 0
}

func (m *IcmpStatistics) GetInTimestamps() int64 {
	if m != nil && m.InTimestamps != nil {
		return *m.InTimestamps
	}
	return 0
}

func (m *IcmpStatistics) GetInTimestampReps() int64 {
	if m != nil && m.InTimestampReps != nil {
		return *m.InTimestampReps
	}
	return 0
}

func (m *IcmpStatistics) GetInAddrMasks() int64 {
	if m != nil && m.InAddrMasks != nil {
		return *m.InAddrMasks
	}
	return 0
}

func (m *IcmpStatistics) GetInAddrMaskReps() int64 {
	if m != nil && m.InAddrMaskReps != nil {
		return *m.InAddrMaskReps
	}
	return 0
}

func (m *IcmpStatistics) GetOutMsgs() int64 {
	if m != nil && m.OutMsgs != nil {
		return *m.OutMsgs
	}
	return 0
}

func (m *IcmpStatistics) GetOutErrors() int64 {
	if m != nil && m.OutErrors != nil {
		return *m.OutErrors
	}
	return 0
}

func (m *IcmpStatistics) GetOutDestUnreachs() int64 {
	if m != nil && m.OutDestUnreachs != nil {
		return *m.OutDestUnreachs
	}
	return 0
}

func (m *IcmpStatistics) GetOutTimeExcds() int64 {
	if m != nil && m.OutTimeExcds != nil {
		return *m.OutTimeExcds
	}
	return 0
}

func (m *IcmpStatistics) GetOutParmProbs() int64 {
	if m != nil && m.OutParmProbs != nil {
		return *m.OutParmProbs
	}
	return 0
}

func (m *IcmpStatistics) GetOutSrcQuenchs() int64 {
	if m != nil && m.OutSrcQuenchs != nil {
		return *m.OutSrcQuenchs
	}
	return 0
}

func (m *IcmpStatistics) GetOutRedirects() int64 {
	if m != nil && m.OutRedirects != nil {
		return *m.OutRedirects
	}
	return 0
}

func (m *IcmpStatistics) GetOutEchos() int64 {
	if m != nil && m.OutEchos != nil {
		return *m.OutEchos
	}
	return 0
}

func (m *IcmpStatistics) GetOutEchoReps() int64 {
	if m != nil && m.OutEchoReps != nil {
		return *m.OutEchoReps
	}
	return 0
}

func (m *IcmpStatistics) GetOutTimestamps() int64 {
	if m != nil && m.OutTimestamps != nil {
		return *m.OutTimestamps
	}
	return 0
}

func (m *IcmpStatistics) GetOutTimestampReps() int64 {
	if m != nil && m.OutTimestampReps != nil {
		return *m.OutTimestampReps
	}
	return 0
}

func (m *IcmpStatistics) GetOutAddrMasks() int64 {
	if m != nil && m.OutAddrMasks != nil {
		return *m.OutAddrMasks
	}
	return 0
}

func (m *IcmpStatistics) GetOutAddrMaskReps() int64 {
	if m != nil && m.OutAddrMaskReps != nil {
		return *m.OutAddrMaskReps
	}
	return 0
}

type TcpStatistics struct {
	RtoAlgorithm     *int64 `protobuf:"varint,1,opt,name=RtoAlgorithm" json:"RtoAlgorithm,omitempty"`
	RtoMin           *int64 `protobuf:"varint,2,opt,name=RtoMin" json:"RtoMin,omitempty"`
	RtoMax           *int64 `protobuf:"varint,3,opt,name=RtoMax" json:"RtoMax,omitempty"`
	MaxConn          *int64 `protobuf:"varint,4,opt,name=MaxConn" json:"MaxConn,omitempty"`
	ActiveOpens      *int64 `protobuf:"varint,5,opt,name=ActiveOpens" json:"ActiveOpens,omitempty"`
	PassiveOpens     *int64 `protobuf:"varint,6,opt,name=PassiveOpens" json:"PassiveOpens,omitempty"`
	AttemptFails     *int64 `protobuf:"varint,7,opt,name=AttemptFails" json:"AttemptFails,omitempty"`
	EstabResets      *int64 `protobuf:"varint,8,opt,name=EstabResets" json:"EstabResets,omitempty"`
	CurrEstab        *int64 `protobuf:"varint,9,opt,name=CurrEstab" json:"CurrEstab,omitempty"`
	InSegs           *int64 `protobuf:"varint,10,opt,name=InSegs" json:"InSegs,omitempty"`
	OutSegs          *int64 `protobuf:"varint,11,opt,name=OutSegs" json:"OutSegs,omitempty"`
	RetransSegs      *int64 `protobuf:"varint,12,opt,name=RetransSegs" json:"RetransSegs,omitempty"`
	InErrs           *int64 `protobuf:"varint,13,opt,name=InErrs" json:"InErrs,omitempty"`
	OutRsts          *int64 `protobuf:"varint,14,opt,name=OutRsts" json:"OutRsts,omitempty"`
	InCsumErrors     *int64 `protobuf:"varint,15,opt,name=InCsumErrors" json:"InCsumErrors,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TcpStatistics) Reset()                    { *m = TcpStatistics{} }
func (m *TcpStatistics) String() string            { return proto.CompactTextString(m) }
func (*TcpStatistics) ProtoMessage()               {}
func (*TcpStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *TcpStatistics) GetRtoAlgorithm() int64 {
	if m != nil && m.RtoAlgorithm != nil {
		return *m.RtoAlgorithm
	}
	return 0
}

func (m *TcpStatistics) GetRtoMin() int64 {
	if m != nil && m.RtoMin != nil {
		return *m.RtoMin
	}
	return 0
}

func (m *TcpStatistics) GetRtoMax() int64 {
	if m != nil && m.RtoMax != nil {
		return *m.RtoMax
	}
	return 0
}

func (m *TcpStatistics) GetMaxConn() int64 {
	if m != nil && m.MaxConn != nil {
		return *m.MaxConn
	}
	return 0
}

func (m *TcpStatistics) GetActiveOpens() int64 {
	if m != nil && m.ActiveOpens != nil {
		return *m.ActiveOpens
	}
	return 0
}

func (m *TcpStatistics) GetPassiveOpens() int64 {
	if m != nil && m.PassiveOpens != nil {
		return *m.PassiveOpens
	}
	return 0
}

func (m *TcpStatistics) GetAttemptFails() int64 {
	if m != nil && m.AttemptFails != nil {
		return *m.AttemptFails
	}
	return 0
}

func (m *TcpStatistics) GetEstabResets() int64 {
	if m != nil && m.EstabResets != nil {
		return *m.EstabResets
	}
	return 0
}

func (m *TcpStatistics) GetCurrEstab() int64 {
	if m != nil && m.CurrEstab != nil {
		return *m.CurrEstab
	}
	return 0
}

func (m *TcpStatistics) GetInSegs() int64 {
	if m != nil && m.InSegs != nil {
		return *m.InSegs
	}
	return 0
}

func (m *TcpStatistics) GetOutSegs() int64 {
	if m != nil && m.OutSegs != nil {
		return *m.OutSegs
	}
	return 0
}

func (m *TcpStatistics) GetRetransSegs() int64 {
	if m != nil && m.RetransSegs != nil {
		return *m.RetransSegs
	}
	return 0
}

func (m *TcpStatistics) GetInErrs() int64 {
	if m != nil && m.InErrs != nil {
		return *m.InErrs
	}
	return 0
}

func (m *TcpStatistics) GetOutRsts() int64 {
	if m != nil && m.OutRsts != nil {
		return *m.OutRsts
	}
	return 0
}

func (m *TcpStatistics) GetInCsumErrors() int64 {
	if m != nil && m.InCsumErrors != nil {
		return *m.InCsumErrors
	}
	return 0
}

type UdpStatistics struct {
	InDatagrams      *int64 `protobuf:"varint,1,opt,name=InDatagrams" json:"InDatagrams,omitempty"`
	NoPorts          *int64 `protobuf:"varint,2,opt,name=NoPorts" json:"NoPorts,omitempty"`
	InErrors         *int64 `protobuf:"varint,3,opt,name=InErrors" json:"InErrors,omitempty"`
	OutDatagrams     *int64 `protobuf:"varint,4,opt,name=OutDatagrams" json:"OutDatagrams,omitempty"`
	RcvbufErrors     *int64 `protobuf:"varint,5,opt,name=RcvbufErrors" json:"RcvbufErrors,omitempty"`
	SndbufErrors     *int64 `protobuf:"varint,6,opt,name=SndbufErrors" json:"SndbufErrors,omitempty"`
	InCsumErrors     *int64 `protobuf:"varint,7,opt,name=InCsumErrors" json:"InCsumErrors,omitempty"`
	IgnoredMulti     *int64 `protobuf:"varint,8,opt,name=IgnoredMulti" json:"IgnoredMulti,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UdpStatistics) Reset()                    { *m = UdpStatistics{} }
func (m *UdpStatistics) String() string            { return proto.CompactTextString(m) }
func (*UdpStatistics) ProtoMessage()               {}
func (*UdpStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *UdpStatistics) GetInDatagrams() int64 {
	if m != nil && m.InDatagrams != nil {
		return *m.InDatagrams
	}
	return 0
}

func (m *UdpStatistics) GetNoPorts() int64 {
	if m != nil && m.NoPorts != nil {
		return *m.NoPorts
	}
	return 0
}

func (m *UdpStatistics) GetInErrors() int64 {
	if m != nil && m.InErrors != nil {
		return *m.InErrors
	}
	return 0
}

func (m *UdpStatistics) GetOutDatagrams() int64 {
	if m != nil && m.OutDatagrams != nil {
		return *m.OutDatagrams
	}
	return 0
}

func (m *UdpStatistics) GetRcvbufErrors() int64 {
	if m != nil && m.RcvbufErrors != nil {
		return *m.RcvbufErrors
	}
	return 0
}

func (m *UdpStatistics) GetSndbufErrors() int64 {
	if m != nil && m.SndbufErrors != nil {
		return *m.SndbufErrors
	}
	return 0
}

func (m *UdpStatistics) GetInCsumErrors() int64 {
	if m != nil && m.InCsumErrors != nil {
		return *m.InCsumErrors
	}
	return 0
}

func (m *UdpStatistics) GetIgnoredMulti() int64 {
	if m != nil && m.IgnoredMulti != nil {
		return *m.IgnoredMulti
	}
	return 0
}

type SNMPStatistics struct {
	IpStats          *IpStatistics   `protobuf:"bytes,1,opt,name=ip_stats,json=ip_stats" json:"ip_stats,omitempty"`
	IcmpStats        *IcmpStatistics `protobuf:"bytes,2,opt,name=icmp_stats,json=icmp_stats" json:"icmp_stats,omitempty"`
	TcpStats         *TcpStatistics  `protobuf:"bytes,3,opt,name=tcp_stats,json=tcp_stats" json:"tcp_stats,omitempty"`
	UdpStats         *UdpStatistics  `protobuf:"bytes,4,opt,name=udp_stats,json=udp_stats" json:"udp_stats,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SNMPStatistics) Reset()                    { *m = SNMPStatistics{} }
func (m *SNMPStatistics) String() string            { return proto.CompactTextString(m) }
func (*SNMPStatistics) ProtoMessage()               {}
func (*SNMPStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *SNMPStatistics) GetIpStats() *IpStatistics {
	if m != nil {
		return m.IpStats
	}
	return nil
}

func (m *SNMPStatistics) GetIcmpStats() *IcmpStatistics {
	if m != nil {
		return m.IcmpStats
	}
	return nil
}

func (m *SNMPStatistics) GetTcpStats() *TcpStatistics {
	if m != nil {
		return m.TcpStats
	}
	return nil
}

func (m *SNMPStatistics) GetUdpStats() *UdpStatistics {
	if m != nil {
		return m.UdpStats
	}
	return nil
}

type DiskStatistics struct {
	Source           *Resource_DiskInfo_Source      `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Persistence      *Resource_DiskInfo_Persistence `protobuf:"bytes,2,opt,name=persistence" json:"persistence,omitempty"`
	LimitBytes       *uint64                        `protobuf:"varint,3,opt,name=limit_bytes,json=limit_bytes" json:"limit_bytes,omitempty"`
	UsedBytes        *uint64                        `protobuf:"varint,4,opt,name=used_bytes,json=used_bytes" json:"used_bytes,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *DiskStatistics) Reset()                    { *m = DiskStatistics{} }
func (m *DiskStatistics) String() string            { return proto.CompactTextString(m) }
func (*DiskStatistics) ProtoMessage()               {}
func (*DiskStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *DiskStatistics) GetSource() *Resource_DiskInfo_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *DiskStatistics) GetPersistence() *Resource_DiskInfo_Persistence {
	if m != nil {
		return m.Persistence
	}
	return nil
}

func (m *DiskStatistics) GetLimitBytes() uint64 {
	if m != nil && m.LimitBytes != nil {
		return *m.LimitBytes
	}
	return 0
}

func (m *DiskStatistics) GetUsedBytes() uint64 {
	if m != nil && m.UsedBytes != nil {
		return *m.UsedBytes
	}
	return 0
}

// *
// A snapshot of resource usage statistics.
type ResourceStatistics struct {
	Timestamp *float64 `protobuf:"fixed64,1,req,name=timestamp" json:"timestamp,omitempty"`
	Processes *uint32  `protobuf:"varint,30,opt,name=processes" json:"processes,omitempty"`
	Threads   *uint32  `protobuf:"varint,31,opt,name=threads" json:"threads,omitempty"`
	// CPU Usage Information:
	// Total CPU time spent in user mode, and kernel mode.
	CpusUserTimeSecs   *float64 `protobuf:"fixed64,2,opt,name=cpus_user_time_secs,json=cpus_user_time_secs" json:"cpus_user_time_secs,omitempty"`
	CpusSystemTimeSecs *float64 `protobuf:"fixed64,3,opt,name=cpus_system_time_secs,json=cpus_system_time_secs" json:"cpus_system_time_secs,omitempty"`
	// Number of CPUs allocated.
	CpusLimit *float64 `protobuf:"fixed64,4,opt,name=cpus_limit,json=cpus_limit" json:"cpus_limit,omitempty"`
	// cpu.stat on process throttling (for contention issues).
	CpusNrPeriods         *uint32  `protobuf:"varint,7,opt,name=cpus_nr_periods,json=cpus_nr_periods" json:"cpus_nr_periods,omitempty"`
	CpusNrThrottled       *uint32  `protobuf:"varint,8,opt,name=cpus_nr_throttled,json=cpus_nr_throttled" json:"cpus_nr_throttled,omitempty"`
	CpusThrottledTimeSecs *float64 `protobuf:"fixed64,9,opt,name=cpus_throttled_time_secs,json=cpus_throttled_time_secs" json:"cpus_throttled_time_secs,omitempty"`
	// mem_total_bytes was added in 0.23.0 to represent the total memory
	// of a process in RAM (as opposed to in Swap). This was previously
	// reported as mem_rss_bytes, which was also changed in 0.23.0 to
	// represent only the anonymous memory usage, to keep in sync with
	// Linux kernel's (arguably erroneous) use of terminology.
	MemTotalBytes *uint64 `protobuf:"varint,36,opt,name=mem_total_bytes,json=mem_total_bytes" json:"mem_total_bytes,omitempty"`
	// Total memory + swap usage. This is set if swap is enabled.
	MemTotalMemswBytes *uint64 `protobuf:"varint,37,opt,name=mem_total_memsw_bytes,json=mem_total_memsw_bytes" json:"mem_total_memsw_bytes,omitempty"`
	// Hard memory limit for a container.
	MemLimitBytes *uint64 `protobuf:"varint,6,opt,name=mem_limit_bytes,json=mem_limit_bytes" json:"mem_limit_bytes,omitempty"`
	// Soft memory limit for a container.
	MemSoftLimitBytes *uint64 `protobuf:"varint,38,opt,name=mem_soft_limit_bytes,json=mem_soft_limit_bytes" json:"mem_soft_limit_bytes,omitempty"`
	// TODO(chzhcn) mem_file_bytes and mem_anon_bytes are deprecated in
	// 0.23.0 and will be removed in 0.24.0.
	MemFileBytes *uint64 `protobuf:"varint,10,opt,name=mem_file_bytes,json=mem_file_bytes" json:"mem_file_bytes,omitempty"`
	MemAnonBytes *uint64 `protobuf:"varint,11,opt,name=mem_anon_bytes,json=mem_anon_bytes" json:"mem_anon_bytes,omitempty"`
	// mem_cache_bytes is added in 0.23.0 to represent page cache usage.
	MemCacheBytes *uint64 `protobuf:"varint,39,opt,name=mem_cache_bytes,json=mem_cache_bytes" json:"mem_cache_bytes,omitempty"`
	// Since 0.23.0, mem_rss_bytes is changed to represent only
	// anonymous memory usage. Note that neither its requiredness, type,
	// name nor numeric tag has been changed.
	MemRssBytes        *uint64 `protobuf:"varint,5,opt,name=mem_rss_bytes,json=mem_rss_bytes" json:"mem_rss_bytes,omitempty"`
	MemMappedFileBytes *uint64 `protobuf:"varint,12,opt,name=mem_mapped_file_bytes,json=mem_mapped_file_bytes" json:"mem_mapped_file_bytes,omitempty"`
	// This is only set if swap is enabled.
	MemSwapBytes        *uint64 `protobuf:"varint,40,opt,name=mem_swap_bytes,json=mem_swap_bytes" json:"mem_swap_bytes,omitempty"`
	MemUnevictableBytes *uint64 `protobuf:"varint,41,opt,name=mem_unevictable_bytes,json=mem_unevictable_bytes" json:"mem_unevictable_bytes,omitempty"`
	// Number of occurrences of different levels of memory pressure
	// events reported by memory cgroup. Pressure listening (re)starts
	// with these values set to 0 when agent (re)starts. See
	// https://www.kernel.org/doc/Documentation/cgroups/memory.txt for
	// more details.
	MemLowPressureCounter      *uint64 `protobuf:"varint,32,opt,name=mem_low_pressure_counter,json=mem_low_pressure_counter" json:"mem_low_pressure_counter,omitempty"`
	MemMediumPressureCounter   *uint64 `protobuf:"varint,33,opt,name=mem_medium_pressure_counter,json=mem_medium_pressure_counter" json:"mem_medium_pressure_counter,omitempty"`
	MemCriticalPressureCounter *uint64 `protobuf:"varint,34,opt,name=mem_critical_pressure_counter,json=mem_critical_pressure_counter" json:"mem_critical_pressure_counter,omitempty"`
	// Disk Usage Information for executor working directory.
	DiskLimitBytes *uint64 `protobuf:"varint,26,opt,name=disk_limit_bytes,json=disk_limit_bytes" json:"disk_limit_bytes,omitempty"`
	DiskUsedBytes  *uint64 `protobuf:"varint,27,opt,name=disk_used_bytes,json=disk_used_bytes" json:"disk_used_bytes,omitempty"`
	// Per disk (resource) statistics.
	DiskStatistics []*DiskStatistics `protobuf:"bytes,43,rep,name=disk_statistics,json=disk_statistics" json:"disk_statistics,omitempty"`
	// Cgroups blkio statistics.
	BlkioStatistics *CgroupInfo_Blkio_Statistics `protobuf:"bytes,44,opt,name=blkio_statistics,json=blkio_statistics" json:"blkio_statistics,omitempty"`
	// Perf statistics.
	Perf *PerfStatistics `protobuf:"bytes,13,opt,name=perf" json:"perf,omitempty"`
	// Network Usage Information:
	NetRxPackets *uint64 `protobuf:"varint,14,opt,name=net_rx_packets,json=net_rx_packets" json:"net_rx_packets,omitempty"`
	NetRxBytes   *uint64 `protobuf:"varint,15,opt,name=net_rx_bytes,json=net_rx_bytes" json:"net_rx_bytes,omitempty"`
	NetRxErrors  *uint64 `protobuf:"varint,16,opt,name=net_rx_errors,json=net_rx_errors" json:"net_rx_errors,omitempty"`
	NetRxDropped *uint64 `protobuf:"varint,17,opt,name=net_rx_dropped,json=net_rx_dropped" json:"net_rx_dropped,omitempty"`
	NetTxPackets *uint64 `protobuf:"varint,18,opt,name=net_tx_packets,json=net_tx_packets" json:"net_tx_packets,omitempty"`
	NetTxBytes   *uint64 `protobuf:"varint,19,opt,name=net_tx_bytes,json=net_tx_bytes" json:"net_tx_bytes,omitempty"`
	NetTxErrors  *uint64 `protobuf:"varint,20,opt,name=net_tx_errors,json=net_tx_errors" json:"net_tx_errors,omitempty"`
	NetTxDropped *uint64 `protobuf:"varint,21,opt,name=net_tx_dropped,json=net_tx_dropped" json:"net_tx_dropped,omitempty"`
	// The kernel keeps track of RTT (round-trip time) for its TCP
	// sockets. RTT is a way to tell the latency of a container.
	NetTcpRttMicrosecsP50     *float64 `protobuf:"fixed64,22,opt,name=net_tcp_rtt_microsecs_p50,json=net_tcp_rtt_microsecs_p50" json:"net_tcp_rtt_microsecs_p50,omitempty"`
	NetTcpRttMicrosecsP90     *float64 `protobuf:"fixed64,23,opt,name=net_tcp_rtt_microsecs_p90,json=net_tcp_rtt_microsecs_p90" json:"net_tcp_rtt_microsecs_p90,omitempty"`
	NetTcpRttMicrosecsP95     *float64 `protobuf:"fixed64,24,opt,name=net_tcp_rtt_microsecs_p95,json=net_tcp_rtt_microsecs_p95" json:"net_tcp_rtt_microsecs_p95,omitempty"`
	NetTcpRttMicrosecsP99     *float64 `protobuf:"fixed64,25,opt,name=net_tcp_rtt_microsecs_p99,json=net_tcp_rtt_microsecs_p99" json:"net_tcp_rtt_microsecs_p99,omitempty"`
	NetTcpActiveConnections   *float64 `protobuf:"fixed64,28,opt,name=net_tcp_active_connections,json=net_tcp_active_connections" json:"net_tcp_active_connections,omitempty"`
	NetTcpTimeWaitConnections *float64 `protobuf:"fixed64,29,opt,name=net_tcp_time_wait_connections,json=net_tcp_time_wait_connections" json:"net_tcp_time_wait_connections,omitempty"`
	// Network traffic flowing into or out of a container can be delayed
	// or dropped due to congestion or policy inside and outside the
	// container.
	NetTrafficControlStatistics []*TrafficControlStatistics `protobuf:"bytes,35,rep,name=net_traffic_control_statistics,json=net_traffic_control_statistics" json:"net_traffic_control_statistics,omitempty"`
	// Network SNMP statistics for each container.
	NetSnmpStatistics *SNMPStatistics `protobuf:"bytes,42,opt,name=net_snmp_statistics,json=net_snmp_statistics" json:"net_snmp_statistics,omitempty"`
	XXX_unrecognized  []byte          `json:"-"`
}

func (m *ResourceStatistics) Reset()                    { *m = ResourceStatistics{} }
func (m *ResourceStatistics) String() string            { return proto.CompactTextString(m) }
func (*ResourceStatistics) ProtoMessage()               {}
func (*ResourceStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *ResourceStatistics) GetTimestamp() float64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *ResourceStatistics) GetProcesses() uint32 {
	if m != nil && m.Processes != nil {
		return *m.Processes
	}
	return 0
}

func (m *ResourceStatistics) GetThreads() uint32 {
	if m != nil && m.Threads != nil {
		return *m.Threads
	}
	return 0
}

func (m *ResourceStatistics) GetCpusUserTimeSecs() float64 {
	if m != nil && m.CpusUserTimeSecs != nil {
		return *m.CpusUserTimeSecs
	}
	return 0
}

func (m *ResourceStatistics) GetCpusSystemTimeSecs() float64 {
	if m != nil && m.CpusSystemTimeSecs != nil {
		return *m.CpusSystemTimeSecs
	}
	return 0
}

func (m *ResourceStatistics) GetCpusLimit() float64 {
	if m != nil && m.CpusLimit != nil {
		return *m.CpusLimit
	}
	return 0
}

func (m *ResourceStatistics) GetCpusNrPeriods() uint32 {
	if m != nil && m.CpusNrPeriods != nil {
		return *m.CpusNrPeriods
	}
	return 0
}

func (m *ResourceStatistics) GetCpusNrThrottled() uint32 {
	if m != nil && m.CpusNrThrottled != nil {
		return *m.CpusNrThrottled
	}
	return 0
}

func (m *ResourceStatistics) GetCpusThrottledTimeSecs() float64 {
	if m != nil && m.CpusThrottledTimeSecs != nil {
		return *m.CpusThrottledTimeSecs
	}
	return 0
}

func (m *ResourceStatistics) GetMemTotalBytes() uint64 {
	if m != nil && m.MemTotalBytes != nil {
		return *m.MemTotalBytes
	}
	return 0
}

func (m *ResourceStatistics) GetMemTotalMemswBytes() uint64 {
	if m != nil && m.MemTotalMemswBytes != nil {
		return *m.MemTotalMemswBytes
	}
	return 0
}

func (m *ResourceStatistics) GetMemLimitBytes() uint64 {
	if m != nil && m.MemLimitBytes != nil {
		return *m.MemLimitBytes
	}
	return 0
}

func (m *ResourceStatistics) GetMemSoftLimitBytes() uint64 {
	if m != nil && m.MemSoftLimitBytes != nil {
		return *m.MemSoftLimitBytes
	}
	return 0
}

func (m *ResourceStatistics) GetMemFileBytes() uint64 {
	if m != nil && m.MemFileBytes != nil {
		return *m.MemFileBytes
	}
	return 0
}

func (m *ResourceStatistics) GetMemAnonBytes() uint64 {
	if m != nil && m.MemAnonBytes != nil {
		return *m.MemAnonBytes
	}
	return 0
}

func (m *ResourceStatistics) GetMemCacheBytes() uint64 {
	if m != nil && m.MemCacheBytes != nil {
		return *m.MemCacheBytes
	}
	return 0
}

func (m *ResourceStatistics) GetMemRssBytes() uint64 {
	if m != nil && m.MemRssBytes != nil {
		return *m.MemRssBytes
	}
	return 0
}

func (m *ResourceStatistics) GetMemMappedFileBytes() uint64 {
	if m != nil && m.MemMappedFileBytes != nil {
		return *m.MemMappedFileBytes
	}
	return 0
}

func (m *ResourceStatistics) GetMemSwapBytes() uint64 {
	if m != nil && m.MemSwapBytes != nil {
		return *m.MemSwapBytes
	}
	return 0
}

func (m *ResourceStatistics) GetMemUnevictableBytes() uint64 {
	if m != nil && m.MemUnevictableBytes != nil {
		return *m.MemUnevictableBytes
	}
	return 0
}

func (m *ResourceStatistics) GetMemLowPressureCounter() uint64 {
	if m != nil && m.MemLowPressureCounter != nil {
		return *m.MemLowPressureCounter
	}
	return 0
}

func (m *ResourceStatistics) GetMemMediumPressureCounter() uint64 {
	if m != nil && m.MemMediumPressureCounter != nil {
		return *m.MemMediumPressureCounter
	}
	return 0
}

func (m *ResourceStatistics) GetMemCriticalPressureCounter() uint64 {
	if m != nil && m.MemCriticalPressureCounter != nil {
		return *m.MemCriticalPressureCounter
	}
	return 0
}

func (m *ResourceStatistics) GetDiskLimitBytes() uint64 {
	if m != nil && m.DiskLimitBytes != nil {
		return *m.DiskLimitBytes
	}
	return 0
}

func (m *ResourceStatistics) GetDiskUsedBytes() uint64 {
	if m != nil && m.DiskUsedBytes != nil {
		return *m.DiskUsedBytes
	}
	return 0
}

func (m *ResourceStatistics) GetDiskStatistics() []*DiskStatistics {
	if m != nil {
		return m.DiskStatistics
	}
	return nil
}

func (m *ResourceStatistics) GetBlkioStatistics() *CgroupInfo_Blkio_Statistics {
	if m != nil {
		return m.BlkioStatistics
	}
	return nil
}

func (m *ResourceStatistics) GetPerf() *PerfStatistics {
	if m != nil {
		return m.Perf
	}
	return nil
}

func (m *ResourceStatistics) GetNetRxPackets() uint64 {
	if m != nil && m.NetRxPackets != nil {
		return *m.NetRxPackets
	}
	return 0
}

func (m *ResourceStatistics) GetNetRxBytes() uint64 {
	if m != nil && m.NetRxBytes != nil {
		return *m.NetRxBytes
	}
	return 0
}

func (m *ResourceStatistics) GetNetRxErrors() uint64 {
	if m != nil && m.NetRxErrors != nil {
		return *m.NetRxErrors
	}
	return 0
}

func (m *ResourceStatistics) GetNetRxDropped() uint64 {
	if m != nil && m.NetRxDropped != nil {
		return *m.NetRxDropped
	}
	return 0
}

func (m *ResourceStatistics) GetNetTxPackets() uint64 {
	if m != nil && m.NetTxPackets != nil {
		return *m.NetTxPackets
	}
	return 0
}

func (m *ResourceStatistics) GetNetTxBytes() uint64 {
	if m != nil && m.NetTxBytes != nil {
		return *m.NetTxBytes
	}
	return 0
}

func (m *ResourceStatistics) GetNetTxErrors() uint64 {
	if m != nil && m.NetTxErrors != nil {
		return *m.NetTxErrors
	}
	return 0
}

func (m *ResourceStatistics) GetNetTxDropped() uint64 {
	if m != nil && m.NetTxDropped != nil {
		return *m.NetTxDropped
	}
	return 0
}

func (m *ResourceStatistics) GetNetTcpRttMicrosecsP50() float64 {
	if m != nil && m.NetTcpRttMicrosecsP50 != nil {
		return *m.NetTcpRttMicrosecsP50
	}
	return 0
}

func (m *ResourceStatistics) GetNetTcpRttMicrosecsP90() float64 {
	if m != nil && m.NetTcpRttMicrosecsP90 != nil {
		return *m.NetTcpRttMicrosecsP90
	}
	return 0
}

func (m *ResourceStatistics) GetNetTcpRttMicrosecsP95() float64 {
	if m != nil && m.NetTcpRttMicrosecsP95 != nil {
		return *m.NetTcpRttMicrosecsP95
	}
	return 0
}

func (m *ResourceStatistics) GetNetTcpRttMicrosecsP99() float64 {
	if m != nil && m.NetTcpRttMicrosecsP99 != nil {
		return *m.NetTcpRttMicrosecsP99
	}
	return 0
}

func (m *ResourceStatistics) GetNetTcpActiveConnections() float64 {
	if m != nil && m.NetTcpActiveConnections != nil {
		return *m.NetTcpActiveConnections
	}
	return 0
}

func (m *ResourceStatistics) GetNetTcpTimeWaitConnections() float64 {
	if m != nil && m.NetTcpTimeWaitConnections != nil {
		return *m.NetTcpTimeWaitConnections
	}
	return 0
}

func (m *ResourceStatistics) GetNetTrafficControlStatistics() []*TrafficControlStatistics {
	if m != nil {
		return m.NetTrafficControlStatistics
	}
	return nil
}

func (m *ResourceStatistics) GetNetSnmpStatistics() *SNMPStatistics {
	if m != nil {
		return m.NetSnmpStatistics
	}
	return nil
}

// *
// Describes a snapshot of the resource usage for executors.
type ResourceUsage struct {
	Executors []*ResourceUsage_Executor `protobuf:"bytes,1,rep,name=executors" json:"executors,omitempty"`
	// Agent's total resources including checkpointed dynamic
	// reservations and persistent volumes.
	Total            []*Resource `protobuf:"bytes,2,rep,name=total" json:"total,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ResourceUsage) Reset()                    { *m = ResourceUsage{} }
func (m *ResourceUsage) String() string            { return proto.CompactTextString(m) }
func (*ResourceUsage) ProtoMessage()               {}
func (*ResourceUsage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ResourceUsage) GetExecutors() []*ResourceUsage_Executor {
	if m != nil {
		return m.Executors
	}
	return nil
}

func (m *ResourceUsage) GetTotal() []*Resource {
	if m != nil {
		return m.Total
	}
	return nil
}

type ResourceUsage_Executor struct {
	ExecutorInfo *ExecutorInfo `protobuf:"bytes,1,req,name=executor_info,json=executor_info" json:"executor_info,omitempty"`
	// This includes resources used by the executor itself
	// as well as its active tasks.
	Allocated []*Resource `protobuf:"bytes,2,rep,name=allocated" json:"allocated,omitempty"`
	// Current resource usage. If absent, the containerizer
	// cannot provide resource usage.
	Statistics *ResourceStatistics `protobuf:"bytes,3,opt,name=statistics" json:"statistics,omitempty"`
	// The container id for the executor specified in the executor_info field.
	ContainerId *ContainerID `protobuf:"bytes,4,req,name=container_id,json=container_id" json:"container_id,omitempty"`
	// Non-terminal tasks.
	Tasks            []*ResourceUsage_Executor_Task `protobuf:"bytes,5,rep,name=tasks" json:"tasks,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *ResourceUsage_Executor) Reset()                    { *m = ResourceUsage_Executor{} }
func (m *ResourceUsage_Executor) String() string            { return proto.CompactTextString(m) }
func (*ResourceUsage_Executor) ProtoMessage()               {}
func (*ResourceUsage_Executor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38, 0} }

func (m *ResourceUsage_Executor) GetExecutorInfo() *ExecutorInfo {
	if m != nil {
		return m.ExecutorInfo
	}
	return nil
}

func (m *ResourceUsage_Executor) GetAllocated() []*Resource {
	if m != nil {
		return m.Allocated
	}
	return nil
}

func (m *ResourceUsage_Executor) GetStatistics() *ResourceStatistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func (m *ResourceUsage_Executor) GetContainerId() *ContainerID {
	if m != nil {
		return m.ContainerId
	}
	return nil
}

func (m *ResourceUsage_Executor) GetTasks() []*ResourceUsage_Executor_Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type ResourceUsage_Executor_Task struct {
	Name             *string     `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Id               *TaskID     `protobuf:"bytes,2,req,name=id" json:"id,omitempty"`
	Resources        []*Resource `protobuf:"bytes,3,rep,name=resources" json:"resources,omitempty"`
	Labels           *Labels     `protobuf:"bytes,4,opt,name=labels" json:"labels,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ResourceUsage_Executor_Task) Reset()         { *m = ResourceUsage_Executor_Task{} }
func (m *ResourceUsage_Executor_Task) String() string { return proto.CompactTextString(m) }
func (*ResourceUsage_Executor_Task) ProtoMessage()    {}
func (*ResourceUsage_Executor_Task) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{38, 0, 0}
}

func (m *ResourceUsage_Executor_Task) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ResourceUsage_Executor_Task) GetId() *TaskID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ResourceUsage_Executor_Task) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *ResourceUsage_Executor_Task) GetLabels() *Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

// *
// Describes a sample of events from "perf stat". Only available on
// Linux.
//
// NOTE: Each optional field matches the name of a perf event (see
// "perf list") with the following changes:
// 1. Names are downcased.
// 2. Hyphens ('-') are replaced with underscores ('_').
// 3. Events with alternate names use the name "perf stat" returns,
//    e.g., for the event "cycles OR cpu-cycles" perf always returns
//    cycles.
type PerfStatistics struct {
	Timestamp *float64 `protobuf:"fixed64,1,req,name=timestamp" json:"timestamp,omitempty"`
	Duration  *float64 `protobuf:"fixed64,2,req,name=duration" json:"duration,omitempty"`
	// Hardware event.
	Cycles                *uint64 `protobuf:"varint,3,opt,name=cycles" json:"cycles,omitempty"`
	StalledCyclesFrontend *uint64 `protobuf:"varint,4,opt,name=stalled_cycles_frontend,json=stalled_cycles_frontend" json:"stalled_cycles_frontend,omitempty"`
	StalledCyclesBackend  *uint64 `protobuf:"varint,5,opt,name=stalled_cycles_backend,json=stalled_cycles_backend" json:"stalled_cycles_backend,omitempty"`
	Instructions          *uint64 `protobuf:"varint,6,opt,name=instructions" json:"instructions,omitempty"`
	CacheReferences       *uint64 `protobuf:"varint,7,opt,name=cache_references,json=cache_references" json:"cache_references,omitempty"`
	CacheMisses           *uint64 `protobuf:"varint,8,opt,name=cache_misses,json=cache_misses" json:"cache_misses,omitempty"`
	Branches              *uint64 `protobuf:"varint,9,opt,name=branches" json:"branches,omitempty"`
	BranchMisses          *uint64 `protobuf:"varint,10,opt,name=branch_misses,json=branch_misses" json:"branch_misses,omitempty"`
	BusCycles             *uint64 `protobuf:"varint,11,opt,name=bus_cycles,json=bus_cycles" json:"bus_cycles,omitempty"`
	RefCycles             *uint64 `protobuf:"varint,12,opt,name=ref_cycles,json=ref_cycles" json:"ref_cycles,omitempty"`
	// Software event.
	CpuClock        *float64 `protobuf:"fixed64,13,opt,name=cpu_clock,json=cpu_clock" json:"cpu_clock,omitempty"`
	TaskClock       *float64 `protobuf:"fixed64,14,opt,name=task_clock,json=task_clock" json:"task_clock,omitempty"`
	PageFaults      *uint64  `protobuf:"varint,15,opt,name=page_faults,json=page_faults" json:"page_faults,omitempty"`
	MinorFaults     *uint64  `protobuf:"varint,16,opt,name=minor_faults,json=minor_faults" json:"minor_faults,omitempty"`
	MajorFaults     *uint64  `protobuf:"varint,17,opt,name=major_faults,json=major_faults" json:"major_faults,omitempty"`
	ContextSwitches *uint64  `protobuf:"varint,18,opt,name=context_switches,json=context_switches" json:"context_switches,omitempty"`
	CpuMigrations   *uint64  `protobuf:"varint,19,opt,name=cpu_migrations,json=cpu_migrations" json:"cpu_migrations,omitempty"`
	AlignmentFaults *uint64  `protobuf:"varint,20,opt,name=alignment_faults,json=alignment_faults" json:"alignment_faults,omitempty"`
	EmulationFaults *uint64  `protobuf:"varint,21,opt,name=emulation_faults,json=emulation_faults" json:"emulation_faults,omitempty"`
	// Hardware cache event.
	L1DcacheLoads          *uint64 `protobuf:"varint,22,opt,name=l1_dcache_loads,json=l1DcacheLoads" json:"l1_dcache_loads,omitempty"`
	L1DcacheLoadMisses     *uint64 `protobuf:"varint,23,opt,name=l1_dcache_load_misses,json=l1DcacheLoadMisses" json:"l1_dcache_load_misses,omitempty"`
	L1DcacheStores         *uint64 `protobuf:"varint,24,opt,name=l1_dcache_stores,json=l1DcacheStores" json:"l1_dcache_stores,omitempty"`
	L1DcacheStoreMisses    *uint64 `protobuf:"varint,25,opt,name=l1_dcache_store_misses,json=l1DcacheStoreMisses" json:"l1_dcache_store_misses,omitempty"`
	L1DcachePrefetches     *uint64 `protobuf:"varint,26,opt,name=l1_dcache_prefetches,json=l1DcachePrefetches" json:"l1_dcache_prefetches,omitempty"`
	L1DcachePrefetchMisses *uint64 `protobuf:"varint,27,opt,name=l1_dcache_prefetch_misses,json=l1DcachePrefetchMisses" json:"l1_dcache_prefetch_misses,omitempty"`
	L1IcacheLoads          *uint64 `protobuf:"varint,28,opt,name=l1_icache_loads,json=l1IcacheLoads" json:"l1_icache_loads,omitempty"`
	L1IcacheLoadMisses     *uint64 `protobuf:"varint,29,opt,name=l1_icache_load_misses,json=l1IcacheLoadMisses" json:"l1_icache_load_misses,omitempty"`
	L1IcachePrefetches     *uint64 `protobuf:"varint,30,opt,name=l1_icache_prefetches,json=l1IcachePrefetches" json:"l1_icache_prefetches,omitempty"`
	L1IcachePrefetchMisses *uint64 `protobuf:"varint,31,opt,name=l1_icache_prefetch_misses,json=l1IcachePrefetchMisses" json:"l1_icache_prefetch_misses,omitempty"`
	LlcLoads               *uint64 `protobuf:"varint,32,opt,name=llc_loads,json=llc_loads" json:"llc_loads,omitempty"`
	LlcLoadMisses          *uint64 `protobuf:"varint,33,opt,name=llc_load_misses,json=llc_load_misses" json:"llc_load_misses,omitempty"`
	LlcStores              *uint64 `protobuf:"varint,34,opt,name=llc_stores,json=llc_stores" json:"llc_stores,omitempty"`
	LlcStoreMisses         *uint64 `protobuf:"varint,35,opt,name=llc_store_misses,json=llc_store_misses" json:"llc_store_misses,omitempty"`
	LlcPrefetches          *uint64 `protobuf:"varint,36,opt,name=llc_prefetches,json=llc_prefetches" json:"llc_prefetches,omitempty"`
	LlcPrefetchMisses      *uint64 `protobuf:"varint,37,opt,name=llc_prefetch_misses,json=llc_prefetch_misses" json:"llc_prefetch_misses,omitempty"`
	DtlbLoads              *uint64 `protobuf:"varint,38,opt,name=dtlb_loads,json=dtlb_loads" json:"dtlb_loads,omitempty"`
	DtlbLoadMisses         *uint64 `protobuf:"varint,39,opt,name=dtlb_load_misses,json=dtlb_load_misses" json:"dtlb_load_misses,omitempty"`
	DtlbStores             *uint64 `protobuf:"varint,40,opt,name=dtlb_stores,json=dtlb_stores" json:"dtlb_stores,omitempty"`
	DtlbStoreMisses        *uint64 `protobuf:"varint,41,opt,name=dtlb_store_misses,json=dtlb_store_misses" json:"dtlb_store_misses,omitempty"`
	DtlbPrefetches         *uint64 `protobuf:"varint,42,opt,name=dtlb_prefetches,json=dtlb_prefetches" json:"dtlb_prefetches,omitempty"`
	DtlbPrefetchMisses     *uint64 `protobuf:"varint,43,opt,name=dtlb_prefetch_misses,json=dtlb_prefetch_misses" json:"dtlb_prefetch_misses,omitempty"`
	ItlbLoads              *uint64 `protobuf:"varint,44,opt,name=itlb_loads,json=itlb_loads" json:"itlb_loads,omitempty"`
	ItlbLoadMisses         *uint64 `protobuf:"varint,45,opt,name=itlb_load_misses,json=itlb_load_misses" json:"itlb_load_misses,omitempty"`
	BranchLoads            *uint64 `protobuf:"varint,46,opt,name=branch_loads,json=branch_loads" json:"branch_loads,omitempty"`
	BranchLoadMisses       *uint64 `protobuf:"varint,47,opt,name=branch_load_misses,json=branch_load_misses" json:"branch_load_misses,omitempty"`
	NodeLoads              *uint64 `protobuf:"varint,48,opt,name=node_loads,json=node_loads" json:"node_loads,omitempty"`
	NodeLoadMisses         *uint64 `protobuf:"varint,49,opt,name=node_load_misses,json=node_load_misses" json:"node_load_misses,omitempty"`
	NodeStores             *uint64 `protobuf:"varint,50,opt,name=node_stores,json=node_stores" json:"node_stores,omitempty"`
	NodeStoreMisses        *uint64 `protobuf:"varint,51,opt,name=node_store_misses,json=node_store_misses" json:"node_store_misses,omitempty"`
	NodePrefetches         *uint64 `protobuf:"varint,52,opt,name=node_prefetches,json=node_prefetches" json:"node_prefetches,omitempty"`
	NodePrefetchMisses     *uint64 `protobuf:"varint,53,opt,name=node_prefetch_misses,json=node_prefetch_misses" json:"node_prefetch_misses,omitempty"`
	XXX_unrecognized       []byte  `json:"-"`
}

func (m *PerfStatistics) Reset()                    { *m = PerfStatistics{} }
func (m *PerfStatistics) String() string            { return proto.CompactTextString(m) }
func (*PerfStatistics) ProtoMessage()               {}
func (*PerfStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *PerfStatistics) GetTimestamp() float64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *PerfStatistics) GetDuration() float64 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *PerfStatistics) GetCycles() uint64 {
	if m != nil && m.Cycles != nil {
		return *m.Cycles
	}
	return 0
}

func (m *PerfStatistics) GetStalledCyclesFrontend() uint64 {
	if m != nil && m.StalledCyclesFrontend != nil {
		return *m.StalledCyclesFrontend
	}
	return 0
}

func (m *PerfStatistics) GetStalledCyclesBackend() uint64 {
	if m != nil && m.StalledCyclesBackend != nil {
		return *m.StalledCyclesBackend
	}
	return 0
}

func (m *PerfStatistics) GetInstructions() uint64 {
	if m != nil && m.Instructions != nil {
		return *m.Instructions
	}
	return 0
}

func (m *PerfStatistics) GetCacheReferences() uint64 {
	if m != nil && m.CacheReferences != nil {
		return *m.CacheReferences
	}
	return 0
}

func (m *PerfStatistics) GetCacheMisses() uint64 {
	if m != nil && m.CacheMisses != nil {
		return *m.CacheMisses
	}
	return 0
}

func (m *PerfStatistics) GetBranches() uint64 {
	if m != nil && m.Branches != nil {
		return *m.Branches
	}
	return 0
}

func (m *PerfStatistics) GetBranchMisses() uint64 {
	if m != nil && m.BranchMisses != nil {
		return *m.BranchMisses
	}
	return 0
}

func (m *PerfStatistics) GetBusCycles() uint64 {
	if m != nil && m.BusCycles != nil {
		return *m.BusCycles
	}
	return 0
}

func (m *PerfStatistics) GetRefCycles() uint64 {
	if m != nil && m.RefCycles != nil {
		return *m.RefCycles
	}
	return 0
}

func (m *PerfStatistics) GetCpuClock() float64 {
	if m != nil && m.CpuClock != nil {
		return *m.CpuClock
	}
	return 0
}

func (m *PerfStatistics) GetTaskClock() float64 {
	if m != nil && m.TaskClock != nil {
		return *m.TaskClock
	}
	return 0
}

func (m *PerfStatistics) GetPageFaults() uint64 {
	if m != nil && m.PageFaults != nil {
		return *m.PageFaults
	}
	return 0
}

func (m *PerfStatistics) GetMinorFaults() uint64 {
	if m != nil && m.MinorFaults != nil {
		return *m.MinorFaults
	}
	return 0
}

func (m *PerfStatistics) GetMajorFaults() uint64 {
	if m != nil && m.MajorFaults != nil {
		return *m.MajorFaults
	}
	return 0
}

func (m *PerfStatistics) GetContextSwitches() uint64 {
	if m != nil && m.ContextSwitches != nil {
		return *m.ContextSwitches
	}
	return 0
}

func (m *PerfStatistics) GetCpuMigrations() uint64 {
	if m != nil && m.CpuMigrations != nil {
		return *m.CpuMigrations
	}
	return 0
}

func (m *PerfStatistics) GetAlignmentFaults() uint64 {
	if m != nil && m.AlignmentFaults != nil {
		return *m.AlignmentFaults
	}
	return 0
}

func (m *PerfStatistics) GetEmulationFaults() uint64 {
	if m != nil && m.EmulationFaults != nil {
		return *m.EmulationFaults
	}
	return 0
}

func (m *PerfStatistics) GetL1DcacheLoads() uint64 {
	if m != nil && m.L1DcacheLoads != nil {
		return *m.L1DcacheLoads
	}
	return 0
}

func (m *PerfStatistics) GetL1DcacheLoadMisses() uint64 {
	if m != nil && m.L1DcacheLoadMisses != nil {
		return *m.L1DcacheLoadMisses
	}
	return 0
}

func (m *PerfStatistics) GetL1DcacheStores() uint64 {
	if m != nil && m.L1DcacheStores != nil {
		return *m.L1DcacheStores
	}
	return 0
}

func (m *PerfStatistics) GetL1DcacheStoreMisses() uint64 {
	if m != nil && m.L1DcacheStoreMisses != nil {
		return *m.L1DcacheStoreMisses
	}
	return 0
}

func (m *PerfStatistics) GetL1DcachePrefetches() uint64 {
	if m != nil && m.L1DcachePrefetches != nil {
		return *m.L1DcachePrefetches
	}
	return 0
}

func (m *PerfStatistics) GetL1DcachePrefetchMisses() uint64 {
	if m != nil && m.L1DcachePrefetchMisses != nil {
		return *m.L1DcachePrefetchMisses
	}
	return 0
}

func (m *PerfStatistics) GetL1IcacheLoads() uint64 {
	if m != nil && m.L1IcacheLoads != nil {
		return *m.L1IcacheLoads
	}
	return 0
}

func (m *PerfStatistics) GetL1IcacheLoadMisses() uint64 {
	if m != nil && m.L1IcacheLoadMisses != nil {
		return *m.L1IcacheLoadMisses
	}
	return 0
}

func (m *PerfStatistics) GetL1IcachePrefetches() uint64 {
	if m != nil && m.L1IcachePrefetches != nil {
		return *m.L1IcachePrefetches
	}
	return 0
}

func (m *PerfStatistics) GetL1IcachePrefetchMisses() uint64 {
	if m != nil && m.L1IcachePrefetchMisses != nil {
		return *m.L1IcachePrefetchMisses
	}
	return 0
}

func (m *PerfStatistics) GetLlcLoads() uint64 {
	if m != nil && m.LlcLoads != nil {
		return *m.LlcLoads
	}
	return 0
}

func (m *PerfStatistics) GetLlcLoadMisses() uint64 {
	if m != nil && m.LlcLoadMisses != nil {
		return *m.LlcLoadMisses
	}
	return 0
}

func (m *PerfStatistics) GetLlcStores() uint64 {
	if m != nil && m.LlcStores != nil {
		return *m.LlcStores
	}
	return 0
}

func (m *PerfStatistics) GetLlcStoreMisses() uint64 {
	if m != nil && m.LlcStoreMisses != nil {
		return *m.LlcStoreMisses
	}
	return 0
}

func (m *PerfStatistics) GetLlcPrefetches() uint64 {
	if m != nil && m.LlcPrefetches != nil {
		return *m.LlcPrefetches
	}
	return 0
}

func (m *PerfStatistics) GetLlcPrefetchMisses() uint64 {
	if m != nil && m.LlcPrefetchMisses != nil {
		return *m.LlcPrefetchMisses
	}
	return 0
}

func (m *PerfStatistics) GetDtlbLoads() uint64 {
	if m != nil && m.DtlbLoads != nil {
		return *m.DtlbLoads
	}
	return 0
}

func (m *PerfStatistics) GetDtlbLoadMisses() uint64 {
	if m != nil && m.DtlbLoadMisses != nil {
		return *m.DtlbLoadMisses
	}
	return 0
}

func (m *PerfStatistics) GetDtlbStores() uint64 {
	if m != nil && m.DtlbStores != nil {
		return *m.DtlbStores
	}
	return 0
}

func (m *PerfStatistics) GetDtlbStoreMisses() uint64 {
	if m != nil && m.DtlbStoreMisses != nil {
		return *m.DtlbStoreMisses
	}
	return 0
}

func (m *PerfStatistics) GetDtlbPrefetches() uint64 {
	if m != nil && m.DtlbPrefetches != nil {
		return *m.DtlbPrefetches
	}
	return 0
}

func (m *PerfStatistics) GetDtlbPrefetchMisses() uint64 {
	if m != nil && m.DtlbPrefetchMisses != nil {
		return *m.DtlbPrefetchMisses
	}
	return 0
}

func (m *PerfStatistics) GetItlbLoads() uint64 {
	if m != nil && m.ItlbLoads != nil {
		return *m.ItlbLoads
	}
	return 0
}

func (m *PerfStatistics) GetItlbLoadMisses() uint64 {
	if m != nil && m.ItlbLoadMisses != nil {
		return *m.ItlbLoadMisses
	}
	return 0
}

func (m *PerfStatistics) GetBranchLoads() uint64 {
	if m != nil && m.BranchLoads != nil {
		return *m.BranchLoads
	}
	return 0
}

func (m *PerfStatistics) GetBranchLoadMisses() uint64 {
	if m != nil && m.BranchLoadMisses != nil {
		return *m.BranchLoadMisses
	}
	return 0
}

func (m *PerfStatistics) GetNodeLoads() uint64 {
	if m != nil && m.NodeLoads != nil {
		return *m.NodeLoads
	}
	return 0
}

func (m *PerfStatistics) GetNodeLoadMisses() uint64 {
	if m != nil && m.NodeLoadMisses != nil {
		return *m.NodeLoadMisses
	}
	return 0
}

func (m *PerfStatistics) GetNodeStores() uint64 {
	if m != nil && m.NodeStores != nil {
		return *m.NodeStores
	}
	return 0
}

func (m *PerfStatistics) GetNodeStoreMisses() uint64 {
	if m != nil && m.NodeStoreMisses != nil {
		return *m.NodeStoreMisses
	}
	return 0
}

func (m *PerfStatistics) GetNodePrefetches() uint64 {
	if m != nil && m.NodePrefetches != nil {
		return *m.NodePrefetches
	}
	return 0
}

func (m *PerfStatistics) GetNodePrefetchMisses() uint64 {
	if m != nil && m.NodePrefetchMisses != nil {
		return *m.NodePrefetchMisses
	}
	return 0
}

// *
// Describes a request for resources that can be used by a framework
// to proactively influence the allocator.  If 'agent_id' is provided
// then this request is assumed to only apply to resources on that
// agent.
type Request struct {
	AgentId          *AgentID    `protobuf:"bytes,1,opt,name=agent_id,json=agent_id" json:"agent_id,omitempty"`
	Resources        []*Resource `protobuf:"bytes,2,rep,name=resources" json:"resources,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *Request) GetAgentId() *AgentID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

func (m *Request) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

// *
// Describes some resources available on an agent. An offer only
// contains resources from a single agent.
type Offer struct {
	Id          *OfferID     `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	FrameworkId *FrameworkID `protobuf:"bytes,2,req,name=framework_id,json=framework_id" json:"framework_id,omitempty"`
	AgentId     *AgentID     `protobuf:"bytes,3,req,name=agent_id,json=agent_id" json:"agent_id,omitempty"`
	Hostname    *string      `protobuf:"bytes,4,req,name=hostname" json:"hostname,omitempty"`
	// URL for reaching the agent running on the host.
	Url *URL `protobuf:"bytes,8,opt,name=url" json:"url,omitempty"`
	// The domain of the agent.
	Domain     *DomainInfo  `protobuf:"bytes,11,opt,name=domain" json:"domain,omitempty"`
	Resources  []*Resource  `protobuf:"bytes,5,rep,name=resources" json:"resources,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,7,rep,name=attributes" json:"attributes,omitempty"`
	// Executors of the same framework running on this agent.
	ExecutorIds []*ExecutorID `protobuf:"bytes,6,rep,name=executor_ids,json=executor_ids" json:"executor_ids,omitempty"`
	// Signifies that the resources in this Offer may be unavailable during
	// the given interval.  Any tasks launched using these resources may be
	// killed when the interval arrives.  For example, these resources may be
	// part of a planned maintenance schedule.
	//
	// This field only provides information about a planned unavailability.
	// The unavailability interval may not necessarily start at exactly this
	// interval, nor last for exactly the duration of this interval.
	// The unavailability may also be forever!  See comments in
	// `Unavailability` for more details.
	Unavailability *Unavailability `protobuf:"bytes,9,opt,name=unavailability" json:"unavailability,omitempty"`
	// An offer represents resources allocated to *one* of the
	// roles managed by the scheduler. (Therefore, each
	// `Offer.resources[i].allocation_info` will match the
	// top level `Offer.allocation_info`).
	AllocationInfo   *Resource_AllocationInfo `protobuf:"bytes,10,opt,name=allocation_info,json=allocation_info" json:"allocation_info,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *Offer) Reset()                    { *m = Offer{} }
func (m *Offer) String() string            { return proto.CompactTextString(m) }
func (*Offer) ProtoMessage()               {}
func (*Offer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *Offer) GetId() *OfferID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Offer) GetFrameworkId() *FrameworkID {
	if m != nil {
		return m.FrameworkId
	}
	return nil
}

func (m *Offer) GetAgentId() *AgentID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

func (m *Offer) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *Offer) GetUrl() *URL {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *Offer) GetDomain() *DomainInfo {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *Offer) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Offer) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Offer) GetExecutorIds() []*ExecutorID {
	if m != nil {
		return m.ExecutorIds
	}
	return nil
}

func (m *Offer) GetUnavailability() *Unavailability {
	if m != nil {
		return m.Unavailability
	}
	return nil
}

func (m *Offer) GetAllocationInfo() *Resource_AllocationInfo {
	if m != nil {
		return m.AllocationInfo
	}
	return nil
}

// Defines an operation that can be performed against offers.
type Offer_Operation struct {
	Type *Offer_Operation_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.Offer_Operation_Type" json:"type,omitempty"`
	// NOTE: The `id` field will allow frameworks to indicate that they wish to
	// receive feedback about an operation. Since this feature is not yet
	// implemented, the `id` field should NOT be set at present. See MESOS-8054.
	Id               *OperationID                   `protobuf:"bytes,12,opt,name=id" json:"id,omitempty"`
	Launch           *Offer_Operation_Launch        `protobuf:"bytes,2,opt,name=launch" json:"launch,omitempty"`
	LaunchGroup      *Offer_Operation_LaunchGroup   `protobuf:"bytes,7,opt,name=launch_group,json=launch_group" json:"launch_group,omitempty"`
	Reserve          *Offer_Operation_Reserve       `protobuf:"bytes,3,opt,name=reserve" json:"reserve,omitempty"`
	Unreserve        *Offer_Operation_Unreserve     `protobuf:"bytes,4,opt,name=unreserve" json:"unreserve,omitempty"`
	Create           *Offer_Operation_Create        `protobuf:"bytes,5,opt,name=create" json:"create,omitempty"`
	Destroy          *Offer_Operation_Destroy       `protobuf:"bytes,6,opt,name=destroy" json:"destroy,omitempty"`
	GrowVolume       *Offer_Operation_GrowVolume    `protobuf:"bytes,13,opt,name=grow_volume,json=grow_volume" json:"grow_volume,omitempty"`
	ShrinkVolume     *Offer_Operation_ShrinkVolume  `protobuf:"bytes,14,opt,name=shrink_volume,json=shrink_volume" json:"shrink_volume,omitempty"`
	CreateVolume     *Offer_Operation_CreateVolume  `protobuf:"bytes,8,opt,name=create_volume,json=create_volume" json:"create_volume,omitempty"`
	DestroyVolume    *Offer_Operation_DestroyVolume `protobuf:"bytes,9,opt,name=destroy_volume,json=destroy_volume" json:"destroy_volume,omitempty"`
	CreateBlock      *Offer_Operation_CreateBlock   `protobuf:"bytes,10,opt,name=create_block,json=create_block" json:"create_block,omitempty"`
	DestroyBlock     *Offer_Operation_DestroyBlock  `protobuf:"bytes,11,opt,name=destroy_block,json=destroy_block" json:"destroy_block,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *Offer_Operation) Reset()                    { *m = Offer_Operation{} }
func (m *Offer_Operation) String() string            { return proto.CompactTextString(m) }
func (*Offer_Operation) ProtoMessage()               {}
func (*Offer_Operation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41, 0} }

func (m *Offer_Operation) GetType() Offer_Operation_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Offer_Operation_UNKNOWN
}

func (m *Offer_Operation) GetId() *OperationID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Offer_Operation) GetLaunch() *Offer_Operation_Launch {
	if m != nil {
		return m.Launch
	}
	return nil
}

func (m *Offer_Operation) GetLaunchGroup() *Offer_Operation_LaunchGroup {
	if m != nil {
		return m.LaunchGroup
	}
	return nil
}

func (m *Offer_Operation) GetReserve() *Offer_Operation_Reserve {
	if m != nil {
		return m.Reserve
	}
	return nil
}

func (m *Offer_Operation) GetUnreserve() *Offer_Operation_Unreserve {
	if m != nil {
		return m.Unreserve
	}
	return nil
}

func (m *Offer_Operation) GetCreate() *Offer_Operation_Create {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *Offer_Operation) GetDestroy() *Offer_Operation_Destroy {
	if m != nil {
		return m.Destroy
	}
	return nil
}

func (m *Offer_Operation) GetGrowVolume() *Offer_Operation_GrowVolume {
	if m != nil {
		return m.GrowVolume
	}
	return nil
}

func (m *Offer_Operation) GetShrinkVolume() *Offer_Operation_ShrinkVolume {
	if m != nil {
		return m.ShrinkVolume
	}
	return nil
}

func (m *Offer_Operation) GetCreateVolume() *Offer_Operation_CreateVolume {
	if m != nil {
		return m.CreateVolume
	}
	return nil
}

func (m *Offer_Operation) GetDestroyVolume() *Offer_Operation_DestroyVolume {
	if m != nil {
		return m.DestroyVolume
	}
	return nil
}

func (m *Offer_Operation) GetCreateBlock() *Offer_Operation_CreateBlock {
	if m != nil {
		return m.CreateBlock
	}
	return nil
}

func (m *Offer_Operation) GetDestroyBlock() *Offer_Operation_DestroyBlock {
	if m != nil {
		return m.DestroyBlock
	}
	return nil
}

// TODO(vinod): Deprecate this in favor of `LaunchGroup` below.
type Offer_Operation_Launch struct {
	TaskInfos        []*TaskInfo `protobuf:"bytes,1,rep,name=task_infos,json=task_infos" json:"task_infos,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Offer_Operation_Launch) Reset()                    { *m = Offer_Operation_Launch{} }
func (m *Offer_Operation_Launch) String() string            { return proto.CompactTextString(m) }
func (*Offer_Operation_Launch) ProtoMessage()               {}
func (*Offer_Operation_Launch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41, 0, 0} }

func (m *Offer_Operation_Launch) GetTaskInfos() []*TaskInfo {
	if m != nil {
		return m.TaskInfos
	}
	return nil
}

// Unlike `Launch` above, all the tasks in a `task_group` are
// atomically delivered to an executor.
//
// `NetworkInfo` set on executor will be shared by all tasks in
// the task group.
//
// TODO(vinod): Any volumes set on executor could be used by a
// task by explicitly setting `Volume.source` in its resources.
type Offer_Operation_LaunchGroup struct {
	Executor         *ExecutorInfo  `protobuf:"bytes,1,req,name=executor" json:"executor,omitempty"`
	TaskGroup        *TaskGroupInfo `protobuf:"bytes,2,req,name=task_group,json=task_group" json:"task_group,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Offer_Operation_LaunchGroup) Reset()         { *m = Offer_Operation_LaunchGroup{} }
func (m *Offer_Operation_LaunchGroup) String() string { return proto.CompactTextString(m) }
func (*Offer_Operation_LaunchGroup) ProtoMessage()    {}
func (*Offer_Operation_LaunchGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41, 0, 1}
}

func (m *Offer_Operation_LaunchGroup) GetExecutor() *ExecutorInfo {
	if m != nil {
		return m.Executor
	}
	return nil
}

func (m *Offer_Operation_LaunchGroup) GetTaskGroup() *TaskGroupInfo {
	if m != nil {
		return m.TaskGroup
	}
	return nil
}

type Offer_Operation_Reserve struct {
	Resources        []*Resource `protobuf:"bytes,1,rep,name=resources" json:"resources,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Offer_Operation_Reserve) Reset()                    { *m = Offer_Operation_Reserve{} }
func (m *Offer_Operation_Reserve) String() string            { return proto.CompactTextString(m) }
func (*Offer_Operation_Reserve) ProtoMessage()               {}
func (*Offer_Operation_Reserve) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41, 0, 2} }

func (m *Offer_Operation_Reserve) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

type Offer_Operation_Unreserve struct {
	Resources        []*Resource `protobuf:"bytes,1,rep,name=resources" json:"resources,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Offer_Operation_Unreserve) Reset()         { *m = Offer_Operation_Unreserve{} }
func (m *Offer_Operation_Unreserve) String() string { return proto.CompactTextString(m) }
func (*Offer_Operation_Unreserve) ProtoMessage()    {}
func (*Offer_Operation_Unreserve) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41, 0, 3}
}

func (m *Offer_Operation_Unreserve) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

type Offer_Operation_Create struct {
	Volumes          []*Resource `protobuf:"bytes,1,rep,name=volumes" json:"volumes,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Offer_Operation_Create) Reset()                    { *m = Offer_Operation_Create{} }
func (m *Offer_Operation_Create) String() string            { return proto.CompactTextString(m) }
func (*Offer_Operation_Create) ProtoMessage()               {}
func (*Offer_Operation_Create) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41, 0, 4} }

func (m *Offer_Operation_Create) GetVolumes() []*Resource {
	if m != nil {
		return m.Volumes
	}
	return nil
}

type Offer_Operation_Destroy struct {
	Volumes          []*Resource `protobuf:"bytes,1,rep,name=volumes" json:"volumes,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Offer_Operation_Destroy) Reset()                    { *m = Offer_Operation_Destroy{} }
func (m *Offer_Operation_Destroy) String() string            { return proto.CompactTextString(m) }
func (*Offer_Operation_Destroy) ProtoMessage()               {}
func (*Offer_Operation_Destroy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41, 0, 5} }

func (m *Offer_Operation_Destroy) GetVolumes() []*Resource {
	if m != nil {
		return m.Volumes
	}
	return nil
}

// Grow a volume by an additional disk resource.
// NOTE: This is currently experimental and only for persistent volumes
// created on ROOT/PATH disk.
type Offer_Operation_GrowVolume struct {
	Volume           *Resource `protobuf:"bytes,1,req,name=volume" json:"volume,omitempty"`
	Addition         *Resource `protobuf:"bytes,2,req,name=addition" json:"addition,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Offer_Operation_GrowVolume) Reset()         { *m = Offer_Operation_GrowVolume{} }
func (m *Offer_Operation_GrowVolume) String() string { return proto.CompactTextString(m) }
func (*Offer_Operation_GrowVolume) ProtoMessage()    {}
func (*Offer_Operation_GrowVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41, 0, 6}
}

func (m *Offer_Operation_GrowVolume) GetVolume() *Resource {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *Offer_Operation_GrowVolume) GetAddition() *Resource {
	if m != nil {
		return m.Addition
	}
	return nil
}

// Shrink a volume by the size specified in the `subtract` field.
// NOTE: This is currently experimental and only for persistent volumes
// created on ROOT/PATH disk.
type Offer_Operation_ShrinkVolume struct {
	Volume *Resource `protobuf:"bytes,1,req,name=volume" json:"volume,omitempty"`
	// See comments in `Value.Scalar` for maximum precision supported.
	Subtract         *Value_Scalar `protobuf:"bytes,2,req,name=subtract" json:"subtract,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Offer_Operation_ShrinkVolume) Reset()         { *m = Offer_Operation_ShrinkVolume{} }
func (m *Offer_Operation_ShrinkVolume) String() string { return proto.CompactTextString(m) }
func (*Offer_Operation_ShrinkVolume) ProtoMessage()    {}
func (*Offer_Operation_ShrinkVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41, 0, 7}
}

func (m *Offer_Operation_ShrinkVolume) GetVolume() *Resource {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *Offer_Operation_ShrinkVolume) GetSubtract() *Value_Scalar {
	if m != nil {
		return m.Subtract
	}
	return nil
}

// NOTE: For the time being, this API is subject to change and the related
// feature is experimental.
type Offer_Operation_CreateVolume struct {
	Source           *Resource                      `protobuf:"bytes,1,req,name=source" json:"source,omitempty"`
	TargetType       *Resource_DiskInfo_Source_Type `protobuf:"varint,2,req,name=target_type,json=target_type,enum=mesos.v1.Resource_DiskInfo_Source_Type" json:"target_type,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *Offer_Operation_CreateVolume) Reset()         { *m = Offer_Operation_CreateVolume{} }
func (m *Offer_Operation_CreateVolume) String() string { return proto.CompactTextString(m) }
func (*Offer_Operation_CreateVolume) ProtoMessage()    {}
func (*Offer_Operation_CreateVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41, 0, 8}
}

func (m *Offer_Operation_CreateVolume) GetSource() *Resource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Offer_Operation_CreateVolume) GetTargetType() Resource_DiskInfo_Source_Type {
	if m != nil && m.TargetType != nil {
		return *m.TargetType
	}
	return Resource_DiskInfo_Source_UNKNOWN
}

// NOTE: For the time being, this API is subject to change and the related
// feature is experimental.
type Offer_Operation_DestroyVolume struct {
	Volume           *Resource `protobuf:"bytes,1,req,name=volume" json:"volume,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Offer_Operation_DestroyVolume) Reset()         { *m = Offer_Operation_DestroyVolume{} }
func (m *Offer_Operation_DestroyVolume) String() string { return proto.CompactTextString(m) }
func (*Offer_Operation_DestroyVolume) ProtoMessage()    {}
func (*Offer_Operation_DestroyVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41, 0, 9}
}

func (m *Offer_Operation_DestroyVolume) GetVolume() *Resource {
	if m != nil {
		return m.Volume
	}
	return nil
}

// NOTE: For the time being, this API is subject to change and the related
// feature is experimental.
type Offer_Operation_CreateBlock struct {
	Source           *Resource `protobuf:"bytes,1,req,name=source" json:"source,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Offer_Operation_CreateBlock) Reset()         { *m = Offer_Operation_CreateBlock{} }
func (m *Offer_Operation_CreateBlock) String() string { return proto.CompactTextString(m) }
func (*Offer_Operation_CreateBlock) ProtoMessage()    {}
func (*Offer_Operation_CreateBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41, 0, 10}
}

func (m *Offer_Operation_CreateBlock) GetSource() *Resource {
	if m != nil {
		return m.Source
	}
	return nil
}

// NOTE: For the time being, this API is subject to change and the related
// feature is experimental.
type Offer_Operation_DestroyBlock struct {
	Block            *Resource `protobuf:"bytes,1,req,name=block" json:"block,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Offer_Operation_DestroyBlock) Reset()         { *m = Offer_Operation_DestroyBlock{} }
func (m *Offer_Operation_DestroyBlock) String() string { return proto.CompactTextString(m) }
func (*Offer_Operation_DestroyBlock) ProtoMessage()    {}
func (*Offer_Operation_DestroyBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41, 0, 11}
}

func (m *Offer_Operation_DestroyBlock) GetBlock() *Resource {
	if m != nil {
		return m.Block
	}
	return nil
}

// *
// A request to return some resources occupied by a framework.
type InverseOffer struct {
	// This is the same OfferID as found in normal offers, which allows
	// re-use of some of the OfferID-only messages.
	Id *OfferID `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// URL for reaching the agent running on the host.  This enables some
	// optimizations as described in MESOS-3012, such as allowing the
	// scheduler driver to bypass the master and talk directly with an agent.
	Url *URL `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	// The framework that should release its resources.
	// If no specifics are provided (i.e. which agent), all the framework's
	// resources are requested back.
	FrameworkId *FrameworkID `protobuf:"bytes,3,req,name=framework_id,json=framework_id" json:"framework_id,omitempty"`
	// Specified if the resources need to be released from a particular agent.
	// All the framework's resources on this agent are requested back,
	// unless further qualified by the `resources` field.
	AgentId *AgentID `protobuf:"bytes,4,opt,name=agent_id,json=agent_id" json:"agent_id,omitempty"`
	// This InverseOffer represents a planned unavailability event in the
	// specified interval.  Any tasks running on the given framework or agent
	// may be killed when the interval arrives.  Therefore, frameworks should
	// aim to gracefully terminate tasks prior to the arrival of the interval.
	//
	// For reserved resources, the resources are expected to be returned to the
	// framework after the unavailability interval.  This is an expectation,
	// not a guarantee.  For example, if the unavailability duration is not set,
	// the resources may be removed permanently.
	//
	// For other resources, there is no guarantee that requested resources will
	// be returned after the unavailability interval.  The allocator has no
	// obligation to re-offer these resources to the prior framework after
	// the unavailability.
	Unavailability *Unavailability `protobuf:"bytes,5,req,name=unavailability" json:"unavailability,omitempty"`
	// A list of resources being requested back from the framework,
	// on the agent identified by `agent_id`.  If no resources are specified
	// then all resources are being requested back.  For the purpose of
	// maintenance, this field is always empty (maintenance always requests
	// all resources back).
	Resources        []*Resource `protobuf:"bytes,6,rep,name=resources" json:"resources,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *InverseOffer) Reset()                    { *m = InverseOffer{} }
func (m *InverseOffer) String() string            { return proto.CompactTextString(m) }
func (*InverseOffer) ProtoMessage()               {}
func (*InverseOffer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *InverseOffer) GetId() *OfferID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *InverseOffer) GetUrl() *URL {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *InverseOffer) GetFrameworkId() *FrameworkID {
	if m != nil {
		return m.FrameworkId
	}
	return nil
}

func (m *InverseOffer) GetAgentId() *AgentID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

func (m *InverseOffer) GetUnavailability() *Unavailability {
	if m != nil {
		return m.Unavailability
	}
	return nil
}

func (m *InverseOffer) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

// *
// Describes a task. Passed from the scheduler all the way to an
// executor (see SchedulerDriver::launchTasks and
// Executor::launchTask). Either ExecutorInfo or CommandInfo should be set.
// A different executor can be used to launch this task, and subsequent tasks
// meant for the same executor can reuse the same ExecutorInfo struct.
type TaskInfo struct {
	Name      *string       `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	TaskId    *TaskID       `protobuf:"bytes,2,req,name=task_id,json=task_id" json:"task_id,omitempty"`
	AgentId   *AgentID      `protobuf:"bytes,3,req,name=agent_id,json=agent_id" json:"agent_id,omitempty"`
	Resources []*Resource   `protobuf:"bytes,4,rep,name=resources" json:"resources,omitempty"`
	Executor  *ExecutorInfo `protobuf:"bytes,5,opt,name=executor" json:"executor,omitempty"`
	Command   *CommandInfo  `protobuf:"bytes,7,opt,name=command" json:"command,omitempty"`
	// Task provided with a container will launch the container as part
	// of this task paired with the task's CommandInfo.
	Container *ContainerInfo `protobuf:"bytes,9,opt,name=container" json:"container,omitempty"`
	// A health check for the task. Implemented for executor-less
	// command-based tasks. For tasks that specify an executor, it is
	// the executor's responsibility to implement the health checking.
	HealthCheck *HealthCheck `protobuf:"bytes,8,opt,name=health_check,json=health_check" json:"health_check,omitempty"`
	// A general check for the task. Implemented for all built-in executors.
	// For tasks that specify an executor, it is the executor's responsibility
	// to implement checking support. Executors should (all built-in executors
	// will) neither interpret nor act on the check's result.
	//
	// NOTE: Check support in built-in executors is experimental.
	//
	// TODO(alexr): Consider supporting multiple checks per task.
	Check *CheckInfo `protobuf:"bytes,13,opt,name=check" json:"check,omitempty"`
	// A kill policy for the task. Implemented for executor-less
	// command-based and docker tasks. For tasks that specify an
	// executor, it is the executor's responsibility to implement
	// the kill policy.
	KillPolicy *KillPolicy `protobuf:"bytes,12,opt,name=kill_policy,json=kill_policy" json:"kill_policy,omitempty"`
	Data       []byte      `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	// Labels are free-form key value pairs which are exposed through
	// master and agent endpoints. Labels will not be interpreted or
	// acted upon by Mesos itself. As opposed to the data field, labels
	// will be kept in memory on master and agent processes. Therefore,
	// labels should be used to tag tasks with light-weight meta-data.
	// Labels should not contain duplicate key-value pairs.
	Labels *Labels `protobuf:"bytes,10,opt,name=labels" json:"labels,omitempty"`
	// Service discovery information for the task. It is not interpreted
	// or acted upon by Mesos. It is up to a service discovery system
	// to use this information as needed and to handle tasks without
	// service discovery information.
	Discovery *DiscoveryInfo `protobuf:"bytes,11,opt,name=discovery" json:"discovery,omitempty"`
	// Maximum duration for task completion. If the task is non-terminal at the
	// end of this duration, it will fail with the reason
	// `REASON_MAX_COMPLETION_TIME_REACHED`. Mesos supports this field for
	// executor-less tasks, and tasks that use Docker or default executors.
	// It is the executor's responsibility to implement this, so it might not be
	// supported by all custom executors.
	MaxCompletionTime *DurationInfo `protobuf:"bytes,14,opt,name=max_completion_time,json=max_completion_time" json:"max_completion_time,omitempty"`
	XXX_unrecognized  []byte        `json:"-"`
}

func (m *TaskInfo) Reset()                    { *m = TaskInfo{} }
func (m *TaskInfo) String() string            { return proto.CompactTextString(m) }
func (*TaskInfo) ProtoMessage()               {}
func (*TaskInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *TaskInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TaskInfo) GetTaskId() *TaskID {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *TaskInfo) GetAgentId() *AgentID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

func (m *TaskInfo) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *TaskInfo) GetExecutor() *ExecutorInfo {
	if m != nil {
		return m.Executor
	}
	return nil
}

func (m *TaskInfo) GetCommand() *CommandInfo {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *TaskInfo) GetContainer() *ContainerInfo {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *TaskInfo) GetHealthCheck() *HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *TaskInfo) GetCheck() *CheckInfo {
	if m != nil {
		return m.Check
	}
	return nil
}

func (m *TaskInfo) GetKillPolicy() *KillPolicy {
	if m != nil {
		return m.KillPolicy
	}
	return nil
}

func (m *TaskInfo) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TaskInfo) GetLabels() *Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *TaskInfo) GetDiscovery() *DiscoveryInfo {
	if m != nil {
		return m.Discovery
	}
	return nil
}

func (m *TaskInfo) GetMaxCompletionTime() *DurationInfo {
	if m != nil {
		return m.MaxCompletionTime
	}
	return nil
}

// *
// Describes a group of tasks that belong to an executor. The
// executor will receive the task group in a single message to
// allow the group to be launched "atomically".
//
// NOTES:
// 1) `NetworkInfo` must not be set inside task's `ContainerInfo`.
// 2) `TaskInfo.executor` doesn't need to set. If set, it should match
//    `LaunchGroup.executor`.
type TaskGroupInfo struct {
	Tasks            []*TaskInfo `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *TaskGroupInfo) Reset()                    { *m = TaskGroupInfo{} }
func (m *TaskGroupInfo) String() string            { return proto.CompactTextString(m) }
func (*TaskGroupInfo) ProtoMessage()               {}
func (*TaskGroupInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *TaskGroupInfo) GetTasks() []*TaskInfo {
	if m != nil {
		return m.Tasks
	}
	return nil
}

// *
// Describes a task, similar to `TaskInfo`.
//
// `Task` is used in some of the Mesos messages found below.
// `Task` is used instead of `TaskInfo` if:
//   1) we need additional IDs, such as a specific
//      framework, executor, or agent; or
//   2) we do not need the additional data, such as the command run by the
//      task or the health checks.  These additional fields may be large and
//      unnecessary for some Mesos messages.
//
// `Task` is generally constructed from a `TaskInfo`.  See protobuf::createTask.
type Task struct {
	Name        *string       `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	TaskId      *TaskID       `protobuf:"bytes,2,req,name=task_id,json=task_id" json:"task_id,omitempty"`
	FrameworkId *FrameworkID  `protobuf:"bytes,3,req,name=framework_id,json=framework_id" json:"framework_id,omitempty"`
	ExecutorId  *ExecutorID   `protobuf:"bytes,4,opt,name=executor_id,json=executor_id" json:"executor_id,omitempty"`
	AgentId     *AgentID      `protobuf:"bytes,5,req,name=agent_id,json=agent_id" json:"agent_id,omitempty"`
	State       *TaskState    `protobuf:"varint,6,req,name=state,enum=mesos.v1.TaskState" json:"state,omitempty"`
	Resources   []*Resource   `protobuf:"bytes,7,rep,name=resources" json:"resources,omitempty"`
	Statuses    []*TaskStatus `protobuf:"bytes,8,rep,name=statuses" json:"statuses,omitempty"`
	// These fields correspond to the state and uuid of the latest
	// status update forwarded to the master.
	// NOTE: Either both the fields must be set or both must be unset.
	StatusUpdateState *TaskState `protobuf:"varint,9,opt,name=status_update_state,json=status_update_state,enum=mesos.v1.TaskState" json:"status_update_state,omitempty"`
	StatusUpdateUuid  []byte     `protobuf:"bytes,10,opt,name=status_update_uuid,json=status_update_uuid" json:"status_update_uuid,omitempty"`
	Labels            *Labels    `protobuf:"bytes,11,opt,name=labels" json:"labels,omitempty"`
	// Service discovery information for the task. It is not interpreted
	// or acted upon by Mesos. It is up to a service discovery system
	// to use this information as needed and to handle tasks without
	// service discovery information.
	Discovery *DiscoveryInfo `protobuf:"bytes,12,opt,name=discovery" json:"discovery,omitempty"`
	// Container information for the task.
	Container *ContainerInfo `protobuf:"bytes,13,opt,name=container" json:"container,omitempty"`
	// Specific user under which task is running.
	User             *string `protobuf:"bytes,14,opt,name=user" json:"user,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *Task) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Task) GetTaskId() *TaskID {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *Task) GetFrameworkId() *FrameworkID {
	if m != nil {
		return m.FrameworkId
	}
	return nil
}

func (m *Task) GetExecutorId() *ExecutorID {
	if m != nil {
		return m.ExecutorId
	}
	return nil
}

func (m *Task) GetAgentId() *AgentID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

func (m *Task) GetState() TaskState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return TaskState_TASK_STAGING
}

func (m *Task) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Task) GetStatuses() []*TaskStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func (m *Task) GetStatusUpdateState() TaskState {
	if m != nil && m.StatusUpdateState != nil {
		return *m.StatusUpdateState
	}
	return TaskState_TASK_STAGING
}

func (m *Task) GetStatusUpdateUuid() []byte {
	if m != nil {
		return m.StatusUpdateUuid
	}
	return nil
}

func (m *Task) GetLabels() *Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Task) GetDiscovery() *DiscoveryInfo {
	if m != nil {
		return m.Discovery
	}
	return nil
}

func (m *Task) GetContainer() *ContainerInfo {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *Task) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

// *
// Describes a resource limitation that caused a task failure.
type TaskResourceLimitation struct {
	// This field contains the resource whose limits were violated.
	//
	// NOTE: 'Resources' is used here because the resource may span
	// multiple roles (e.g. `"mem(*):1;mem(role):2"`).
	Resources        []*Resource `protobuf:"bytes,1,rep,name=resources" json:"resources,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *TaskResourceLimitation) Reset()                    { *m = TaskResourceLimitation{} }
func (m *TaskResourceLimitation) String() string            { return proto.CompactTextString(m) }
func (*TaskResourceLimitation) ProtoMessage()               {}
func (*TaskResourceLimitation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *TaskResourceLimitation) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

// *
// Describes a UUID.
type UUID struct {
	Value            []byte `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UUID) Reset()                    { *m = UUID{} }
func (m *UUID) String() string            { return proto.CompactTextString(m) }
func (*UUID) ProtoMessage()               {}
func (*UUID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *UUID) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// *
// Describes an operation, similar to `Offer.Operation`, with
// some additional information.
type Operation struct {
	FrameworkId  *FrameworkID     `protobuf:"bytes,1,opt,name=framework_id,json=framework_id" json:"framework_id,omitempty"`
	AgentId      *AgentID         `protobuf:"bytes,2,opt,name=agent_id,json=agent_id" json:"agent_id,omitempty"`
	Info         *Offer_Operation `protobuf:"bytes,3,req,name=info" json:"info,omitempty"`
	LatestStatus *OperationStatus `protobuf:"bytes,4,req,name=latest_status,json=latest_status" json:"latest_status,omitempty"`
	// All the statuses known to this operation. Some of the statuses in this
	// list might not have been acknowledged yet. The statuses are ordered.
	Statuses []*OperationStatus `protobuf:"bytes,5,rep,name=statuses" json:"statuses,omitempty"`
	// This is the internal UUID for the operation, which is kept independently
	// from the framework-specified operation ID, which is optional.
	Uuid             *UUID  `protobuf:"bytes,6,req,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Operation) Reset()                    { *m = Operation{} }
func (m *Operation) String() string            { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()               {}
func (*Operation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *Operation) GetFrameworkId() *FrameworkID {
	if m != nil {
		return m.FrameworkId
	}
	return nil
}

func (m *Operation) GetAgentId() *AgentID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

func (m *Operation) GetInfo() *Offer_Operation {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Operation) GetLatestStatus() *OperationStatus {
	if m != nil {
		return m.LatestStatus
	}
	return nil
}

func (m *Operation) GetStatuses() []*OperationStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func (m *Operation) GetUuid() *UUID {
	if m != nil {
		return m.Uuid
	}
	return nil
}

// *
// Describes the current status of an operation.
type OperationStatus struct {
	// While frameworks will only receive status updates for operations on which
	// they have set an ID, this field is optional because this message is also
	// used internally by Mesos components when the operation's ID has not been
	// set.
	OperationId *OperationID    `protobuf:"bytes,1,opt,name=operation_id,json=operation_id" json:"operation_id,omitempty"`
	State       *OperationState `protobuf:"varint,2,req,name=state,enum=mesos.v1.OperationState" json:"state,omitempty"`
	Message     *string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	// Converted resources after applying the operation. This only
	// applies if the `state` is `OPERATION_FINISHED`.
	ConvertedResources []*Resource `protobuf:"bytes,4,rep,name=converted_resources,json=converted_resources" json:"converted_resources,omitempty"`
	// Statuses that are delivered reliably to the scheduler will
	// include a `uuid`. The status is considered delivered once
	// it is acknowledged by the scheduler.
	Uuid             *UUID  `protobuf:"bytes,5,opt,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OperationStatus) Reset()                    { *m = OperationStatus{} }
func (m *OperationStatus) String() string            { return proto.CompactTextString(m) }
func (*OperationStatus) ProtoMessage()               {}
func (*OperationStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *OperationStatus) GetOperationId() *OperationID {
	if m != nil {
		return m.OperationId
	}
	return nil
}

func (m *OperationStatus) GetState() OperationState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return OperationState_OPERATION_UNSUPPORTED
}

func (m *OperationStatus) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *OperationStatus) GetConvertedResources() []*Resource {
	if m != nil {
		return m.ConvertedResources
	}
	return nil
}

func (m *OperationStatus) GetUuid() *UUID {
	if m != nil {
		return m.Uuid
	}
	return nil
}

// *
// Describes the status of a check. Type and the corresponding field, i.e.,
// `command` or `http` must be set. If the result of the check is not available
// (e.g., the check timed out), these fields must contain empty messages, i.e.,
// `exit_code` or `status_code` will be unset.
//
// NOTE: This API is subject to change and the related feature is experimental.
type CheckStatusInfo struct {
	// The type of the check this status corresponds to.
	Type *CheckInfo_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.CheckInfo_Type" json:"type,omitempty"`
	// Status of a command check.
	Command *CheckStatusInfo_Command `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	// Status of an HTTP check.
	Http *CheckStatusInfo_Http `protobuf:"bytes,3,opt,name=http" json:"http,omitempty"`
	// Status of a TCP check.
	Tcp              *CheckStatusInfo_Tcp `protobuf:"bytes,4,opt,name=tcp" json:"tcp,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *CheckStatusInfo) Reset()                    { *m = CheckStatusInfo{} }
func (m *CheckStatusInfo) String() string            { return proto.CompactTextString(m) }
func (*CheckStatusInfo) ProtoMessage()               {}
func (*CheckStatusInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *CheckStatusInfo) GetType() CheckInfo_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CheckInfo_UNKNOWN
}

func (m *CheckStatusInfo) GetCommand() *CheckStatusInfo_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *CheckStatusInfo) GetHttp() *CheckStatusInfo_Http {
	if m != nil {
		return m.Http
	}
	return nil
}

func (m *CheckStatusInfo) GetTcp() *CheckStatusInfo_Tcp {
	if m != nil {
		return m.Tcp
	}
	return nil
}

type CheckStatusInfo_Command struct {
	// Exit code of a command check. It is the result of calling
	// `WEXITSTATUS()` on `waitpid()` termination information on
	// Posix and calling `GetExitCodeProcess()` on Windows.
	ExitCode         *int32 `protobuf:"varint,1,opt,name=exit_code,json=exit_code" json:"exit_code,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CheckStatusInfo_Command) Reset()                    { *m = CheckStatusInfo_Command{} }
func (m *CheckStatusInfo_Command) String() string            { return proto.CompactTextString(m) }
func (*CheckStatusInfo_Command) ProtoMessage()               {}
func (*CheckStatusInfo_Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50, 0} }

func (m *CheckStatusInfo_Command) GetExitCode() int32 {
	if m != nil && m.ExitCode != nil {
		return *m.ExitCode
	}
	return 0
}

type CheckStatusInfo_Http struct {
	// HTTP status code of an HTTP check.
	StatusCode       *uint32 `protobuf:"varint,1,opt,name=status_code,json=status_code" json:"status_code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CheckStatusInfo_Http) Reset()                    { *m = CheckStatusInfo_Http{} }
func (m *CheckStatusInfo_Http) String() string            { return proto.CompactTextString(m) }
func (*CheckStatusInfo_Http) ProtoMessage()               {}
func (*CheckStatusInfo_Http) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50, 1} }

func (m *CheckStatusInfo_Http) GetStatusCode() uint32 {
	if m != nil && m.StatusCode != nil {
		return *m.StatusCode
	}
	return 0
}

type CheckStatusInfo_Tcp struct {
	// Whether a TCP connection succeeded.
	Succeeded        *bool  `protobuf:"varint,1,opt,name=succeeded" json:"succeeded,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CheckStatusInfo_Tcp) Reset()                    { *m = CheckStatusInfo_Tcp{} }
func (m *CheckStatusInfo_Tcp) String() string            { return proto.CompactTextString(m) }
func (*CheckStatusInfo_Tcp) ProtoMessage()               {}
func (*CheckStatusInfo_Tcp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50, 2} }

func (m *CheckStatusInfo_Tcp) GetSucceeded() bool {
	if m != nil && m.Succeeded != nil {
		return *m.Succeeded
	}
	return false
}

// *
// Describes the current status of a task.
type TaskStatus struct {
	TaskId     *TaskID            `protobuf:"bytes,1,req,name=task_id,json=task_id" json:"task_id,omitempty"`
	State      *TaskState         `protobuf:"varint,2,req,name=state,enum=mesos.v1.TaskState" json:"state,omitempty"`
	Message    *string            `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Source     *TaskStatus_Source `protobuf:"varint,9,opt,name=source,enum=mesos.v1.TaskStatus_Source" json:"source,omitempty"`
	Reason     *TaskStatus_Reason `protobuf:"varint,10,opt,name=reason,enum=mesos.v1.TaskStatus_Reason" json:"reason,omitempty"`
	Data       []byte             `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	AgentId    *AgentID           `protobuf:"bytes,5,opt,name=agent_id,json=agent_id" json:"agent_id,omitempty"`
	ExecutorId *ExecutorID        `protobuf:"bytes,7,opt,name=executor_id,json=executor_id" json:"executor_id,omitempty"`
	Timestamp  *float64           `protobuf:"fixed64,6,opt,name=timestamp" json:"timestamp,omitempty"`
	// Statuses that are delivered reliably to the scheduler will
	// include a 'uuid'. The status is considered delivered once
	// it is acknowledged by the scheduler. Schedulers can choose
	// to either explicitly acknowledge statuses or let the scheduler
	// driver implicitly acknowledge (default).
	//
	// TODO(bmahler): This is currently overwritten in the scheduler
	// driver and executor driver, but executors will need to set this
	// to a valid RFC-4122 UUID if using the HTTP API.
	Uuid []byte `protobuf:"bytes,11,opt,name=uuid" json:"uuid,omitempty"`
	// Describes whether the task has been determined to be healthy (true) or
	// unhealthy (false) according to the `health_check` field in `TaskInfo`.
	Healthy *bool `protobuf:"varint,8,opt,name=healthy" json:"healthy,omitempty"`
	// Contains check status for the check specified in the corresponding
	// `TaskInfo`. If no check has been specified, this field must be
	// absent, otherwise it must be present even if the check status is
	// not available yet. If the status update is triggered for a different
	// reason than `REASON_TASK_CHECK_STATUS_UPDATED`, this field will contain
	// the last known value.
	//
	// NOTE: A check-related task status update is triggered if and only if
	// the value or presence of any field in `CheckStatusInfo` changes.
	//
	// NOTE: Check support in built-in executors is experimental.
	CheckStatus *CheckStatusInfo `protobuf:"bytes,15,opt,name=check_status,json=check_status" json:"check_status,omitempty"`
	// Labels are free-form key value pairs which are exposed through
	// master and agent endpoints. Labels will not be interpreted or
	// acted upon by Mesos itself. As opposed to the data field, labels
	// will be kept in memory on master and agent processes. Therefore,
	// labels should be used to tag TaskStatus message with light-weight
	// meta-data. Labels should not contain duplicate key-value pairs.
	Labels *Labels `protobuf:"bytes,12,opt,name=labels" json:"labels,omitempty"`
	// Container related information that is resolved dynamically such as
	// network address.
	ContainerStatus *ContainerStatus `protobuf:"bytes,13,opt,name=container_status,json=container_status" json:"container_status,omitempty"`
	// The time (according to the master's clock) when the agent where
	// this task was running became unreachable. This is only set on
	// status updates for tasks running on agents that are unreachable
	// (e.g., partitioned away from the master).
	UnreachableTime *TimeInfo `protobuf:"bytes,14,opt,name=unreachable_time,json=unreachable_time" json:"unreachable_time,omitempty"`
	// If the reason field indicates a container resource limitation,
	// this field optionally contains additional information.
	Limitation       *TaskResourceLimitation `protobuf:"bytes,16,opt,name=limitation" json:"limitation,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *TaskStatus) Reset()                    { *m = TaskStatus{} }
func (m *TaskStatus) String() string            { return proto.CompactTextString(m) }
func (*TaskStatus) ProtoMessage()               {}
func (*TaskStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *TaskStatus) GetTaskId() *TaskID {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *TaskStatus) GetState() TaskState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return TaskState_TASK_STAGING
}

func (m *TaskStatus) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *TaskStatus) GetSource() TaskStatus_Source {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return TaskStatus_SOURCE_MASTER
}

func (m *TaskStatus) GetReason() TaskStatus_Reason {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return TaskStatus_REASON_COMMAND_EXECUTOR_FAILED
}

func (m *TaskStatus) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TaskStatus) GetAgentId() *AgentID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

func (m *TaskStatus) GetExecutorId() *ExecutorID {
	if m != nil {
		return m.ExecutorId
	}
	return nil
}

func (m *TaskStatus) GetTimestamp() float64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *TaskStatus) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *TaskStatus) GetHealthy() bool {
	if m != nil && m.Healthy != nil {
		return *m.Healthy
	}
	return false
}

func (m *TaskStatus) GetCheckStatus() *CheckStatusInfo {
	if m != nil {
		return m.CheckStatus
	}
	return nil
}

func (m *TaskStatus) GetLabels() *Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *TaskStatus) GetContainerStatus() *ContainerStatus {
	if m != nil {
		return m.ContainerStatus
	}
	return nil
}

func (m *TaskStatus) GetUnreachableTime() *TimeInfo {
	if m != nil {
		return m.UnreachableTime
	}
	return nil
}

func (m *TaskStatus) GetLimitation() *TaskResourceLimitation {
	if m != nil {
		return m.Limitation
	}
	return nil
}

// *
// Describes possible filters that can be applied to unused resources
// (see SchedulerDriver::launchTasks) to influence the allocator.
type Filters struct {
	// Time to consider unused resources refused. Note that all unused
	// resources will be considered refused and use the default value
	// (below) regardless of whether Filters was passed to
	// SchedulerDriver::launchTasks. You MUST pass Filters with this
	// field set to change this behavior (i.e., get another offer which
	// includes unused resources sooner or later than the default).
	//
	// If this field is set to a number of seconds greater than 31536000
	// (365 days), then the resources will be considered refused for 365
	// days. If it is set to a negative number, then the default value
	// will be used.
	RefuseSeconds    *float64 `protobuf:"fixed64,1,opt,name=refuse_seconds,json=refuse_seconds,def=5" json:"refuse_seconds,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Filters) Reset()                    { *m = Filters{} }
func (m *Filters) String() string            { return proto.CompactTextString(m) }
func (*Filters) ProtoMessage()               {}
func (*Filters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

const Default_Filters_RefuseSeconds float64 = 5

func (m *Filters) GetRefuseSeconds() float64 {
	if m != nil && m.RefuseSeconds != nil {
		return *m.RefuseSeconds
	}
	return Default_Filters_RefuseSeconds
}

// *
// Describes a collection of environment variables. This is used with
// CommandInfo in order to set environment variables before running a
// command. The contents of each variable may be specified as a string
// or a Secret; only one of `value` and `secret` must be set.
type Environment struct {
	Variables        []*Environment_Variable `protobuf:"bytes,1,rep,name=variables" json:"variables,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *Environment) Reset()                    { *m = Environment{} }
func (m *Environment) String() string            { return proto.CompactTextString(m) }
func (*Environment) ProtoMessage()               {}
func (*Environment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *Environment) GetVariables() []*Environment_Variable {
	if m != nil {
		return m.Variables
	}
	return nil
}

type Environment_Variable struct {
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// In Mesos 1.2, the `Environment.variables.value` message was made
	// optional. The default type for `Environment.variables.type` is now VALUE,
	// which requires `value` to be set, maintaining backward compatibility.
	//
	// TODO(greggomann): The default can be removed in Mesos 2.1 (MESOS-7134).
	Type *Environment_Variable_Type `protobuf:"varint,3,opt,name=type,enum=mesos.v1.Environment_Variable_Type,def=1" json:"type,omitempty"`
	// Only one of `value` and `secret` must be set.
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Secret           *Secret `protobuf:"bytes,4,opt,name=secret" json:"secret,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Environment_Variable) Reset()                    { *m = Environment_Variable{} }
func (m *Environment_Variable) String() string            { return proto.CompactTextString(m) }
func (*Environment_Variable) ProtoMessage()               {}
func (*Environment_Variable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53, 0} }

const Default_Environment_Variable_Type Environment_Variable_Type = Environment_Variable_VALUE

func (m *Environment_Variable) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Environment_Variable) GetType() Environment_Variable_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_Environment_Variable_Type
}

func (m *Environment_Variable) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *Environment_Variable) GetSecret() *Secret {
	if m != nil {
		return m.Secret
	}
	return nil
}

// *
// A generic (key, value) pair used in various places for parameters.
type Parameter struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Parameter) Reset()                    { *m = Parameter{} }
func (m *Parameter) String() string            { return proto.CompactTextString(m) }
func (*Parameter) ProtoMessage()               {}
func (*Parameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *Parameter) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Parameter) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// *
// Collection of Parameter.
type Parameters struct {
	Parameter        []*Parameter `protobuf:"bytes,1,rep,name=parameter" json:"parameter,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *Parameters) GetParameter() []*Parameter {
	if m != nil {
		return m.Parameter
	}
	return nil
}

// *
// Credential used in various places for authentication and
// authorization.
//
// NOTE: A 'principal' is different from 'FrameworkInfo.user'. The
// former is used for authentication and authorization while the
// latter is used to determine the default user under which the
// framework's executors/tasks are run.
type Credential struct {
	Principal        *string `protobuf:"bytes,1,req,name=principal" json:"principal,omitempty"`
	Secret           *string `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Credential) Reset()                    { *m = Credential{} }
func (m *Credential) String() string            { return proto.CompactTextString(m) }
func (*Credential) ProtoMessage()               {}
func (*Credential) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *Credential) GetPrincipal() string {
	if m != nil && m.Principal != nil {
		return *m.Principal
	}
	return ""
}

func (m *Credential) GetSecret() string {
	if m != nil && m.Secret != nil {
		return *m.Secret
	}
	return ""
}

// *
// Credentials used for framework authentication, HTTP authentication
// (where the common 'username' and 'password' are captured as
// 'principal' and 'secret' respectively), etc.
type Credentials struct {
	Credentials      []*Credential `protobuf:"bytes,1,rep,name=credentials" json:"credentials,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Credentials) Reset()                    { *m = Credentials{} }
func (m *Credentials) String() string            { return proto.CompactTextString(m) }
func (*Credentials) ProtoMessage()               {}
func (*Credentials) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *Credentials) GetCredentials() []*Credential {
	if m != nil {
		return m.Credentials
	}
	return nil
}

// *
// Secret used to pass privileged information. It is designed to provide
// pass-by-value or pass-by-reference semantics, where the REFERENCE type can be
// used by custom modules which interact with a secure back-end.
type Secret struct {
	Type *Secret_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.Secret_Type" json:"type,omitempty"`
	// Only one of `reference` and `value` must be set.
	Reference        *Secret_Reference `protobuf:"bytes,2,opt,name=reference" json:"reference,omitempty"`
	Value            *Secret_Value     `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Secret) Reset()                    { *m = Secret{} }
func (m *Secret) String() string            { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()               {}
func (*Secret) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *Secret) GetType() Secret_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Secret_UNKNOWN
}

func (m *Secret) GetReference() *Secret_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *Secret) GetValue() *Secret_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

// Can be used by modules to refer to a secret stored in a secure back-end.
// The `key` field is provided to permit reference to a single value within a
// secret containing arbitrary key-value pairs.
//
// For example, given a back-end secret store with a secret named
// "my-secret" containing the following key-value pairs:
//
//   {
//     "username": "my-user",
//     "password": "my-password
//   }
//
// the username could be referred to in a `Secret` by specifying
// "my-secret" for the `name` and "username" for the `key`.
type Secret_Reference struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Key              *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Secret_Reference) Reset()                    { *m = Secret_Reference{} }
func (m *Secret_Reference) String() string            { return proto.CompactTextString(m) }
func (*Secret_Reference) ProtoMessage()               {}
func (*Secret_Reference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58, 0} }

func (m *Secret_Reference) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Secret_Reference) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

// Used to pass the value of a secret.
type Secret_Value struct {
	Data             []byte `protobuf:"bytes,1,req,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Secret_Value) Reset()                    { *m = Secret_Value{} }
func (m *Secret_Value) String() string            { return proto.CompactTextString(m) }
func (*Secret_Value) ProtoMessage()               {}
func (*Secret_Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58, 1} }

func (m *Secret_Value) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// *
// Rate (queries per second, QPS) limit for messages from a framework to master.
// Strictly speaking they are the combined rate from all frameworks of the same
// principal.
type RateLimit struct {
	// Leaving QPS unset gives it unlimited rate (i.e., not throttled),
	// which also implies unlimited capacity.
	Qps *float64 `protobuf:"fixed64,1,opt,name=qps" json:"qps,omitempty"`
	// Principal of framework(s) to be throttled. Should match
	// FrameworkInfo.principal and Credential.principal (if using authentication).
	Principal *string `protobuf:"bytes,2,req,name=principal" json:"principal,omitempty"`
	// Max number of outstanding messages from frameworks of this principal
	// allowed by master before the next message is dropped and an error is sent
	// back to the sender. Messages received before the capacity is reached are
	// still going to be processed after the error is sent.
	// If unspecified, this principal is assigned unlimited capacity.
	// NOTE: This value is ignored if 'qps' is not set.
	Capacity         *uint64 `protobuf:"varint,3,opt,name=capacity" json:"capacity,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RateLimit) Reset()                    { *m = RateLimit{} }
func (m *RateLimit) String() string            { return proto.CompactTextString(m) }
func (*RateLimit) ProtoMessage()               {}
func (*RateLimit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *RateLimit) GetQps() float64 {
	if m != nil && m.Qps != nil {
		return *m.Qps
	}
	return 0
}

func (m *RateLimit) GetPrincipal() string {
	if m != nil && m.Principal != nil {
		return *m.Principal
	}
	return ""
}

func (m *RateLimit) GetCapacity() uint64 {
	if m != nil && m.Capacity != nil {
		return *m.Capacity
	}
	return 0
}

// *
// Collection of RateLimit.
// Frameworks without rate limits defined here are not throttled unless
// 'aggregate_default_qps' is specified.
type RateLimits struct {
	// Items should have unique principals.
	Limits []*RateLimit `protobuf:"bytes,1,rep,name=limits" json:"limits,omitempty"`
	// All the frameworks not specified in 'limits' get this default rate.
	// This rate is an aggregate rate for all of them, i.e., their combined
	// traffic is throttled together at this rate.
	AggregateDefaultQps *float64 `protobuf:"fixed64,2,opt,name=aggregate_default_qps,json=aggregate_default_qps" json:"aggregate_default_qps,omitempty"`
	// All the frameworks not specified in 'limits' get this default capacity.
	// This is an aggregate value similar to 'aggregate_default_qps'.
	AggregateDefaultCapacity *uint64 `protobuf:"varint,3,opt,name=aggregate_default_capacity,json=aggregate_default_capacity" json:"aggregate_default_capacity,omitempty"`
	XXX_unrecognized         []byte  `json:"-"`
}

func (m *RateLimits) Reset()                    { *m = RateLimits{} }
func (m *RateLimits) String() string            { return proto.CompactTextString(m) }
func (*RateLimits) ProtoMessage()               {}
func (*RateLimits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *RateLimits) GetLimits() []*RateLimit {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *RateLimits) GetAggregateDefaultQps() float64 {
	if m != nil && m.AggregateDefaultQps != nil {
		return *m.AggregateDefaultQps
	}
	return 0
}

func (m *RateLimits) GetAggregateDefaultCapacity() uint64 {
	if m != nil && m.AggregateDefaultCapacity != nil {
		return *m.AggregateDefaultCapacity
	}
	return 0
}

// *
// Describe an image used by tasks or executors. Note that it's only
// for tasks or executors launched by MesosContainerizer currently.
type Image struct {
	Type *Image_Type `protobuf:"varint,1,req,name=type,enum=mesos.v1.Image_Type" json:"type,omitempty"`
	// Only one of the following image messages should be set to match
	// the type.
	Appc   *Image_Appc   `protobuf:"bytes,2,opt,name=appc" json:"appc,omitempty"`
	Docker *Image_Docker `protobuf:"bytes,3,opt,name=docker" json:"docker,omitempty"`
	// With this flag set to false, the mesos containerizer will pull
	// the docker/appc image from the registry even if the image is
	// already downloaded on the agent.
	Cached           *bool  `protobuf:"varint,4,opt,name=cached,def=1" json:"cached,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

const Default_Image_Cached bool = true

func (m *Image) GetType() Image_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Image_APPC
}

func (m *Image) GetAppc() *Image_Appc {
	if m != nil {
		return m.Appc
	}
	return nil
}

func (m *Image) GetDocker() *Image_Docker {
	if m != nil {
		return m.Docker
	}
	return nil
}

func (m *Image) GetCached() bool {
	if m != nil && m.Cached != nil {
		return *m.Cached
	}
	return Default_Image_Cached
}

// Protobuf for specifying an Appc container image. See:
// https://github.com/appc/spec/blob/master/spec/aci.md
type Image_Appc struct {
	// The name of the image.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// An image ID is a string of the format "hash-value", where
	// "hash" is the hash algorithm used and "value" is the hex
	// encoded string of the digest. Currently the only permitted
	// hash algorithm is sha512.
	Id *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// Optional labels. Suggested labels: "version", "os", and "arch".
	Labels           *Labels `protobuf:"bytes,3,opt,name=labels" json:"labels,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Image_Appc) Reset()                    { *m = Image_Appc{} }
func (m *Image_Appc) String() string            { return proto.CompactTextString(m) }
func (*Image_Appc) ProtoMessage()               {}
func (*Image_Appc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61, 0} }

func (m *Image_Appc) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Image_Appc) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Image_Appc) GetLabels() *Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

type Image_Docker struct {
	// The name of the image. Expected format:
	//   [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG|@TYPE:DIGEST]
	//
	// See: https://docs.docker.com/reference/commandline/pull/
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Credential to authenticate with docker registry.
	// NOTE: This is not encrypted, therefore framework and operators
	// should enable SSL when passing this information.
	//
	// This field has never been used in Mesos before and is
	// deprecated since Mesos 1.3. Please use `config` below
	// (see MESOS-7088 for details).
	Credential *Credential `protobuf:"bytes,2,opt,name=credential" json:"credential,omitempty"`
	// Docker config containing credentials to authenticate with
	// docker registry. The secret is expected to be a docker
	// config file in JSON format with UTF-8 character encoding.
	Config           *Secret `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Image_Docker) Reset()                    { *m = Image_Docker{} }
func (m *Image_Docker) String() string            { return proto.CompactTextString(m) }
func (*Image_Docker) ProtoMessage()               {}
func (*Image_Docker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61, 1} }

func (m *Image_Docker) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Image_Docker) GetCredential() *Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (m *Image_Docker) GetConfig() *Secret {
	if m != nil {
		return m.Config
	}
	return nil
}

// *
// Describes how the mount will be propagated for a volume. See the
// following doc for more details about mount propagation:
// https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt
type MountPropagation struct {
	Mode             *MountPropagation_Mode `protobuf:"varint,1,opt,name=mode,enum=mesos.v1.MountPropagation_Mode" json:"mode,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *MountPropagation) Reset()                    { *m = MountPropagation{} }
func (m *MountPropagation) String() string            { return proto.CompactTextString(m) }
func (*MountPropagation) ProtoMessage()               {}
func (*MountPropagation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *MountPropagation) GetMode() MountPropagation_Mode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return MountPropagation_UNKNOWN
}

// *
// Describes a volume mapping either from host to container or vice
// versa. Both paths can either refer to a directory or a file.
type Volume struct {
	// TODO(gyliu513): Make this as `optional` after deprecation cycle of 1.0.
	Mode *Volume_Mode `protobuf:"varint,3,req,name=mode,enum=mesos.v1.Volume_Mode" json:"mode,omitempty"`
	// Path pointing to a directory or file in the container. If the
	// path is a relative path, it is relative to the container work
	// directory. If the path is an absolute path, that path must
	// already exist.
	ContainerPath *string `protobuf:"bytes,1,req,name=container_path,json=container_path" json:"container_path,omitempty"`
	// Absolute path pointing to a directory or file on the host or a
	// path relative to the container work directory.
	HostPath *string `protobuf:"bytes,2,opt,name=host_path,json=host_path" json:"host_path,omitempty"`
	// The source of the volume is an Image which describes a root
	// filesystem which will be provisioned by Mesos.
	Image            *Image         `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
	Source           *Volume_Source `protobuf:"bytes,5,opt,name=source" json:"source,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Volume) Reset()                    { *m = Volume{} }
func (m *Volume) String() string            { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()               {}
func (*Volume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *Volume) GetMode() Volume_Mode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return Volume_RW
}

func (m *Volume) GetContainerPath() string {
	if m != nil && m.ContainerPath != nil {
		return *m.ContainerPath
	}
	return ""
}

func (m *Volume) GetHostPath() string {
	if m != nil && m.HostPath != nil {
		return *m.HostPath
	}
	return ""
}

func (m *Volume) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Volume) GetSource() *Volume_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

// Describes where a volume originates from.
type Volume_Source struct {
	// Enum fields should be optional, see: MESOS-4997.
	Type *Volume_Source_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.Volume_Source_Type" json:"type,omitempty"`
	// The source of the volume created by docker volume driver.
	DockerVolume *Volume_Source_DockerVolume `protobuf:"bytes,2,opt,name=docker_volume,json=docker_volume" json:"docker_volume,omitempty"`
	HostPath     *Volume_Source_HostPath     `protobuf:"bytes,5,opt,name=host_path,json=host_path" json:"host_path,omitempty"`
	SandboxPath  *Volume_Source_SandboxPath  `protobuf:"bytes,3,opt,name=sandbox_path,json=sandbox_path" json:"sandbox_path,omitempty"`
	// The volume/secret isolator uses the secret-fetcher module (third-party or
	// internal) downloads the secret and makes it available at container_path.
	Secret           *Secret `protobuf:"bytes,4,opt,name=secret" json:"secret,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Volume_Source) Reset()                    { *m = Volume_Source{} }
func (m *Volume_Source) String() string            { return proto.CompactTextString(m) }
func (*Volume_Source) ProtoMessage()               {}
func (*Volume_Source) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63, 0} }

func (m *Volume_Source) GetType() Volume_Source_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Volume_Source_UNKNOWN
}

func (m *Volume_Source) GetDockerVolume() *Volume_Source_DockerVolume {
	if m != nil {
		return m.DockerVolume
	}
	return nil
}

func (m *Volume_Source) GetHostPath() *Volume_Source_HostPath {
	if m != nil {
		return m.HostPath
	}
	return nil
}

func (m *Volume_Source) GetSandboxPath() *Volume_Source_SandboxPath {
	if m != nil {
		return m.SandboxPath
	}
	return nil
}

func (m *Volume_Source) GetSecret() *Secret {
	if m != nil {
		return m.Secret
	}
	return nil
}

type Volume_Source_DockerVolume struct {
	// Driver of the volume, it can be flocker, convoy, raxrey etc.
	Driver *string `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	// Name of the volume.
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// Volume driver specific options.
	DriverOptions    *Parameters `protobuf:"bytes,3,opt,name=driver_options,json=driver_options" json:"driver_options,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Volume_Source_DockerVolume) Reset()         { *m = Volume_Source_DockerVolume{} }
func (m *Volume_Source_DockerVolume) String() string { return proto.CompactTextString(m) }
func (*Volume_Source_DockerVolume) ProtoMessage()    {}
func (*Volume_Source_DockerVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{63, 0, 0}
}

func (m *Volume_Source_DockerVolume) GetDriver() string {
	if m != nil && m.Driver != nil {
		return *m.Driver
	}
	return ""
}

func (m *Volume_Source_DockerVolume) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Volume_Source_DockerVolume) GetDriverOptions() *Parameters {
	if m != nil {
		return m.DriverOptions
	}
	return nil
}

// Absolute path pointing to a directory or file on the host.
type Volume_Source_HostPath struct {
	Path             *string           `protobuf:"bytes,1,req,name=path" json:"path,omitempty"`
	MountPropagation *MountPropagation `protobuf:"bytes,2,opt,name=mount_propagation,json=mount_propagation" json:"mount_propagation,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Volume_Source_HostPath) Reset()                    { *m = Volume_Source_HostPath{} }
func (m *Volume_Source_HostPath) String() string            { return proto.CompactTextString(m) }
func (*Volume_Source_HostPath) ProtoMessage()               {}
func (*Volume_Source_HostPath) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63, 0, 1} }

func (m *Volume_Source_HostPath) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *Volume_Source_HostPath) GetMountPropagation() *MountPropagation {
	if m != nil {
		return m.MountPropagation
	}
	return nil
}

// Describe a path from a container's sandbox. The container can
// be the current container (SELF), or its parent container
// (PARENT). PARENT allows all child containers to share a volume
// from their parent container's sandbox. It'll be an error if
// the current container is a top level container.
type Volume_Source_SandboxPath struct {
	Type *Volume_Source_SandboxPath_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.Volume_Source_SandboxPath_Type" json:"type,omitempty"`
	// A path relative to the corresponding container's sandbox.
	// Note that upwards traversal (i.e. ../../abc) is not allowed.
	Path             *string `protobuf:"bytes,2,req,name=path" json:"path,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Volume_Source_SandboxPath) Reset()         { *m = Volume_Source_SandboxPath{} }
func (m *Volume_Source_SandboxPath) String() string { return proto.CompactTextString(m) }
func (*Volume_Source_SandboxPath) ProtoMessage()    {}
func (*Volume_Source_SandboxPath) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{63, 0, 2}
}

func (m *Volume_Source_SandboxPath) GetType() Volume_Source_SandboxPath_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Volume_Source_SandboxPath_UNKNOWN
}

func (m *Volume_Source_SandboxPath) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

// *
// Describes a network request from a framework as well as network resolution
// provided by Mesos.
//
// A framework may request the network isolator on the Agent to isolate the
// container in a network namespace and create a virtual network interface.
// The `NetworkInfo` message describes the properties of that virtual
// interface, including the IP addresses and network isolation policy
// (network group membership).
//
// The NetworkInfo message is not interpreted by the Master or Agent and is
// intended to be used by Agent and Master modules implementing network
// isolation. If the modules are missing, the message is simply ignored. In
// future, the task launch will fail if there is no module providing the
// network isolation capabilities (MESOS-3390).
//
// An executor, Agent, or an Agent module may append NetworkInfos inside
// TaskStatus::container_status to provide information such as the container IP
// address and isolation groups.
type NetworkInfo struct {
	// When included in a ContainerInfo, each of these represent a
	// request for an IP address. Each request can specify an explicit address
	// or the IP protocol to use.
	//
	// When included in a TaskStatus message, these inform the framework
	// scheduler about the IP addresses that are bound to the container
	// interface. When there are no custom network isolator modules installed,
	// this field is filled in automatically with the Agent IP address.
	IpAddresses []*NetworkInfo_IPAddress `protobuf:"bytes,5,rep,name=ip_addresses,json=ip_addresses" json:"ip_addresses,omitempty"`
	// Name of the network which will be used by network isolator to determine
	// the network that the container joins. It's up to the network isolator
	// to decide how to interpret this field.
	Name *string `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	// A group is the name given to a set of logically-related interfaces that
	// are allowed to communicate among themselves. Network traffic is allowed
	// between two container interfaces that share at least one network group.
	// For example, one might want to create separate groups for isolating dev,
	// testing, qa and prod deployment environments.
	Groups []string `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	// To tag certain metadata to be used by Isolator/IPAM, e.g., rack, etc.
	Labels           *Labels                    `protobuf:"bytes,4,opt,name=labels" json:"labels,omitempty"`
	PortMappings     []*NetworkInfo_PortMapping `protobuf:"bytes,7,rep,name=port_mappings,json=port_mappings" json:"port_mappings,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *NetworkInfo) Reset()                    { *m = NetworkInfo{} }
func (m *NetworkInfo) String() string            { return proto.CompactTextString(m) }
func (*NetworkInfo) ProtoMessage()               {}
func (*NetworkInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *NetworkInfo) GetIpAddresses() []*NetworkInfo_IPAddress {
	if m != nil {
		return m.IpAddresses
	}
	return nil
}

func (m *NetworkInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *NetworkInfo) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *NetworkInfo) GetLabels() *Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *NetworkInfo) GetPortMappings() []*NetworkInfo_PortMapping {
	if m != nil {
		return m.PortMappings
	}
	return nil
}

// Specifies a request for an IP address, or reports the assigned container
// IP address.
//
// Users can request an automatically assigned IP (for example, via an
// IPAM service) or a specific IP by adding a NetworkInfo to the
// ContainerInfo for a task.  On a request, specifying neither `protocol`
// nor `ip_address` means that any available address may be assigned.
type NetworkInfo_IPAddress struct {
	// Specify IP address requirement. Set protocol to the desired value to
	// request the network isolator on the Agent to assign an IP address to the
	// container being launched. If a specific IP address is specified in
	// ip_address, this field should not be set.
	Protocol *NetworkInfo_Protocol `protobuf:"varint,1,opt,name=protocol,enum=mesos.v1.NetworkInfo_Protocol,def=1" json:"protocol,omitempty"`
	// Statically assigned IP provided by the Framework. This IP will be
	// assigned to the container by the network isolator module on the Agent.
	// This field should not be used with the protocol field above.
	//
	// If an explicit address is requested but is unavailable, the network
	// isolator should fail the task.
	IpAddress        *string `protobuf:"bytes,2,opt,name=ip_address,json=ip_address" json:"ip_address,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NetworkInfo_IPAddress) Reset()                    { *m = NetworkInfo_IPAddress{} }
func (m *NetworkInfo_IPAddress) String() string            { return proto.CompactTextString(m) }
func (*NetworkInfo_IPAddress) ProtoMessage()               {}
func (*NetworkInfo_IPAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64, 0} }

const Default_NetworkInfo_IPAddress_Protocol NetworkInfo_Protocol = NetworkInfo_IPv4

func (m *NetworkInfo_IPAddress) GetProtocol() NetworkInfo_Protocol {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return Default_NetworkInfo_IPAddress_Protocol
}

func (m *NetworkInfo_IPAddress) GetIpAddress() string {
	if m != nil && m.IpAddress != nil {
		return *m.IpAddress
	}
	return ""
}

// Specifies a port mapping request for the task on this network.
type NetworkInfo_PortMapping struct {
	HostPort      *uint32 `protobuf:"varint,1,req,name=host_port,json=host_port" json:"host_port,omitempty"`
	ContainerPort *uint32 `protobuf:"varint,2,req,name=container_port,json=container_port" json:"container_port,omitempty"`
	// Protocol to expose as (ie: tcp, udp).
	Protocol         *string `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NetworkInfo_PortMapping) Reset()                    { *m = NetworkInfo_PortMapping{} }
func (m *NetworkInfo_PortMapping) String() string            { return proto.CompactTextString(m) }
func (*NetworkInfo_PortMapping) ProtoMessage()               {}
func (*NetworkInfo_PortMapping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64, 1} }

func (m *NetworkInfo_PortMapping) GetHostPort() uint32 {
	if m != nil && m.HostPort != nil {
		return *m.HostPort
	}
	return 0
}

func (m *NetworkInfo_PortMapping) GetContainerPort() uint32 {
	if m != nil && m.ContainerPort != nil {
		return *m.ContainerPort
	}
	return 0
}

func (m *NetworkInfo_PortMapping) GetProtocol() string {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return ""
}

// *
// Encapsulation of `Capabilities` supported by Linux.
// Reference: http://linux.die.net/man/7/capabilities.
type CapabilityInfo struct {
	Capabilities     []CapabilityInfo_Capability `protobuf:"varint,1,rep,name=capabilities,enum=mesos.v1.CapabilityInfo_Capability" json:"capabilities,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *CapabilityInfo) Reset()                    { *m = CapabilityInfo{} }
func (m *CapabilityInfo) String() string            { return proto.CompactTextString(m) }
func (*CapabilityInfo) ProtoMessage()               {}
func (*CapabilityInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *CapabilityInfo) GetCapabilities() []CapabilityInfo_Capability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

// *
// Encapsulation for Linux specific configuration.
// E.g, capabilities, limits etc.
type LinuxInfo struct {
	// Since 1.4.0, deprecated in favor of `effective_capabilities`.
	CapabilityInfo *CapabilityInfo `protobuf:"bytes,1,opt,name=capability_info,json=capability_info" json:"capability_info,omitempty"`
	// The set of capabilities that are allowed but not initially
	// granted to tasks.
	BoundingCapabilities *CapabilityInfo `protobuf:"bytes,2,opt,name=bounding_capabilities,json=bounding_capabilities" json:"bounding_capabilities,omitempty"`
	// Represents the set of capabilities that the task will
	// be executed with.
	EffectiveCapabilities *CapabilityInfo `protobuf:"bytes,3,opt,name=effective_capabilities,json=effective_capabilities" json:"effective_capabilities,omitempty"`
	// If set as 'true', the container shares the pid namespace with
	// its parent. If the container is a top level container, it will
	// share the pid namespace with the agent. If the container is a
	// nested container, it will share the pid namespace with its
	// parent container. This field will be ignored if 'namespaces/pid'
	// isolator is not enabled.
	SharePidNamespace *bool  `protobuf:"varint,4,opt,name=share_pid_namespace,json=share_pid_namespace" json:"share_pid_namespace,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *LinuxInfo) Reset()                    { *m = LinuxInfo{} }
func (m *LinuxInfo) String() string            { return proto.CompactTextString(m) }
func (*LinuxInfo) ProtoMessage()               {}
func (*LinuxInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *LinuxInfo) GetCapabilityInfo() *CapabilityInfo {
	if m != nil {
		return m.CapabilityInfo
	}
	return nil
}

func (m *LinuxInfo) GetBoundingCapabilities() *CapabilityInfo {
	if m != nil {
		return m.BoundingCapabilities
	}
	return nil
}

func (m *LinuxInfo) GetEffectiveCapabilities() *CapabilityInfo {
	if m != nil {
		return m.EffectiveCapabilities
	}
	return nil
}

func (m *LinuxInfo) GetSharePidNamespace() bool {
	if m != nil && m.SharePidNamespace != nil {
		return *m.SharePidNamespace
	}
	return false
}

// *
// Encapsulation for POSIX rlimits, see
// http://pubs.opengroup.org/onlinepubs/009695399/functions/getrlimit.html.
// Note that some types might only be defined for Linux.
// We use a custom prefix to avoid conflict with existing system macros
// (e.g., `RLIMIT_CPU` or `NOFILE`).
type RLimitInfo struct {
	Rlimits          []*RLimitInfo_RLimit `protobuf:"bytes,1,rep,name=rlimits" json:"rlimits,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *RLimitInfo) Reset()                    { *m = RLimitInfo{} }
func (m *RLimitInfo) String() string            { return proto.CompactTextString(m) }
func (*RLimitInfo) ProtoMessage()               {}
func (*RLimitInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *RLimitInfo) GetRlimits() []*RLimitInfo_RLimit {
	if m != nil {
		return m.Rlimits
	}
	return nil
}

type RLimitInfo_RLimit struct {
	Type *RLimitInfo_RLimit_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.RLimitInfo_RLimit_Type" json:"type,omitempty"`
	// Either both are set or both are not set.
	// If both are not set, it represents unlimited.
	// If both are set, we require `soft` <= `hard`.
	Hard             *uint64 `protobuf:"varint,2,opt,name=hard" json:"hard,omitempty"`
	Soft             *uint64 `protobuf:"varint,3,opt,name=soft" json:"soft,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RLimitInfo_RLimit) Reset()                    { *m = RLimitInfo_RLimit{} }
func (m *RLimitInfo_RLimit) String() string            { return proto.CompactTextString(m) }
func (*RLimitInfo_RLimit) ProtoMessage()               {}
func (*RLimitInfo_RLimit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67, 0} }

func (m *RLimitInfo_RLimit) GetType() RLimitInfo_RLimit_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RLimitInfo_RLimit_UNKNOWN
}

func (m *RLimitInfo_RLimit) GetHard() uint64 {
	if m != nil && m.Hard != nil {
		return *m.Hard
	}
	return 0
}

func (m *RLimitInfo_RLimit) GetSoft() uint64 {
	if m != nil && m.Soft != nil {
		return *m.Soft
	}
	return 0
}

// *
// Describes the information about (pseudo) TTY that can
// be attached to a process running in a container.
type TTYInfo struct {
	WindowSize       *TTYInfo_WindowSize `protobuf:"bytes,1,opt,name=window_size,json=window_size" json:"window_size,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *TTYInfo) Reset()                    { *m = TTYInfo{} }
func (m *TTYInfo) String() string            { return proto.CompactTextString(m) }
func (*TTYInfo) ProtoMessage()               {}
func (*TTYInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *TTYInfo) GetWindowSize() *TTYInfo_WindowSize {
	if m != nil {
		return m.WindowSize
	}
	return nil
}

type TTYInfo_WindowSize struct {
	Rows             *uint32 `protobuf:"varint,1,req,name=rows" json:"rows,omitempty"`
	Columns          *uint32 `protobuf:"varint,2,req,name=columns" json:"columns,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TTYInfo_WindowSize) Reset()                    { *m = TTYInfo_WindowSize{} }
func (m *TTYInfo_WindowSize) String() string            { return proto.CompactTextString(m) }
func (*TTYInfo_WindowSize) ProtoMessage()               {}
func (*TTYInfo_WindowSize) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68, 0} }

func (m *TTYInfo_WindowSize) GetRows() uint32 {
	if m != nil && m.Rows != nil {
		return *m.Rows
	}
	return 0
}

func (m *TTYInfo_WindowSize) GetColumns() uint32 {
	if m != nil && m.Columns != nil {
		return *m.Columns
	}
	return 0
}

// *
// Describes a container configuration and allows extensible
// configurations for different container implementations.
//
// NOTE: `ContainerInfo` may be specified, e.g., by a task, even if no
// container image is provided. In this case neither `MesosInfo` nor
// `DockerInfo` is set, the required `type` must be `MESOS`. This is to
// address a case when a task without an image, e.g., a shell script
// with URIs, wants to use features originally designed for containers,
// for example custom network isolation via `NetworkInfo`.
type ContainerInfo struct {
	Type     *ContainerInfo_Type `protobuf:"varint,1,req,name=type,enum=mesos.v1.ContainerInfo_Type" json:"type,omitempty"`
	Volumes  []*Volume           `protobuf:"bytes,2,rep,name=volumes" json:"volumes,omitempty"`
	Hostname *string             `protobuf:"bytes,4,opt,name=hostname" json:"hostname,omitempty"`
	// Only one of the following *Info messages should be set to match
	// the type.
	Docker *ContainerInfo_DockerInfo `protobuf:"bytes,3,opt,name=docker" json:"docker,omitempty"`
	Mesos  *ContainerInfo_MesosInfo  `protobuf:"bytes,5,opt,name=mesos" json:"mesos,omitempty"`
	// A list of network requests. A framework can request multiple IP addresses
	// for the container.
	NetworkInfos []*NetworkInfo `protobuf:"bytes,7,rep,name=network_infos,json=network_infos" json:"network_infos,omitempty"`
	// Linux specific information for the container.
	LinuxInfo *LinuxInfo `protobuf:"bytes,8,opt,name=linux_info,json=linux_info" json:"linux_info,omitempty"`
	// (POSIX only) rlimits of the container.
	RlimitInfo *RLimitInfo `protobuf:"bytes,9,opt,name=rlimit_info,json=rlimit_info" json:"rlimit_info,omitempty"`
	// If specified a tty will be attached to the container entrypoint.
	TtyInfo          *TTYInfo `protobuf:"bytes,10,opt,name=tty_info,json=tty_info" json:"tty_info,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ContainerInfo) Reset()                    { *m = ContainerInfo{} }
func (m *ContainerInfo) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfo) ProtoMessage()               {}
func (*ContainerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *ContainerInfo) GetType() ContainerInfo_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ContainerInfo_DOCKER
}

func (m *ContainerInfo) GetVolumes() []*Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *ContainerInfo) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *ContainerInfo) GetDocker() *ContainerInfo_DockerInfo {
	if m != nil {
		return m.Docker
	}
	return nil
}

func (m *ContainerInfo) GetMesos() *ContainerInfo_MesosInfo {
	if m != nil {
		return m.Mesos
	}
	return nil
}

func (m *ContainerInfo) GetNetworkInfos() []*NetworkInfo {
	if m != nil {
		return m.NetworkInfos
	}
	return nil
}

func (m *ContainerInfo) GetLinuxInfo() *LinuxInfo {
	if m != nil {
		return m.LinuxInfo
	}
	return nil
}

func (m *ContainerInfo) GetRlimitInfo() *RLimitInfo {
	if m != nil {
		return m.RlimitInfo
	}
	return nil
}

func (m *ContainerInfo) GetTtyInfo() *TTYInfo {
	if m != nil {
		return m.TtyInfo
	}
	return nil
}

type ContainerInfo_DockerInfo struct {
	// The docker image that is going to be passed to the registry.
	Image        *string                                 `protobuf:"bytes,1,req,name=image" json:"image,omitempty"`
	Network      *ContainerInfo_DockerInfo_Network       `protobuf:"varint,2,opt,name=network,enum=mesos.v1.ContainerInfo_DockerInfo_Network,def=1" json:"network,omitempty"`
	PortMappings []*ContainerInfo_DockerInfo_PortMapping `protobuf:"bytes,3,rep,name=port_mappings,json=port_mappings" json:"port_mappings,omitempty"`
	Privileged   *bool                                   `protobuf:"varint,4,opt,name=privileged,def=0" json:"privileged,omitempty"`
	// Allowing arbitrary parameters to be passed to docker CLI.
	// Note that anything passed to this field is not guaranteed
	// to be supported moving forward, as we might move away from
	// the docker CLI.
	Parameters []*Parameter `protobuf:"bytes,5,rep,name=parameters" json:"parameters,omitempty"`
	// With this flag set to true, the docker containerizer will
	// pull the docker image from the registry even if the image
	// is already downloaded on the agent.
	ForcePullImage *bool `protobuf:"varint,6,opt,name=force_pull_image,json=force_pull_image" json:"force_pull_image,omitempty"`
	// The name of volume driver plugin.
	VolumeDriver     *string `protobuf:"bytes,7,opt,name=volume_driver,json=volume_driver" json:"volume_driver,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContainerInfo_DockerInfo) Reset()                    { *m = ContainerInfo_DockerInfo{} }
func (m *ContainerInfo_DockerInfo) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfo_DockerInfo) ProtoMessage()               {}
func (*ContainerInfo_DockerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69, 0} }

const Default_ContainerInfo_DockerInfo_Network ContainerInfo_DockerInfo_Network = ContainerInfo_DockerInfo_HOST
const Default_ContainerInfo_DockerInfo_Privileged bool = false

func (m *ContainerInfo_DockerInfo) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

func (m *ContainerInfo_DockerInfo) GetNetwork() ContainerInfo_DockerInfo_Network {
	if m != nil && m.Network != nil {
		return *m.Network
	}
	return Default_ContainerInfo_DockerInfo_Network
}

func (m *ContainerInfo_DockerInfo) GetPortMappings() []*ContainerInfo_DockerInfo_PortMapping {
	if m != nil {
		return m.PortMappings
	}
	return nil
}

func (m *ContainerInfo_DockerInfo) GetPrivileged() bool {
	if m != nil && m.Privileged != nil {
		return *m.Privileged
	}
	return Default_ContainerInfo_DockerInfo_Privileged
}

func (m *ContainerInfo_DockerInfo) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *ContainerInfo_DockerInfo) GetForcePullImage() bool {
	if m != nil && m.ForcePullImage != nil {
		return *m.ForcePullImage
	}
	return false
}

func (m *ContainerInfo_DockerInfo) GetVolumeDriver() string {
	if m != nil && m.VolumeDriver != nil {
		return *m.VolumeDriver
	}
	return ""
}

type ContainerInfo_DockerInfo_PortMapping struct {
	HostPort      *uint32 `protobuf:"varint,1,req,name=host_port,json=host_port" json:"host_port,omitempty"`
	ContainerPort *uint32 `protobuf:"varint,2,req,name=container_port,json=container_port" json:"container_port,omitempty"`
	// Protocol to expose as (ie: tcp, udp).
	Protocol         *string `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContainerInfo_DockerInfo_PortMapping) Reset()         { *m = ContainerInfo_DockerInfo_PortMapping{} }
func (m *ContainerInfo_DockerInfo_PortMapping) String() string { return proto.CompactTextString(m) }
func (*ContainerInfo_DockerInfo_PortMapping) ProtoMessage()    {}
func (*ContainerInfo_DockerInfo_PortMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{69, 0, 0}
}

func (m *ContainerInfo_DockerInfo_PortMapping) GetHostPort() uint32 {
	if m != nil && m.HostPort != nil {
		return *m.HostPort
	}
	return 0
}

func (m *ContainerInfo_DockerInfo_PortMapping) GetContainerPort() uint32 {
	if m != nil && m.ContainerPort != nil {
		return *m.ContainerPort
	}
	return 0
}

func (m *ContainerInfo_DockerInfo_PortMapping) GetProtocol() string {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return ""
}

type ContainerInfo_MesosInfo struct {
	Image            *Image `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ContainerInfo_MesosInfo) Reset()                    { *m = ContainerInfo_MesosInfo{} }
func (m *ContainerInfo_MesosInfo) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfo_MesosInfo) ProtoMessage()               {}
func (*ContainerInfo_MesosInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69, 1} }

func (m *ContainerInfo_MesosInfo) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

// *
// Container related information that is resolved during container
// setup. The information is sent back to the framework as part of the
// TaskStatus message.
type ContainerStatus struct {
	ContainerId *ContainerID `protobuf:"bytes,4,opt,name=container_id,json=container_id" json:"container_id,omitempty"`
	// This field can be reliably used to identify the container IP address.
	NetworkInfos []*NetworkInfo `protobuf:"bytes,1,rep,name=network_infos,json=network_infos" json:"network_infos,omitempty"`
	// Information about Linux control group (cgroup).
	CgroupInfo *CgroupInfo `protobuf:"bytes,2,opt,name=cgroup_info,json=cgroup_info" json:"cgroup_info,omitempty"`
	// Information about Executor PID.
	ExecutorPid      *uint32 `protobuf:"varint,3,opt,name=executor_pid,json=executor_pid" json:"executor_pid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContainerStatus) Reset()                    { *m = ContainerStatus{} }
func (m *ContainerStatus) String() string            { return proto.CompactTextString(m) }
func (*ContainerStatus) ProtoMessage()               {}
func (*ContainerStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *ContainerStatus) GetContainerId() *ContainerID {
	if m != nil {
		return m.ContainerId
	}
	return nil
}

func (m *ContainerStatus) GetNetworkInfos() []*NetworkInfo {
	if m != nil {
		return m.NetworkInfos
	}
	return nil
}

func (m *ContainerStatus) GetCgroupInfo() *CgroupInfo {
	if m != nil {
		return m.CgroupInfo
	}
	return nil
}

func (m *ContainerStatus) GetExecutorPid() uint32 {
	if m != nil && m.ExecutorPid != nil {
		return *m.ExecutorPid
	}
	return 0
}

// *
// Linux control group (cgroup) information.
type CgroupInfo struct {
	NetCls           *CgroupInfo_NetCls `protobuf:"bytes,1,opt,name=net_cls,json=net_cls" json:"net_cls,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CgroupInfo) Reset()                    { *m = CgroupInfo{} }
func (m *CgroupInfo) String() string            { return proto.CompactTextString(m) }
func (*CgroupInfo) ProtoMessage()               {}
func (*CgroupInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *CgroupInfo) GetNetCls() *CgroupInfo_NetCls {
	if m != nil {
		return m.NetCls
	}
	return nil
}

// Configuration of a blkio cgroup subsystem.
type CgroupInfo_Blkio struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CgroupInfo_Blkio) Reset()                    { *m = CgroupInfo_Blkio{} }
func (m *CgroupInfo_Blkio) String() string            { return proto.CompactTextString(m) }
func (*CgroupInfo_Blkio) ProtoMessage()               {}
func (*CgroupInfo_Blkio) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71, 0} }

// Describes a stat value without the device descriptor part.
type CgroupInfo_Blkio_Value struct {
	Op               *CgroupInfo_Blkio_Operation `protobuf:"varint,1,opt,name=op,enum=mesos.v1.CgroupInfo_Blkio_Operation" json:"op,omitempty"`
	Value            *uint64                     `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *CgroupInfo_Blkio_Value) Reset()                    { *m = CgroupInfo_Blkio_Value{} }
func (m *CgroupInfo_Blkio_Value) String() string            { return proto.CompactTextString(m) }
func (*CgroupInfo_Blkio_Value) ProtoMessage()               {}
func (*CgroupInfo_Blkio_Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71, 0, 0} }

func (m *CgroupInfo_Blkio_Value) GetOp() CgroupInfo_Blkio_Operation {
	if m != nil && m.Op != nil {
		return *m.Op
	}
	return CgroupInfo_Blkio_UNKNOWN
}

func (m *CgroupInfo_Blkio_Value) GetValue() uint64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type CgroupInfo_Blkio_CFQ struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CgroupInfo_Blkio_CFQ) Reset()                    { *m = CgroupInfo_Blkio_CFQ{} }
func (m *CgroupInfo_Blkio_CFQ) String() string            { return proto.CompactTextString(m) }
func (*CgroupInfo_Blkio_CFQ) ProtoMessage()               {}
func (*CgroupInfo_Blkio_CFQ) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71, 0, 1} }

type CgroupInfo_Blkio_CFQ_Statistics struct {
	// Stats are grouped by block devices. If `device` is not
	// set, it represents `Total`.
	Device *Device_Number `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	// blkio.sectors
	Sectors *uint64 `protobuf:"varint,2,opt,name=sectors" json:"sectors,omitempty"`
	// blkio.time
	Time *uint64 `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	// blkio.io_serviced
	IoServiced []*CgroupInfo_Blkio_Value `protobuf:"bytes,4,rep,name=io_serviced,json=io_serviced" json:"io_serviced,omitempty"`
	// blkio.io_service_bytes
	IoServiceBytes []*CgroupInfo_Blkio_Value `protobuf:"bytes,5,rep,name=io_service_bytes,json=io_service_bytes" json:"io_service_bytes,omitempty"`
	// blkio.io_service_time
	IoServiceTime []*CgroupInfo_Blkio_Value `protobuf:"bytes,6,rep,name=io_service_time,json=io_service_time" json:"io_service_time,omitempty"`
	// blkio.io_wait_time
	IoWaitTime []*CgroupInfo_Blkio_Value `protobuf:"bytes,7,rep,name=io_wait_time,json=io_wait_time" json:"io_wait_time,omitempty"`
	// blkio.io_merged
	IoMerged []*CgroupInfo_Blkio_Value `protobuf:"bytes,8,rep,name=io_merged,json=io_merged" json:"io_merged,omitempty"`
	// blkio.io_queued
	IoQueued         []*CgroupInfo_Blkio_Value `protobuf:"bytes,9,rep,name=io_queued,json=io_queued" json:"io_queued,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CgroupInfo_Blkio_CFQ_Statistics) Reset()         { *m = CgroupInfo_Blkio_CFQ_Statistics{} }
func (m *CgroupInfo_Blkio_CFQ_Statistics) String() string { return proto.CompactTextString(m) }
func (*CgroupInfo_Blkio_CFQ_Statistics) ProtoMessage()    {}
func (*CgroupInfo_Blkio_CFQ_Statistics) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{71, 0, 1, 0}
}

func (m *CgroupInfo_Blkio_CFQ_Statistics) GetDevice() *Device_Number {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *CgroupInfo_Blkio_CFQ_Statistics) GetSectors() uint64 {
	if m != nil && m.Sectors != nil {
		return *m.Sectors
	}
	return 0
}

func (m *CgroupInfo_Blkio_CFQ_Statistics) GetTime() uint64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *CgroupInfo_Blkio_CFQ_Statistics) GetIoServiced() []*CgroupInfo_Blkio_Value {
	if m != nil {
		return m.IoServiced
	}
	return nil
}

func (m *CgroupInfo_Blkio_CFQ_Statistics) GetIoServiceBytes() []*CgroupInfo_Blkio_Value {
	if m != nil {
		return m.IoServiceBytes
	}
	return nil
}

func (m *CgroupInfo_Blkio_CFQ_Statistics) GetIoServiceTime() []*CgroupInfo_Blkio_Value {
	if m != nil {
		return m.IoServiceTime
	}
	return nil
}

func (m *CgroupInfo_Blkio_CFQ_Statistics) GetIoWaitTime() []*CgroupInfo_Blkio_Value {
	if m != nil {
		return m.IoWaitTime
	}
	return nil
}

func (m *CgroupInfo_Blkio_CFQ_Statistics) GetIoMerged() []*CgroupInfo_Blkio_Value {
	if m != nil {
		return m.IoMerged
	}
	return nil
}

func (m *CgroupInfo_Blkio_CFQ_Statistics) GetIoQueued() []*CgroupInfo_Blkio_Value {
	if m != nil {
		return m.IoQueued
	}
	return nil
}

type CgroupInfo_Blkio_Throttling struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CgroupInfo_Blkio_Throttling) Reset()         { *m = CgroupInfo_Blkio_Throttling{} }
func (m *CgroupInfo_Blkio_Throttling) String() string { return proto.CompactTextString(m) }
func (*CgroupInfo_Blkio_Throttling) ProtoMessage()    {}
func (*CgroupInfo_Blkio_Throttling) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{71, 0, 2}
}

type CgroupInfo_Blkio_Throttling_Statistics struct {
	// Stats are grouped by block devices. If `device` is not
	// set, it represents `Total`.
	Device *Device_Number `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	// blkio.throttle.io_serviced
	IoServiced []*CgroupInfo_Blkio_Value `protobuf:"bytes,2,rep,name=io_serviced,json=io_serviced" json:"io_serviced,omitempty"`
	// blkio.throttle.io_service_bytes
	IoServiceBytes   []*CgroupInfo_Blkio_Value `protobuf:"bytes,3,rep,name=io_service_bytes,json=io_service_bytes" json:"io_service_bytes,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CgroupInfo_Blkio_Throttling_Statistics) Reset() {
	*m = CgroupInfo_Blkio_Throttling_Statistics{}
}
func (m *CgroupInfo_Blkio_Throttling_Statistics) String() string { return proto.CompactTextString(m) }
func (*CgroupInfo_Blkio_Throttling_Statistics) ProtoMessage()    {}
func (*CgroupInfo_Blkio_Throttling_Statistics) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{71, 0, 2, 0}
}

func (m *CgroupInfo_Blkio_Throttling_Statistics) GetDevice() *Device_Number {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *CgroupInfo_Blkio_Throttling_Statistics) GetIoServiced() []*CgroupInfo_Blkio_Value {
	if m != nil {
		return m.IoServiced
	}
	return nil
}

func (m *CgroupInfo_Blkio_Throttling_Statistics) GetIoServiceBytes() []*CgroupInfo_Blkio_Value {
	if m != nil {
		return m.IoServiceBytes
	}
	return nil
}

type CgroupInfo_Blkio_Statistics struct {
	Cfq              []*CgroupInfo_Blkio_CFQ_Statistics        `protobuf:"bytes,1,rep,name=cfq" json:"cfq,omitempty"`
	CfqRecursive     []*CgroupInfo_Blkio_CFQ_Statistics        `protobuf:"bytes,2,rep,name=cfq_recursive,json=cfq_recursive" json:"cfq_recursive,omitempty"`
	Throttling       []*CgroupInfo_Blkio_Throttling_Statistics `protobuf:"bytes,3,rep,name=throttling" json:"throttling,omitempty"`
	XXX_unrecognized []byte                                    `json:"-"`
}

func (m *CgroupInfo_Blkio_Statistics) Reset()         { *m = CgroupInfo_Blkio_Statistics{} }
func (m *CgroupInfo_Blkio_Statistics) String() string { return proto.CompactTextString(m) }
func (*CgroupInfo_Blkio_Statistics) ProtoMessage()    {}
func (*CgroupInfo_Blkio_Statistics) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{71, 0, 3}
}

func (m *CgroupInfo_Blkio_Statistics) GetCfq() []*CgroupInfo_Blkio_CFQ_Statistics {
	if m != nil {
		return m.Cfq
	}
	return nil
}

func (m *CgroupInfo_Blkio_Statistics) GetCfqRecursive() []*CgroupInfo_Blkio_CFQ_Statistics {
	if m != nil {
		return m.CfqRecursive
	}
	return nil
}

func (m *CgroupInfo_Blkio_Statistics) GetThrottling() []*CgroupInfo_Blkio_Throttling_Statistics {
	if m != nil {
		return m.Throttling
	}
	return nil
}

// Configuration of a net_cls cgroup subsystem.
type CgroupInfo_NetCls struct {
	// The 32-bit classid consists of two parts, a 16 bit major handle
	// and a 16-bit minor handle. The major and minor handle are
	// represented using the format 0xAAAABBBB, where 0xAAAA is the
	// 16-bit major handle and 0xBBBB is the 16-bit minor handle.
	Classid          *uint32 `protobuf:"varint,1,opt,name=classid" json:"classid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CgroupInfo_NetCls) Reset()                    { *m = CgroupInfo_NetCls{} }
func (m *CgroupInfo_NetCls) String() string            { return proto.CompactTextString(m) }
func (*CgroupInfo_NetCls) ProtoMessage()               {}
func (*CgroupInfo_NetCls) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71, 1} }

func (m *CgroupInfo_NetCls) GetClassid() uint32 {
	if m != nil && m.Classid != nil {
		return *m.Classid
	}
	return 0
}

// *
// Collection of labels. Labels should not contain duplicate key-value
// pairs.
type Labels struct {
	Labels           []*Label `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Labels) Reset()                    { *m = Labels{} }
func (m *Labels) String() string            { return proto.CompactTextString(m) }
func (*Labels) ProtoMessage()               {}
func (*Labels) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *Labels) GetLabels() []*Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

// *
// Key, value pair used to store free form user-data.
type Label struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Label) Reset()                    { *m = Label{} }
func (m *Label) String() string            { return proto.CompactTextString(m) }
func (*Label) ProtoMessage()               {}
func (*Label) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *Label) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Label) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// *
// Named port used for service discovery.
type Port struct {
	// Port number on which the framework exposes a service.
	Number *uint32 `protobuf:"varint,1,req,name=number" json:"number,omitempty"`
	// Name of the service hosted on this port.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Layer 4-7 protocol on which the framework exposes its services.
	Protocol *string `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
	// This field restricts discovery within a framework (FRAMEWORK),
	// within a Mesos cluster (CLUSTER), or places no restrictions (EXTERNAL).
	// The visibility setting for a Port overrides the general visibility setting
	// in the DiscoveryInfo.
	Visibility *DiscoveryInfo_Visibility `protobuf:"varint,4,opt,name=visibility,enum=mesos.v1.DiscoveryInfo_Visibility" json:"visibility,omitempty"`
	// This can be used to decorate the message with metadata to be
	// interpreted by external applications such as firewalls.
	Labels           *Labels `protobuf:"bytes,5,opt,name=labels" json:"labels,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Port) Reset()                    { *m = Port{} }
func (m *Port) String() string            { return proto.CompactTextString(m) }
func (*Port) ProtoMessage()               {}
func (*Port) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *Port) GetNumber() uint32 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

func (m *Port) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Port) GetProtocol() string {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return ""
}

func (m *Port) GetVisibility() DiscoveryInfo_Visibility {
	if m != nil && m.Visibility != nil {
		return *m.Visibility
	}
	return DiscoveryInfo_FRAMEWORK
}

func (m *Port) GetLabels() *Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

// *
// Collection of ports.
type Ports struct {
	Ports            []*Port `protobuf:"bytes,1,rep,name=ports" json:"ports,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Ports) Reset()                    { *m = Ports{} }
func (m *Ports) String() string            { return proto.CompactTextString(m) }
func (*Ports) ProtoMessage()               {}
func (*Ports) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *Ports) GetPorts() []*Port {
	if m != nil {
		return m.Ports
	}
	return nil
}

// *
// Service discovery information.
// The visibility field restricts discovery within a framework (FRAMEWORK),
// within a Mesos cluster (CLUSTER), or places no restrictions (EXTERNAL).
// Each port in the ports field also has an optional visibility field.
// If visibility is specified for a port, it overrides the default service-wide
// DiscoveryInfo.visibility for that port.
// The environment, location, and version fields provide first class support for
// common attributes used to differentiate between similar services. The
// environment may receive values such as PROD/QA/DEV, the location field may
// receive values like EAST-US/WEST-US/EUROPE/AMEA, and the version field may
// receive values like v2.0/v0.9. The exact use of these fields is up to each
// service discovery system.
type DiscoveryInfo struct {
	Visibility       *DiscoveryInfo_Visibility `protobuf:"varint,1,req,name=visibility,enum=mesos.v1.DiscoveryInfo_Visibility" json:"visibility,omitempty"`
	Name             *string                   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Environment      *string                   `protobuf:"bytes,3,opt,name=environment" json:"environment,omitempty"`
	Location         *string                   `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	Version          *string                   `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
	Ports            *Ports                    `protobuf:"bytes,6,opt,name=ports" json:"ports,omitempty"`
	Labels           *Labels                   `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *DiscoveryInfo) Reset()                    { *m = DiscoveryInfo{} }
func (m *DiscoveryInfo) String() string            { return proto.CompactTextString(m) }
func (*DiscoveryInfo) ProtoMessage()               {}
func (*DiscoveryInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *DiscoveryInfo) GetVisibility() DiscoveryInfo_Visibility {
	if m != nil && m.Visibility != nil {
		return *m.Visibility
	}
	return DiscoveryInfo_FRAMEWORK
}

func (m *DiscoveryInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *DiscoveryInfo) GetEnvironment() string {
	if m != nil && m.Environment != nil {
		return *m.Environment
	}
	return ""
}

func (m *DiscoveryInfo) GetLocation() string {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return ""
}

func (m *DiscoveryInfo) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *DiscoveryInfo) GetPorts() *Ports {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *DiscoveryInfo) GetLabels() *Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

// *
// Named WeightInfo to indicate resource allocation
// priority between the different roles.
type WeightInfo struct {
	Weight *float64 `protobuf:"fixed64,1,req,name=weight" json:"weight,omitempty"`
	// Related role name.
	Role             *string `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WeightInfo) Reset()                    { *m = WeightInfo{} }
func (m *WeightInfo) String() string            { return proto.CompactTextString(m) }
func (*WeightInfo) ProtoMessage()               {}
func (*WeightInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *WeightInfo) GetWeight() float64 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *WeightInfo) GetRole() string {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return ""
}

// *
// Version information of a component.
type VersionInfo struct {
	Version          *string  `protobuf:"bytes,1,req,name=version" json:"version,omitempty"`
	BuildDate        *string  `protobuf:"bytes,2,opt,name=build_date,json=build_date" json:"build_date,omitempty"`
	BuildTime        *float64 `protobuf:"fixed64,3,opt,name=build_time,json=build_time" json:"build_time,omitempty"`
	BuildUser        *string  `protobuf:"bytes,4,opt,name=build_user,json=build_user" json:"build_user,omitempty"`
	GitSha           *string  `protobuf:"bytes,5,opt,name=git_sha,json=git_sha" json:"git_sha,omitempty"`
	GitBranch        *string  `protobuf:"bytes,6,opt,name=git_branch,json=git_branch" json:"git_branch,omitempty"`
	GitTag           *string  `protobuf:"bytes,7,opt,name=git_tag,json=git_tag" json:"git_tag,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *VersionInfo) Reset()                    { *m = VersionInfo{} }
func (m *VersionInfo) String() string            { return proto.CompactTextString(m) }
func (*VersionInfo) ProtoMessage()               {}
func (*VersionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *VersionInfo) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *VersionInfo) GetBuildDate() string {
	if m != nil && m.BuildDate != nil {
		return *m.BuildDate
	}
	return ""
}

func (m *VersionInfo) GetBuildTime() float64 {
	if m != nil && m.BuildTime != nil {
		return *m.BuildTime
	}
	return 0
}

func (m *VersionInfo) GetBuildUser() string {
	if m != nil && m.BuildUser != nil {
		return *m.BuildUser
	}
	return ""
}

func (m *VersionInfo) GetGitSha() string {
	if m != nil && m.GitSha != nil {
		return *m.GitSha
	}
	return ""
}

func (m *VersionInfo) GetGitBranch() string {
	if m != nil && m.GitBranch != nil {
		return *m.GitBranch
	}
	return ""
}

func (m *VersionInfo) GetGitTag() string {
	if m != nil && m.GitTag != nil {
		return *m.GitTag
	}
	return ""
}

// *
// Flag consists of a name and optionally its value.
type Flag struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Flag) Reset()                    { *m = Flag{} }
func (m *Flag) String() string            { return proto.CompactTextString(m) }
func (*Flag) ProtoMessage()               {}
func (*Flag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *Flag) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Flag) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// *
// Describes a Role. Roles can be used to specify that certain resources are
// reserved for the use of one or more frameworks.
type Role struct {
	Name             *string        `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Weight           *float64       `protobuf:"fixed64,2,req,name=weight" json:"weight,omitempty"`
	Frameworks       []*FrameworkID `protobuf:"bytes,3,rep,name=frameworks" json:"frameworks,omitempty"`
	Resources        []*Resource    `protobuf:"bytes,4,rep,name=resources" json:"resources,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *Role) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Role) GetWeight() float64 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *Role) GetFrameworks() []*FrameworkID {
	if m != nil {
		return m.Frameworks
	}
	return nil
}

func (m *Role) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

// *
// Metric consists of a name and optionally its value.
type Metric struct {
	Name             *string  `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Value            *float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *Metric) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Metric) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

// *
// Describes a File.
type FileInfo struct {
	// Absolute path to the file.
	Path *string `protobuf:"bytes,1,req,name=path" json:"path,omitempty"`
	// Number of hard links.
	Nlink *int32 `protobuf:"varint,2,opt,name=nlink" json:"nlink,omitempty"`
	// Total size in bytes.
	Size *uint64 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	// Last modification time.
	Mtime *TimeInfo `protobuf:"bytes,4,opt,name=mtime" json:"mtime,omitempty"`
	// Represents a file's mode and permission bits. The bits have the same
	// definition on all systems and is portable.
	Mode *uint32 `protobuf:"varint,5,opt,name=mode" json:"mode,omitempty"`
	// User ID of owner.
	Uid *string `protobuf:"bytes,6,opt,name=uid" json:"uid,omitempty"`
	// Group ID of owner.
	Gid              *string `protobuf:"bytes,7,opt,name=gid" json:"gid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *FileInfo) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *FileInfo) GetNlink() int32 {
	if m != nil && m.Nlink != nil {
		return *m.Nlink
	}
	return 0
}

func (m *FileInfo) GetSize() uint64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *FileInfo) GetMtime() *TimeInfo {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *FileInfo) GetMode() uint32 {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return 0
}

func (m *FileInfo) GetUid() string {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return ""
}

func (m *FileInfo) GetGid() string {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return ""
}

// *
// Describes information about a device.
type Device struct {
	Path             *string        `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Number           *Device_Number `protobuf:"bytes,2,opt,name=number" json:"number,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *Device) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *Device) GetNumber() *Device_Number {
	if m != nil {
		return m.Number
	}
	return nil
}

type Device_Number struct {
	MajorNumber      *uint64 `protobuf:"varint,1,req,name=major_number,json=major_number" json:"major_number,omitempty"`
	MinorNumber      *uint64 `protobuf:"varint,2,req,name=minor_number,json=minor_number" json:"minor_number,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Device_Number) Reset()                    { *m = Device_Number{} }
func (m *Device_Number) String() string            { return proto.CompactTextString(m) }
func (*Device_Number) ProtoMessage()               {}
func (*Device_Number) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83, 0} }

func (m *Device_Number) GetMajorNumber() uint64 {
	if m != nil && m.MajorNumber != nil {
		return *m.MajorNumber
	}
	return 0
}

func (m *Device_Number) GetMinorNumber() uint64 {
	if m != nil && m.MinorNumber != nil {
		return *m.MinorNumber
	}
	return 0
}

// *
// Describes a device whitelist entry that expose from host to container.
type DeviceAccess struct {
	Device           *Device              `protobuf:"bytes,1,req,name=device" json:"device,omitempty"`
	Access           *DeviceAccess_Access `protobuf:"bytes,2,req,name=access" json:"access,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *DeviceAccess) Reset()                    { *m = DeviceAccess{} }
func (m *DeviceAccess) String() string            { return proto.CompactTextString(m) }
func (*DeviceAccess) ProtoMessage()               {}
func (*DeviceAccess) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

func (m *DeviceAccess) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *DeviceAccess) GetAccess() *DeviceAccess_Access {
	if m != nil {
		return m.Access
	}
	return nil
}

type DeviceAccess_Access struct {
	Read             *bool  `protobuf:"varint,1,opt,name=read" json:"read,omitempty"`
	Write            *bool  `protobuf:"varint,2,opt,name=write" json:"write,omitempty"`
	Mknod            *bool  `protobuf:"varint,3,opt,name=mknod" json:"mknod,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DeviceAccess_Access) Reset()                    { *m = DeviceAccess_Access{} }
func (m *DeviceAccess_Access) String() string            { return proto.CompactTextString(m) }
func (*DeviceAccess_Access) ProtoMessage()               {}
func (*DeviceAccess_Access) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84, 0} }

func (m *DeviceAccess_Access) GetRead() bool {
	if m != nil && m.Read != nil {
		return *m.Read
	}
	return false
}

func (m *DeviceAccess_Access) GetWrite() bool {
	if m != nil && m.Write != nil {
		return *m.Write
	}
	return false
}

func (m *DeviceAccess_Access) GetMknod() bool {
	if m != nil && m.Mknod != nil {
		return *m.Mknod
	}
	return false
}

type DeviceWhitelist struct {
	AllowedDevices   []*DeviceAccess `protobuf:"bytes,1,rep,name=allowed_devices,json=allowed_devices" json:"allowed_devices,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *DeviceWhitelist) Reset()                    { *m = DeviceWhitelist{} }
func (m *DeviceWhitelist) String() string            { return proto.CompactTextString(m) }
func (*DeviceWhitelist) ProtoMessage()               {}
func (*DeviceWhitelist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func (m *DeviceWhitelist) GetAllowedDevices() []*DeviceAccess {
	if m != nil {
		return m.AllowedDevices
	}
	return nil
}

func init() {
	proto.RegisterType((*FrameworkID)(nil), "mesos.v1.FrameworkID")
	proto.RegisterType((*OfferID)(nil), "mesos.v1.OfferID")
	proto.RegisterType((*AgentID)(nil), "mesos.v1.AgentID")
	proto.RegisterType((*TaskID)(nil), "mesos.v1.TaskID")
	proto.RegisterType((*ExecutorID)(nil), "mesos.v1.ExecutorID")
	proto.RegisterType((*ContainerID)(nil), "mesos.v1.ContainerID")
	proto.RegisterType((*ResourceProviderID)(nil), "mesos.v1.ResourceProviderID")
	proto.RegisterType((*OperationID)(nil), "mesos.v1.OperationID")
	proto.RegisterType((*TimeInfo)(nil), "mesos.v1.TimeInfo")
	proto.RegisterType((*DurationInfo)(nil), "mesos.v1.DurationInfo")
	proto.RegisterType((*Address)(nil), "mesos.v1.Address")
	proto.RegisterType((*URL)(nil), "mesos.v1.URL")
	proto.RegisterType((*Unavailability)(nil), "mesos.v1.Unavailability")
	proto.RegisterType((*MachineID)(nil), "mesos.v1.MachineID")
	proto.RegisterType((*MachineInfo)(nil), "mesos.v1.MachineInfo")
	proto.RegisterType((*FrameworkInfo)(nil), "mesos.v1.FrameworkInfo")
	proto.RegisterType((*FrameworkInfo_Capability)(nil), "mesos.v1.FrameworkInfo.Capability")
	proto.RegisterType((*CheckInfo)(nil), "mesos.v1.CheckInfo")
	proto.RegisterType((*CheckInfo_Command)(nil), "mesos.v1.CheckInfo.Command")
	proto.RegisterType((*CheckInfo_Http)(nil), "mesos.v1.CheckInfo.Http")
	proto.RegisterType((*CheckInfo_Tcp)(nil), "mesos.v1.CheckInfo.Tcp")
	proto.RegisterType((*HealthCheck)(nil), "mesos.v1.HealthCheck")
	proto.RegisterType((*HealthCheck_HTTPCheckInfo)(nil), "mesos.v1.HealthCheck.HTTPCheckInfo")
	proto.RegisterType((*HealthCheck_TCPCheckInfo)(nil), "mesos.v1.HealthCheck.TCPCheckInfo")
	proto.RegisterType((*KillPolicy)(nil), "mesos.v1.KillPolicy")
	proto.RegisterType((*CommandInfo)(nil), "mesos.v1.CommandInfo")
	proto.RegisterType((*CommandInfo_URI)(nil), "mesos.v1.CommandInfo.URI")
	proto.RegisterType((*ExecutorInfo)(nil), "mesos.v1.ExecutorInfo")
	proto.RegisterType((*DomainInfo)(nil), "mesos.v1.DomainInfo")
	proto.RegisterType((*DomainInfo_FaultDomain)(nil), "mesos.v1.DomainInfo.FaultDomain")
	proto.RegisterType((*DomainInfo_FaultDomain_RegionInfo)(nil), "mesos.v1.DomainInfo.FaultDomain.RegionInfo")
	proto.RegisterType((*DomainInfo_FaultDomain_ZoneInfo)(nil), "mesos.v1.DomainInfo.FaultDomain.ZoneInfo")
	proto.RegisterType((*MasterInfo)(nil), "mesos.v1.MasterInfo")
	proto.RegisterType((*MasterInfo_Capability)(nil), "mesos.v1.MasterInfo.Capability")
	proto.RegisterType((*AgentInfo)(nil), "mesos.v1.AgentInfo")
	proto.RegisterType((*AgentInfo_Capability)(nil), "mesos.v1.AgentInfo.Capability")
	proto.RegisterType((*CSIPluginContainerInfo)(nil), "mesos.v1.CSIPluginContainerInfo")
	proto.RegisterType((*CSIPluginInfo)(nil), "mesos.v1.CSIPluginInfo")
	proto.RegisterType((*ResourceProviderInfo)(nil), "mesos.v1.ResourceProviderInfo")
	proto.RegisterType((*ResourceProviderInfo_Storage)(nil), "mesos.v1.ResourceProviderInfo.Storage")
	proto.RegisterType((*Value)(nil), "mesos.v1.Value")
	proto.RegisterType((*Value_Scalar)(nil), "mesos.v1.Value.Scalar")
	proto.RegisterType((*Value_Range)(nil), "mesos.v1.Value.Range")
	proto.RegisterType((*Value_Ranges)(nil), "mesos.v1.Value.Ranges")
	proto.RegisterType((*Value_Set)(nil), "mesos.v1.Value.Set")
	proto.RegisterType((*Value_Text)(nil), "mesos.v1.Value.Text")
	proto.RegisterType((*Attribute)(nil), "mesos.v1.Attribute")
	proto.RegisterType((*Resource)(nil), "mesos.v1.Resource")
	proto.RegisterType((*Resource_AllocationInfo)(nil), "mesos.v1.Resource.AllocationInfo")
	proto.RegisterType((*Resource_ReservationInfo)(nil), "mesos.v1.Resource.ReservationInfo")
	proto.RegisterType((*Resource_DiskInfo)(nil), "mesos.v1.Resource.DiskInfo")
	proto.RegisterType((*Resource_DiskInfo_Persistence)(nil), "mesos.v1.Resource.DiskInfo.Persistence")
	proto.RegisterType((*Resource_DiskInfo_Source)(nil), "mesos.v1.Resource.DiskInfo.Source")
	proto.RegisterType((*Resource_DiskInfo_Source_Path)(nil), "mesos.v1.Resource.DiskInfo.Source.Path")
	proto.RegisterType((*Resource_DiskInfo_Source_Mount)(nil), "mesos.v1.Resource.DiskInfo.Source.Mount")
	proto.RegisterType((*Resource_RevocableInfo)(nil), "mesos.v1.Resource.RevocableInfo")
	proto.RegisterType((*Resource_SharedInfo)(nil), "mesos.v1.Resource.SharedInfo")
	proto.RegisterType((*TrafficControlStatistics)(nil), "mesos.v1.TrafficControlStatistics")
	proto.RegisterType((*IpStatistics)(nil), "mesos.v1.IpStatistics")
	proto.RegisterType((*IcmpStatistics)(nil), "mesos.v1.IcmpStatistics")
	proto.RegisterType((*TcpStatistics)(nil), "mesos.v1.TcpStatistics")
	proto.RegisterType((*UdpStatistics)(nil), "mesos.v1.UdpStatistics")
	proto.RegisterType((*SNMPStatistics)(nil), "mesos.v1.SNMPStatistics")
	proto.RegisterType((*DiskStatistics)(nil), "mesos.v1.DiskStatistics")
	proto.RegisterType((*ResourceStatistics)(nil), "mesos.v1.ResourceStatistics")
	proto.RegisterType((*ResourceUsage)(nil), "mesos.v1.ResourceUsage")
	proto.RegisterType((*ResourceUsage_Executor)(nil), "mesos.v1.ResourceUsage.Executor")
	proto.RegisterType((*ResourceUsage_Executor_Task)(nil), "mesos.v1.ResourceUsage.Executor.Task")
	proto.RegisterType((*PerfStatistics)(nil), "mesos.v1.PerfStatistics")
	proto.RegisterType((*Request)(nil), "mesos.v1.Request")
	proto.RegisterType((*Offer)(nil), "mesos.v1.Offer")
	proto.RegisterType((*Offer_Operation)(nil), "mesos.v1.Offer.Operation")
	proto.RegisterType((*Offer_Operation_Launch)(nil), "mesos.v1.Offer.Operation.Launch")
	proto.RegisterType((*Offer_Operation_LaunchGroup)(nil), "mesos.v1.Offer.Operation.LaunchGroup")
	proto.RegisterType((*Offer_Operation_Reserve)(nil), "mesos.v1.Offer.Operation.Reserve")
	proto.RegisterType((*Offer_Operation_Unreserve)(nil), "mesos.v1.Offer.Operation.Unreserve")
	proto.RegisterType((*Offer_Operation_Create)(nil), "mesos.v1.Offer.Operation.Create")
	proto.RegisterType((*Offer_Operation_Destroy)(nil), "mesos.v1.Offer.Operation.Destroy")
	proto.RegisterType((*Offer_Operation_GrowVolume)(nil), "mesos.v1.Offer.Operation.GrowVolume")
	proto.RegisterType((*Offer_Operation_ShrinkVolume)(nil), "mesos.v1.Offer.Operation.ShrinkVolume")
	proto.RegisterType((*Offer_Operation_CreateVolume)(nil), "mesos.v1.Offer.Operation.CreateVolume")
	proto.RegisterType((*Offer_Operation_DestroyVolume)(nil), "mesos.v1.Offer.Operation.DestroyVolume")
	proto.RegisterType((*Offer_Operation_CreateBlock)(nil), "mesos.v1.Offer.Operation.CreateBlock")
	proto.RegisterType((*Offer_Operation_DestroyBlock)(nil), "mesos.v1.Offer.Operation.DestroyBlock")
	proto.RegisterType((*InverseOffer)(nil), "mesos.v1.InverseOffer")
	proto.RegisterType((*TaskInfo)(nil), "mesos.v1.TaskInfo")
	proto.RegisterType((*TaskGroupInfo)(nil), "mesos.v1.TaskGroupInfo")
	proto.RegisterType((*Task)(nil), "mesos.v1.Task")
	proto.RegisterType((*TaskResourceLimitation)(nil), "mesos.v1.TaskResourceLimitation")
	proto.RegisterType((*UUID)(nil), "mesos.v1.UUID")
	proto.RegisterType((*Operation)(nil), "mesos.v1.Operation")
	proto.RegisterType((*OperationStatus)(nil), "mesos.v1.OperationStatus")
	proto.RegisterType((*CheckStatusInfo)(nil), "mesos.v1.CheckStatusInfo")
	proto.RegisterType((*CheckStatusInfo_Command)(nil), "mesos.v1.CheckStatusInfo.Command")
	proto.RegisterType((*CheckStatusInfo_Http)(nil), "mesos.v1.CheckStatusInfo.Http")
	proto.RegisterType((*CheckStatusInfo_Tcp)(nil), "mesos.v1.CheckStatusInfo.Tcp")
	proto.RegisterType((*TaskStatus)(nil), "mesos.v1.TaskStatus")
	proto.RegisterType((*Filters)(nil), "mesos.v1.Filters")
	proto.RegisterType((*Environment)(nil), "mesos.v1.Environment")
	proto.RegisterType((*Environment_Variable)(nil), "mesos.v1.Environment.Variable")
	proto.RegisterType((*Parameter)(nil), "mesos.v1.Parameter")
	proto.RegisterType((*Parameters)(nil), "mesos.v1.Parameters")
	proto.RegisterType((*Credential)(nil), "mesos.v1.Credential")
	proto.RegisterType((*Credentials)(nil), "mesos.v1.Credentials")
	proto.RegisterType((*Secret)(nil), "mesos.v1.Secret")
	proto.RegisterType((*Secret_Reference)(nil), "mesos.v1.Secret.Reference")
	proto.RegisterType((*Secret_Value)(nil), "mesos.v1.Secret.Value")
	proto.RegisterType((*RateLimit)(nil), "mesos.v1.RateLimit")
	proto.RegisterType((*RateLimits)(nil), "mesos.v1.RateLimits")
	proto.RegisterType((*Image)(nil), "mesos.v1.Image")
	proto.RegisterType((*Image_Appc)(nil), "mesos.v1.Image.Appc")
	proto.RegisterType((*Image_Docker)(nil), "mesos.v1.Image.Docker")
	proto.RegisterType((*MountPropagation)(nil), "mesos.v1.MountPropagation")
	proto.RegisterType((*Volume)(nil), "mesos.v1.Volume")
	proto.RegisterType((*Volume_Source)(nil), "mesos.v1.Volume.Source")
	proto.RegisterType((*Volume_Source_DockerVolume)(nil), "mesos.v1.Volume.Source.DockerVolume")
	proto.RegisterType((*Volume_Source_HostPath)(nil), "mesos.v1.Volume.Source.HostPath")
	proto.RegisterType((*Volume_Source_SandboxPath)(nil), "mesos.v1.Volume.Source.SandboxPath")
	proto.RegisterType((*NetworkInfo)(nil), "mesos.v1.NetworkInfo")
	proto.RegisterType((*NetworkInfo_IPAddress)(nil), "mesos.v1.NetworkInfo.IPAddress")
	proto.RegisterType((*NetworkInfo_PortMapping)(nil), "mesos.v1.NetworkInfo.PortMapping")
	proto.RegisterType((*CapabilityInfo)(nil), "mesos.v1.CapabilityInfo")
	proto.RegisterType((*LinuxInfo)(nil), "mesos.v1.LinuxInfo")
	proto.RegisterType((*RLimitInfo)(nil), "mesos.v1.RLimitInfo")
	proto.RegisterType((*RLimitInfo_RLimit)(nil), "mesos.v1.RLimitInfo.RLimit")
	proto.RegisterType((*TTYInfo)(nil), "mesos.v1.TTYInfo")
	proto.RegisterType((*TTYInfo_WindowSize)(nil), "mesos.v1.TTYInfo.WindowSize")
	proto.RegisterType((*ContainerInfo)(nil), "mesos.v1.ContainerInfo")
	proto.RegisterType((*ContainerInfo_DockerInfo)(nil), "mesos.v1.ContainerInfo.DockerInfo")
	proto.RegisterType((*ContainerInfo_DockerInfo_PortMapping)(nil), "mesos.v1.ContainerInfo.DockerInfo.PortMapping")
	proto.RegisterType((*ContainerInfo_MesosInfo)(nil), "mesos.v1.ContainerInfo.MesosInfo")
	proto.RegisterType((*ContainerStatus)(nil), "mesos.v1.ContainerStatus")
	proto.RegisterType((*CgroupInfo)(nil), "mesos.v1.CgroupInfo")
	proto.RegisterType((*CgroupInfo_Blkio)(nil), "mesos.v1.CgroupInfo.Blkio")
	proto.RegisterType((*CgroupInfo_Blkio_Value)(nil), "mesos.v1.CgroupInfo.Blkio.Value")
	proto.RegisterType((*CgroupInfo_Blkio_CFQ)(nil), "mesos.v1.CgroupInfo.Blkio.CFQ")
	proto.RegisterType((*CgroupInfo_Blkio_CFQ_Statistics)(nil), "mesos.v1.CgroupInfo.Blkio.CFQ.Statistics")
	proto.RegisterType((*CgroupInfo_Blkio_Throttling)(nil), "mesos.v1.CgroupInfo.Blkio.Throttling")
	proto.RegisterType((*CgroupInfo_Blkio_Throttling_Statistics)(nil), "mesos.v1.CgroupInfo.Blkio.Throttling.Statistics")
	proto.RegisterType((*CgroupInfo_Blkio_Statistics)(nil), "mesos.v1.CgroupInfo.Blkio.Statistics")
	proto.RegisterType((*CgroupInfo_NetCls)(nil), "mesos.v1.CgroupInfo.NetCls")
	proto.RegisterType((*Labels)(nil), "mesos.v1.Labels")
	proto.RegisterType((*Label)(nil), "mesos.v1.Label")
	proto.RegisterType((*Port)(nil), "mesos.v1.Port")
	proto.RegisterType((*Ports)(nil), "mesos.v1.Ports")
	proto.RegisterType((*DiscoveryInfo)(nil), "mesos.v1.DiscoveryInfo")
	proto.RegisterType((*WeightInfo)(nil), "mesos.v1.WeightInfo")
	proto.RegisterType((*VersionInfo)(nil), "mesos.v1.VersionInfo")
	proto.RegisterType((*Flag)(nil), "mesos.v1.Flag")
	proto.RegisterType((*Role)(nil), "mesos.v1.Role")
	proto.RegisterType((*Metric)(nil), "mesos.v1.Metric")
	proto.RegisterType((*FileInfo)(nil), "mesos.v1.FileInfo")
	proto.RegisterType((*Device)(nil), "mesos.v1.Device")
	proto.RegisterType((*Device_Number)(nil), "mesos.v1.Device.Number")
	proto.RegisterType((*DeviceAccess)(nil), "mesos.v1.DeviceAccess")
	proto.RegisterType((*DeviceAccess_Access)(nil), "mesos.v1.DeviceAccess.Access")
	proto.RegisterType((*DeviceWhitelist)(nil), "mesos.v1.DeviceWhitelist")
	proto.RegisterEnum("mesos.v1.Status", Status_name, Status_value)
	proto.RegisterEnum("mesos.v1.TaskState", TaskState_name, TaskState_value)
	proto.RegisterEnum("mesos.v1.OperationState", OperationState_name, OperationState_value)
	proto.RegisterEnum("mesos.v1.MachineInfo_Mode", MachineInfo_Mode_name, MachineInfo_Mode_value)
	proto.RegisterEnum("mesos.v1.FrameworkInfo_Capability_Type", FrameworkInfo_Capability_Type_name, FrameworkInfo_Capability_Type_value)
	proto.RegisterEnum("mesos.v1.CheckInfo_Type", CheckInfo_Type_name, CheckInfo_Type_value)
	proto.RegisterEnum("mesos.v1.HealthCheck_Type", HealthCheck_Type_name, HealthCheck_Type_value)
	proto.RegisterEnum("mesos.v1.ExecutorInfo_Type", ExecutorInfo_Type_name, ExecutorInfo_Type_value)
	proto.RegisterEnum("mesos.v1.MasterInfo_Capability_Type", MasterInfo_Capability_Type_name, MasterInfo_Capability_Type_value)
	proto.RegisterEnum("mesos.v1.AgentInfo_Capability_Type", AgentInfo_Capability_Type_name, AgentInfo_Capability_Type_value)
	proto.RegisterEnum("mesos.v1.CSIPluginContainerInfo_Service", CSIPluginContainerInfo_Service_name, CSIPluginContainerInfo_Service_value)
	proto.RegisterEnum("mesos.v1.Value_Type", Value_Type_name, Value_Type_value)
	proto.RegisterEnum("mesos.v1.Resource_ReservationInfo_Type", Resource_ReservationInfo_Type_name, Resource_ReservationInfo_Type_value)
	proto.RegisterEnum("mesos.v1.Resource_DiskInfo_Source_Type", Resource_DiskInfo_Source_Type_name, Resource_DiskInfo_Source_Type_value)
	proto.RegisterEnum("mesos.v1.Offer_Operation_Type", Offer_Operation_Type_name, Offer_Operation_Type_value)
	proto.RegisterEnum("mesos.v1.TaskStatus_Source", TaskStatus_Source_name, TaskStatus_Source_value)
	proto.RegisterEnum("mesos.v1.TaskStatus_Reason", TaskStatus_Reason_name, TaskStatus_Reason_value)
	proto.RegisterEnum("mesos.v1.Environment_Variable_Type", Environment_Variable_Type_name, Environment_Variable_Type_value)
	proto.RegisterEnum("mesos.v1.Secret_Type", Secret_Type_name, Secret_Type_value)
	proto.RegisterEnum("mesos.v1.Image_Type", Image_Type_name, Image_Type_value)
	proto.RegisterEnum("mesos.v1.MountPropagation_Mode", MountPropagation_Mode_name, MountPropagation_Mode_value)
	proto.RegisterEnum("mesos.v1.Volume_Mode", Volume_Mode_name, Volume_Mode_value)
	proto.RegisterEnum("mesos.v1.Volume_Source_Type", Volume_Source_Type_name, Volume_Source_Type_value)
	proto.RegisterEnum("mesos.v1.Volume_Source_SandboxPath_Type", Volume_Source_SandboxPath_Type_name, Volume_Source_SandboxPath_Type_value)
	proto.RegisterEnum("mesos.v1.NetworkInfo_Protocol", NetworkInfo_Protocol_name, NetworkInfo_Protocol_value)
	proto.RegisterEnum("mesos.v1.CapabilityInfo_Capability", CapabilityInfo_Capability_name, CapabilityInfo_Capability_value)
	proto.RegisterEnum("mesos.v1.RLimitInfo_RLimit_Type", RLimitInfo_RLimit_Type_name, RLimitInfo_RLimit_Type_value)
	proto.RegisterEnum("mesos.v1.ContainerInfo_Type", ContainerInfo_Type_name, ContainerInfo_Type_value)
	proto.RegisterEnum("mesos.v1.ContainerInfo_DockerInfo_Network", ContainerInfo_DockerInfo_Network_name, ContainerInfo_DockerInfo_Network_value)
	proto.RegisterEnum("mesos.v1.CgroupInfo_Blkio_Operation", CgroupInfo_Blkio_Operation_name, CgroupInfo_Blkio_Operation_value)
	proto.RegisterEnum("mesos.v1.DiscoveryInfo_Visibility", DiscoveryInfo_Visibility_name, DiscoveryInfo_Visibility_value)
}

func init() { proto.RegisterFile("mesos.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 11199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x7d, 0x6b, 0x8c, 0x1b, 0xc9,
	0x76, 0xde, 0xe5, 0x9b, 0x3c, 0x24, 0x67, 0x5a, 0xa5, 0xc7, 0x8e, 0xa8, 0xe7, 0xf6, 0xae, 0x76,
	0x47, 0x5a, 0xed, 0xac, 0xa4, 0x5d, 0xdd, 0xdd, 0x95, 0xee, 0x5e, 0x2f, 0x45, 0xf6, 0xcc, 0xf0,
	0x6a, 0xf8, 0xb8, 0x45, 0x52, 0xda, 0xbd, 0x08, 0xd0, 0x68, 0x35, 0x7b, 0x66, 0x3a, 0x22, 0xd9,
	0xdc, 0xee, 0xe6, 0x48, 0xf2, 0x2f, 0x27, 0xbe, 0x71, 0x1c, 0xe7, 0xda, 0x40, 0xfc, 0xc3, 0x70,
	0x62, 0x38, 0x08, 0x02, 0x04, 0x01, 0x12, 0x24, 0xff, 0x63, 0x38, 0x8f, 0x1f, 0x31, 0xe0, 0x04,
	0xfe, 0x13, 0x04, 0xb1, 0x83, 0x24, 0x80, 0x11, 0x20, 0x3f, 0xec, 0xd8, 0x71, 0xe2, 0x3c, 0x9c,
	0xc4, 0x49, 0xec, 0xa0, 0x9e, 0x5d, 0xdd, 0x24, 0x67, 0x46, 0xeb, 0x8b, 0x00, 0xf9, 0xc5, 0xae,
	0x53, 0xdf, 0xa9, 0xc7, 0xa9, 0x53, 0x55, 0xe7, 0x54, 0x57, 0x1f, 0x42, 0x79, 0xe2, 0x04, 0x5e,
	0xb0, 0x35, 0xf3, 0xbd, 0xd0, 0x43, 0x45, 0x96, 0x38, 0xba, 0xab, 0xbf, 0x05, 0xe5, 0x6d, 0xdf,
	0x9a, 0x38, 0x2f, 0x3c, 0xff, 0x79, 0xab, 0x89, 0xce, 0x41, 0xee, 0xc8, 0x1a, 0xcf, 0x9d, 0x8d,
	0xd4, 0xf5, 0xf4, 0x66, 0x09, 0xb3, 0x84, 0x7e, 0x0d, 0x0a, 0xdd, 0xfd, 0x7d, 0xc7, 0x3f, 0x0e,
	0x50, 0x3f, 0x70, 0xa6, 0xe1, 0x4a, 0xc0, 0x55, 0xc8, 0x0f, 0xac, 0x60, 0x75, 0x0d, 0x3a, 0x80,
	0xf1, 0xd2, 0xb1, 0xe7, 0xa1, 0xb7, 0xba, 0x12, 0x0c, 0xe5, 0x86, 0x37, 0x0d, 0x2d, 0x77, 0xba,
	0xba, 0x25, 0xe8, 0x7d, 0xc8, 0xcf, 0x2c, 0xdf, 0x99, 0x86, 0x1b, 0xe9, 0xeb, 0xa9, 0xcd, 0xf2,
	0xbd, 0xf3, 0x5b, 0xa2, 0xab, 0x5b, 0x0a, 0x33, 0xe6, 0x20, 0xfd, 0x16, 0x20, 0xec, 0x04, 0xde,
	0xdc, 0xb7, 0x9d, 0x9e, 0xef, 0x1d, 0xb9, 0xa3, 0x63, 0x3a, 0xf9, 0x16, 0x94, 0xbb, 0x33, 0xc7,
	0xb7, 0x42, 0xd7, 0x9b, 0xae, 0x04, 0xdd, 0x86, 0xe2, 0xc0, 0x9d, 0x38, 0xad, 0xe9, 0xbe, 0x87,
	0xae, 0x43, 0x79, 0x6a, 0x4d, 0xbd, 0xc0, 0xb1, 0xbd, 0xe9, 0x28, 0xa0, 0xb8, 0x0c, 0x56, 0x49,
	0xfa, 0x1d, 0xa8, 0x34, 0xe7, 0xbc, 0xc4, 0xd3, 0x71, 0xb4, 0xa0, 0x50, 0x1f, 0x8d, 0x7c, 0x27,
	0x08, 0x50, 0x0d, 0x8a, 0x87, 0x5e, 0x10, 0x4e, 0xad, 0x09, 0x69, 0x43, 0x6a, 0xb3, 0x84, 0x65,
	0x1a, 0xad, 0x41, 0xda, 0x9d, 0x51, 0x11, 0x94, 0x70, 0xda, 0x9d, 0x21, 0x04, 0xd9, 0x99, 0xe7,
	0x87, 0x1b, 0x99, 0xeb, 0xe9, 0xcd, 0x1c, 0xa6, 0xcf, 0xfa, 0xdf, 0x48, 0x41, 0x66, 0x88, 0xf7,
	0xd0, 0x05, 0xc8, 0x07, 0xf6, 0xa1, 0x33, 0x11, 0x3d, 0xe1, 0x29, 0xf4, 0x1e, 0x14, 0x2c, 0x56,
	0xd5, 0x46, 0xfa, 0x7a, 0x7a, 0xb3, 0x7c, 0xef, 0x4c, 0x24, 0x4b, 0xde, 0x06, 0x2c, 0x10, 0xb4,
	0x02, 0x2b, 0x3c, 0xdc, 0xc8, 0xd0, 0x2a, 0xe9, 0x33, 0xba, 0x09, 0xb9, 0xaf, 0xe6, 0x8e, 0xff,
	0x6a, 0x23, 0x7b, 0x3d, 0xb3, 0x59, 0xbe, 0x77, 0x36, 0x62, 0xef, 0x59, 0x44, 0xe7, 0x42, 0xc7,
	0xc7, 0x0c, 0x41, 0xfa, 0xb2, 0xef, 0x5b, 0x07, 0x13, 0x32, 0x70, 0x39, 0xd6, 0x17, 0x91, 0xd6,
	0xa7, 0xb0, 0x36, 0x9c, 0x5a, 0x47, 0x96, 0x3b, 0xb6, 0x9e, 0xb9, 0x63, 0x37, 0x7c, 0x85, 0x36,
	0x21, 0x17, 0x84, 0x96, 0x1f, 0xd2, 0x06, 0x97, 0xef, 0xa1, 0xa8, 0x60, 0x21, 0x7b, 0xcc, 0x00,
	0xe8, 0x1e, 0x14, 0x47, 0x5c, 0xc0, 0x5c, 0x21, 0x2e, 0x44, 0x60, 0x55, 0xf4, 0x58, 0xe2, 0xf4,
	0x8f, 0xa1, 0xd4, 0xb6, 0xec, 0x43, 0x77, 0xea, 0xb4, 0x9a, 0xaf, 0x23, 0x64, 0xfd, 0xd7, 0x52,
	0x50, 0x16, 0x9c, 0x64, 0x34, 0xdf, 0x82, 0xb4, 0x3b, 0xe2, 0x6d, 0x54, 0x3a, 0x2f, 0x0b, 0xc7,
	0x69, 0x77, 0x84, 0xb6, 0x20, 0x3b, 0xf1, 0x46, 0x0e, 0x2d, 0x66, 0xed, 0x5e, 0x6d, 0x11, 0x36,
	0xdd, 0xf7, 0xb6, 0xda, 0xde, 0xc8, 0xc1, 0x14, 0x87, 0x3e, 0x87, 0xb5, 0x79, 0x4c, 0x1a, 0x54,
	0xe4, 0xe5, 0x7b, 0x1b, 0x11, 0x67, 0x5c, 0x5a, 0x38, 0x81, 0xd7, 0xdf, 0x81, 0x2c, 0x29, 0x0f,
	0xe5, 0x21, 0x3d, 0xec, 0x69, 0x29, 0x54, 0x81, 0x62, 0x13, 0xd7, 0x5b, 0x9d, 0x56, 0x67, 0x47,
	0x4b, 0xa3, 0x22, 0x64, 0x9b, 0xdd, 0xa7, 0x1d, 0x2d, 0xa3, 0xff, 0x72, 0x0e, 0xaa, 0xd1, 0xda,
	0x40, 0x3a, 0x84, 0x20, 0x3b, 0x0f, 0x1c, 0x9f, 0xeb, 0x09, 0x7d, 0x26, 0x34, 0x2a, 0x9c, 0x34,
	0xa3, 0x51, 0xc1, 0xdc, 0xa0, 0x1d, 0xcf, 0x24, 0x27, 0xa0, 0xb2, 0xd0, 0xd0, 0xae, 0xdf, 0x06,
	0x6d, 0xdf, 0x72, 0xc7, 0xde, 0x91, 0xe3, 0x9b, 0xa1, 0x3b, 0x71, 0xbc, 0x79, 0xb8, 0x91, 0xbd,
	0x9e, 0xda, 0x4c, 0x3d, 0x48, 0xdd, 0xc1, 0xeb, 0x22, 0x6b, 0xc0, 0x72, 0xd0, 0x0d, 0x00, 0xfb,
	0xd0, 0xb1, 0x9f, 0xcf, 0x3c, 0x97, 0x2b, 0x49, 0xf1, 0x41, 0x6e, 0xdf, 0x1a, 0x07, 0x0e, 0x56,
	0x32, 0xd0, 0x45, 0xc8, 0xfa, 0xde, 0xd8, 0xd9, 0xc8, 0x93, 0x61, 0x79, 0x90, 0xba, 0xf5, 0x28,
	0xbd, 0x91, 0xc2, 0x94, 0x44, 0x66, 0x2c, 0xf9, 0x0d, 0x36, 0x2a, 0xd7, 0x33, 0x64, 0xc6, 0xd2,
	0x44, 0x6c, 0x84, 0x0b, 0x89, 0x11, 0xbe, 0x0c, 0xa5, 0x99, 0xef, 0x4e, 0x6d, 0x77, 0x66, 0x8d,
	0x37, 0x8a, 0x34, 0x33, 0x22, 0xa0, 0x4b, 0x50, 0x7a, 0xe1, 0x3c, 0x9b, 0xbb, 0xe6, 0xdc, 0x1f,
	0x6f, 0x94, 0x18, 0x2b, 0x25, 0x0c, 0xfd, 0x31, 0xda, 0x86, 0x8a, 0x6d, 0xcd, 0x98, 0xcc, 0x5d,
	0x27, 0xd8, 0x00, 0x3a, 0x07, 0xf4, 0x65, 0xd2, 0x20, 0x23, 0xdc, 0x10, 0xd8, 0x57, 0x38, 0xc6,
	0x87, 0x36, 0x21, 0x3f, 0xb6, 0x9e, 0x39, 0xe3, 0x60, 0xa3, 0x4c, 0xe5, 0xa9, 0x45, 0x25, 0xec,
	0x51, 0x3a, 0xe6, 0xf9, 0xb5, 0x1f, 0xa4, 0x01, 0xa2, 0x62, 0xd0, 0x43, 0xc8, 0x86, 0xaf, 0x66,
	0x4c, 0x6b, 0xd7, 0xee, 0xbd, 0x7b, 0x72, 0xc5, 0x5b, 0x83, 0x57, 0x33, 0x07, 0x53, 0x26, 0xfd,
	0x1f, 0xa5, 0x20, 0x4b, 0x92, 0xa8, 0x0c, 0x85, 0x61, 0xe7, 0x71, 0x87, 0x68, 0xc4, 0x37, 0xd0,
	0x1b, 0x70, 0x16, 0x1b, 0x4f, 0xba, 0x8d, 0xfa, 0xa3, 0x3d, 0xc3, 0xc4, 0x46, 0xbf, 0x3b, 0xc4,
	0x0d, 0xa3, 0xaf, 0xa5, 0xd0, 0x05, 0x40, 0x83, 0x7a, 0xff, 0xb1, 0xf9, 0xb8, 0xb5, 0xb7, 0xd7,
	0xea, 0xec, 0x98, 0xfd, 0x41, 0x7d, 0x60, 0x68, 0x69, 0x74, 0x06, 0xaa, 0x3b, 0xbd, 0xa1, 0x02,
	0xcd, 0xa0, 0x73, 0xa0, 0xf5, 0x77, 0xeb, 0xd8, 0x68, 0x2a, 0xd4, 0x2c, 0x3a, 0x0b, 0xeb, 0xbd,
	0x3a, 0x1e, 0xb4, 0x06, 0xad, 0x6e, 0xc7, 0xac, 0x3f, 0xad, 0x63, 0x43, 0xcb, 0xa1, 0x35, 0x80,
	0xf6, 0x70, 0x6f, 0xd0, 0x32, 0x71, 0x77, 0xcf, 0xd0, 0xf2, 0xa8, 0x06, 0x17, 0xb0, 0xd1, 0x37,
	0xf0, 0x93, 0x3a, 0x85, 0x61, 0x63, 0xbb, 0xd5, 0x31, 0xda, 0x46, 0x67, 0xa0, 0x15, 0x90, 0x06,
	0x15, 0x6c, 0xec, 0x44, 0xdc, 0x45, 0xfd, 0xa7, 0xb2, 0x50, 0x6a, 0x10, 0xbd, 0xa0, 0xaa, 0x7b,
	0x3b, 0x26, 0x0d, 0x65, 0xb2, 0x48, 0x88, 0xd2, 0x7d, 0x74, 0x1f, 0x0a, 0xb6, 0x37, 0x99, 0x58,
	0xd3, 0x11, 0x5f, 0x35, 0x2e, 0x2d, 0x63, 0x68, 0x30, 0x08, 0x16, 0x58, 0x52, 0xc9, 0x61, 0x18,
	0xce, 0x16, 0x67, 0x64, 0xc4, 0xb3, 0x1b, 0x86, 0x33, 0x4c, 0x51, 0xe8, 0x26, 0x64, 0x42, 0x7b,
	0x46, 0x75, 0xae, 0x7c, 0xef, 0x8d, 0xa5, 0x2d, 0xb2, 0x67, 0x98, 0x60, 0xd0, 0xbb, 0x50, 0x1d,
	0x39, 0x63, 0xeb, 0x95, 0x29, 0x76, 0x06, 0x36, 0x4d, 0xd2, 0x77, 0xef, 0xe3, 0x0a, 0xcd, 0xe8,
	0x33, 0x3a, 0x7a, 0x1f, 0x34, 0x77, 0x1a, 0x3a, 0xfe, 0x91, 0x35, 0x96, 0xd8, 0x1c, 0xc7, 0xde,
	0xc1, 0xeb, 0x22, 0x4f, 0xc0, 0xdf, 0x83, 0x75, 0x3e, 0xf1, 0x24, 0x3a, 0xcf, 0xd0, 0xf7, 0xee,
	0xe0, 0x35, 0x9e, 0xc5, 0xc1, 0xb5, 0x07, 0x50, 0xe0, 0x3d, 0x46, 0x1f, 0x44, 0xf2, 0x61, 0xcb,
	0x5b, 0x6c, 0x9b, 0xa5, 0x19, 0x74, 0x51, 0x15, 0xa8, 0xda, 0x16, 0x64, 0x49, 0xcf, 0xe5, 0x3e,
	0x44, 0xb8, 0xaa, 0x6c, 0x1f, 0x92, 0x5b, 0x47, 0x3a, 0xda, 0x3a, 0x6a, 0x17, 0x21, 0x33, 0xb0,
	0x97, 0xc2, 0xf5, 0x0f, 0x97, 0x69, 0x66, 0x19, 0x0a, 0x8d, 0x6e, 0xbb, 0x5d, 0xef, 0x34, 0xb5,
	0x14, 0x59, 0xc2, 0x76, 0x07, 0x83, 0x9e, 0x96, 0x46, 0x05, 0xc8, 0x0c, 0x1a, 0x3d, 0x2d, 0xa3,
	0xff, 0xe5, 0x3c, 0x94, 0x77, 0x1d, 0x6b, 0x1c, 0x1e, 0x52, 0xe9, 0x2e, 0x0a, 0x34, 0xfd, 0x1a,
	0x02, 0xcd, 0xbc, 0x96, 0x40, 0xb3, 0xab, 0x04, 0x8a, 0x3e, 0x82, 0x73, 0xb6, 0x37, 0x0d, 0x88,
	0xd9, 0xe3, 0x1e, 0x39, 0x26, 0x59, 0xf0, 0xe6, 0xbe, 0xc3, 0x06, 0xac, 0xfa, 0x20, 0xf5, 0x21,
	0x3e, 0xab, 0x64, 0x6f, 0xf3, 0x5c, 0xc2, 0x75, 0xe0, 0x5b, 0xb6, 0x63, 0xce, 0x1c, 0xdf, 0xf5,
	0x46, 0xc9, 0x81, 0xbb, 0x7b, 0x07, 0x23, 0x9a, 0xdf, 0xa3, 0xd9, 0xa2, 0xae, 0x2d, 0xae, 0xff,
	0xc5, 0xe4, 0x36, 0xa3, 0x48, 0x45, 0x9d, 0x01, 0xca, 0x08, 0x17, 0x16, 0x0d, 0xa9, 0xc5, 0x11,
	0x46, 0x1f, 0x73, 0xdd, 0x4f, 0x51, 0xf4, 0x5b, 0xcb, 0x2b, 0x20, 0xc3, 0x22, 0xd5, 0x9b, 0x4f,
	0x83, 0x8f, 0xd8, 0x34, 0x28, 0x51, 0x3e, 0x7d, 0x45, 0xc3, 0x1a, 0x0a, 0x1b, 0x81, 0xd7, 0xfe,
	0x4e, 0x0a, 0xaa, 0xb1, 0xd2, 0xd0, 0xe7, 0x50, 0xa4, 0xc6, 0xad, 0xed, 0x8d, 0xa9, 0x04, 0xd7,
	0xee, 0x5d, 0x8d, 0x0a, 0xeb, 0x38, 0xa1, 0x5c, 0xf1, 0x7a, 0x1c, 0xf5, 0x20, 0xdb, 0xea, 0x1d,
	0x7d, 0x84, 0x25, 0x97, 0x62, 0x08, 0x31, 0x2b, 0x46, 0x18, 0x42, 0xa7, 0x54, 0x5a, 0xb2, 0x93,
	0x04, 0xa1, 0x15, 0xce, 0x03, 0x27, 0xa0, 0x26, 0x4f, 0x15, 0xcb, 0x74, 0x6d, 0x04, 0x15, 0xb5,
	0x13, 0xb1, 0xd6, 0xa6, 0xbf, 0x56, 0x6b, 0x7f, 0x68, 0x73, 0x63, 0x07, 0xe0, 0xb1, 0x3b, 0x1e,
	0xf7, 0xbc, 0xb1, 0x6b, 0xbf, 0x42, 0x9f, 0x42, 0x45, 0x55, 0x2f, 0x3e, 0x9e, 0xab, 0xac, 0xa6,
	0xb2, 0xa2, 0x6a, 0xfa, 0xef, 0xa5, 0x89, 0x85, 0x2e, 0x75, 0x03, 0xbd, 0x0f, 0xd9, 0xb9, 0xef,
	0x12, 0x33, 0x96, 0x6c, 0x7d, 0x17, 0x97, 0x2a, 0xd0, 0xd6, 0x10, 0xb7, 0x30, 0x85, 0xa1, 0x8f,
	0xa1, 0xec, 0x4c, 0x8f, 0x5c, 0xdf, 0x9b, 0x4e, 0x96, 0xda, 0xef, 0x46, 0x94, 0x89, 0x55, 0x24,
	0xaa, 0x41, 0x2e, 0x38, 0x74, 0xc6, 0x63, 0x3a, 0x05, 0x8a, 0x0f, 0xb2, 0xa1, 0x3f, 0x77, 0x30,
	0x23, 0x45, 0x56, 0x3a, 0x1b, 0x52, 0xee, 0x25, 0x5c, 0x86, 0x92, 0xe5, 0x1f, 0xcc, 0x09, 0x77,
	0xb0, 0x51, 0xa0, 0xd6, 0x40, 0x44, 0x90, 0x66, 0x0e, 0x33, 0x44, 0xe9, 0x73, 0xed, 0x67, 0xa9,
	0xb1, 0xdc, 0x5a, 0xe1, 0x75, 0x5c, 0x05, 0x70, 0xa8, 0xfb, 0x62, 0x3d, 0x1b, 0x33, 0x53, 0xae,
	0x88, 0x15, 0x0a, 0xba, 0x0a, 0x05, 0xe7, 0x65, 0xe8, 0x5b, 0x76, 0x48, 0xdb, 0x21, 0xda, 0x28,
	0x88, 0xa4, 0x54, 0xdb, 0xb2, 0x0f, 0x1d, 0xba, 0x58, 0x14, 0x31, 0x4b, 0xa0, 0x6b, 0x50, 0xf6,
	0xe6, 0xe1, 0x6c, 0x1e, 0x9a, 0xfb, 0xee, 0xd8, 0xe1, 0xcd, 0x01, 0x46, 0xda, 0x76, 0xc7, 0x8e,
	0xfe, 0xdb, 0x59, 0xa8, 0x48, 0xb7, 0x89, 0x48, 0xfc, 0x03, 0x3e, 0xcb, 0xd7, 0xa9, 0x46, 0x29,
	0x9b, 0x96, 0x8a, 0x8a, 0x6f, 0x74, 0x65, 0x87, 0x67, 0x99, 0xd2, 0x56, 0x3d, 0xb7, 0x84, 0xaf,
	0x29, 0xfa, 0xe3, 0xf9, 0xad, 0x11, 0xfa, 0x04, 0x2a, 0xfb, 0xc2, 0x8a, 0x20, 0x7c, 0xc5, 0xe3,
	0x4c, 0xbd, 0xb2, 0x84, 0xb6, 0x46, 0xaf, 0xbf, 0xae, 0xdc, 0x87, 0x92, 0x2d, 0x1c, 0x37, 0x6e,
	0x02, 0xbd, 0xb1, 0xcc, 0xa7, 0x23, 0x4c, 0x11, 0x12, 0xdd, 0x81, 0x92, 0xcf, 0x1d, 0x3b, 0xb2,
	0xa0, 0x66, 0xe2, 0x6e, 0x82, 0xf0, 0xf9, 0x70, 0x04, 0x92, 0x86, 0x2c, 0x33, 0xe4, 0x98, 0x21,
	0x5b, 0x83, 0x3c, 0xcb, 0xde, 0x00, 0x42, 0xa5, 0xb6, 0x24, 0xa7, 0x10, 0xfc, 0xc8, 0x0a, 0x2d,
	0x3a, 0x64, 0x15, 0x4c, 0x9f, 0x49, 0x63, 0x47, 0x6e, 0x60, 0x13, 0xb3, 0xf5, 0xd5, 0x46, 0x25,
	0xd9, 0xd8, 0xa6, 0xc8, 0x62, 0x8d, 0x95, 0x48, 0xf4, 0x1d, 0x38, 0x1f, 0x1c, 0xce, 0xc3, 0x91,
	0xf7, 0x62, 0x6a, 0xc6, 0x26, 0x5f, 0xf5, 0xd8, 0xc9, 0x77, 0x56, 0x30, 0xed, 0x44, 0x93, 0x50,
	0xb1, 0x17, 0xd7, 0x8e, 0xb7, 0x17, 0xf5, 0xdb, 0x2b, 0x16, 0x8b, 0xa6, 0xb1, 0x5d, 0x1f, 0xee,
	0x0d, 0xb4, 0x14, 0x02, 0xc8, 0x37, 0x86, 0xfd, 0x41, 0xb7, 0xad, 0xa5, 0xf5, 0xbf, 0x99, 0x06,
	0x68, 0x7a, 0x13, 0xcb, 0x65, 0x9e, 0x6a, 0x03, 0x2a, 0xfb, 0xd6, 0x7c, 0x1c, 0x9a, 0x23, 0x4a,
	0xe3, 0xcb, 0xc4, 0x75, 0xa5, 0xa5, 0x12, 0xbb, 0xb5, 0x4d, 0x80, 0x2c, 0x8d, 0xcb, 0xfb, 0x51,
	0xa2, 0xf6, 0xcf, 0x53, 0x50, 0x56, 0x32, 0x51, 0x03, 0xf2, 0xbe, 0x73, 0x40, 0x7c, 0x35, 0xa6,
	0x88, 0xef, 0x9d, 0x54, 0xdc, 0x16, 0xa6, 0x70, 0x2a, 0x0d, 0xce, 0x8a, 0x3e, 0x83, 0xec, 0x8f,
	0x7a, 0x53, 0x87, 0xfb, 0xac, 0x37, 0x4f, 0x2c, 0xe2, 0x7b, 0x1e, 0x73, 0xb2, 0x30, 0x65, 0xab,
	0x5d, 0x07, 0x88, 0x0a, 0x95, 0x4a, 0x91, 0x8a, 0xbc, 0x9b, 0xda, 0x55, 0x28, 0x0a, 0x9e, 0x65,
	0xf9, 0xfa, 0x2f, 0x66, 0x00, 0xda, 0x56, 0x10, 0x32, 0xa5, 0xa4, 0x5e, 0xe2, 0x88, 0x03, 0x88,
	0xd7, 0x23, 0xbc, 0x46, 0xb2, 0x6a, 0x13, 0xd7, 0x7c, 0x43, 0x71, 0xcd, 0xab, 0x0f, 0xb2, 0xf7,
	0xef, 0xdc, 0xbf, 0xc3, 0xf7, 0x18, 0x0d, 0x32, 0x33, 0x77, 0x44, 0x15, 0xac, 0x84, 0xc9, 0x63,
	0xcc, 0x57, 0xc9, 0x25, 0x7c, 0x95, 0x0d, 0x28, 0x1c, 0x39, 0x7e, 0x40, 0xa4, 0x47, 0x7d, 0x1f,
	0x2c, 0x92, 0xaa, 0x23, 0xcf, 0xe6, 0xdc, 0x71, 0x8e, 0xfc, 0x6d, 0xc8, 0xf3, 0x21, 0x65, 0x93,
	0xfa, 0xdc, 0x32, 0x01, 0x62, 0x8e, 0x21, 0x6a, 0x10, 0xf3, 0x72, 0x4a, 0x74, 0xa6, 0x5d, 0x53,
	0xbd, 0x58, 0x21, 0x88, 0x95, 0x2e, 0x4e, 0x6d, 0x12, 0xf3, 0x5b, 0x3e, 0x89, 0x59, 0xea, 0x6f,
	0x9f, 0x50, 0x94, 0xea, 0xb4, 0xdc, 0x58, 0xa6, 0xd0, 0x1a, 0x54, 0xea, 0x3b, 0x46, 0x67, 0x60,
	0x0e, 0x7b, 0x4d, 0xe2, 0x94, 0xa4, 0xf4, 0x7f, 0x9c, 0x81, 0x12, 0x3b, 0xad, 0x22, 0xc3, 0x13,
	0x77, 0xf0, 0xd3, 0x09, 0x91, 0xb2, 0xa1, 0x21, 0x92, 0xc8, 0xd1, 0xa1, 0xb9, 0xcb, 0x87, 0x26,
	0xb6, 0xbc, 0x64, 0x4e, 0xb3, 0xbc, 0x7c, 0x08, 0x60, 0x85, 0xa1, 0xef, 0x3e, 0x9b, 0x87, 0x72,
	0x45, 0x52, 0x0e, 0x05, 0xea, 0x22, 0x0f, 0x2b, 0x30, 0xf4, 0x26, 0xd5, 0x9d, 0xfc, 0xc2, 0xa0,
	0xb1, 0xb3, 0x36, 0xee, 0x44, 0x8b, 0xf1, 0x82, 0x93, 0xc7, 0xab, 0xf6, 0xab, 0xa9, 0x98, 0xac,
	0x3f, 0x8e, 0xc9, 0xfa, 0xad, 0x64, 0x0d, 0xab, 0x45, 0xfd, 0x63, 0x4b, 0xfd, 0xc3, 0xb8, 0xc3,
	0x96, 0x42, 0xe7, 0xe1, 0xcc, 0x6e, 0xcb, 0xc0, 0x75, 0xdc, 0xd8, 0x6d, 0x35, 0xea, 0x7b, 0x8c,
	0x9c, 0x3e, 0xc6, 0x8f, 0xcb, 0x10, 0x16, 0xe1, 0x17, 0x9a, 0x3d, 0xdc, 0x7d, 0xd2, 0x6a, 0x1a,
	0x58, 0xcb, 0x12, 0x47, 0x12, 0x1b, 0xfd, 0xd6, 0xf7, 0x0c, 0xf3, 0x49, 0x77, 0x6f, 0xd8, 0x36,
	0xb4, 0x9c, 0xfe, 0x4b, 0x69, 0xb8, 0xd0, 0xe8, 0xb7, 0x7a, 0xe3, 0xf9, 0x81, 0x3b, 0x8d, 0xed,
	0x03, 0xa8, 0x09, 0xc5, 0xc0, 0xf1, 0x8f, 0x5c, 0x32, 0x38, 0xc4, 0xf8, 0x58, 0xbb, 0xb7, 0xa9,
	0x6c, 0x19, 0x4b, 0x79, 0xb6, 0xfa, 0x8c, 0x01, 0x4b, 0x4e, 0x75, 0xab, 0x4a, 0x9f, 0x6a, 0xab,
	0x7a, 0x7d, 0xa5, 0x88, 0x6d, 0x6e, 0xd9, 0xd3, 0x6e, 0x6e, 0xfa, 0xe7, 0x50, 0xe0, 0xcd, 0x8d,
	0xcb, 0xff, 0x02, 0xa0, 0x46, 0xb7, 0x33, 0xc0, 0xdd, 0xbd, 0x3d, 0x03, 0x9b, 0x44, 0xc2, 0xad,
	0x06, 0x19, 0x07, 0x0d, 0x2a, 0x9d, 0x6e, 0xd3, 0x90, 0x94, 0xb4, 0xfe, 0x0a, 0xaa, 0x52, 0x0e,
	0x62, 0x21, 0xe3, 0x9a, 0x40, 0x17, 0x32, 0x6a, 0x1c, 0x2c, 0x3b, 0xda, 0xf9, 0x1c, 0x40, 0xb6,
	0x43, 0x74, 0xf2, 0xfa, 0x49, 0xc2, 0xc5, 0x0a, 0x8f, 0xfe, 0x07, 0x69, 0x38, 0xb7, 0x70, 0xe6,
	0xca, 0x5c, 0x74, 0xb6, 0x50, 0x12, 0x29, 0x5c, 0x5e, 0x94, 0x5b, 0x74, 0x3e, 0x4b, 0xf5, 0x3e,
	0x3e, 0x9f, 0xd2, 0xa7, 0x9b, 0x4f, 0xa2, 0x97, 0x99, 0x25, 0xbd, 0xcc, 0x2a, 0xbd, 0x1c, 0xc2,
	0xb9, 0x91, 0xc3, 0xf6, 0x37, 0xdf, 0x21, 0x0a, 0x41, 0x37, 0x5d, 0x31, 0x6d, 0xf5, 0xc5, 0xc6,
	0x91, 0x07, 0x01, 0x63, 0x7b, 0x33, 0xe7, 0x57, 0xe8, 0x01, 0xfa, 0x1c, 0x0a, 0x41, 0xe8, 0xf9,
	0xd6, 0x81, 0xc3, 0xe7, 0xf4, 0x3b, 0xc7, 0x74, 0x93, 0x2a, 0x25, 0x43, 0x63, 0xc1, 0x46, 0x7c,
	0x70, 0x4e, 0x43, 0x1f, 0x40, 0x7e, 0x46, 0x45, 0xcd, 0x37, 0xcb, 0x37, 0x96, 0x8c, 0x02, 0x9b,
	0xfb, 0x0c, 0xa6, 0xff, 0x7a, 0x06, 0x72, 0x4f, 0xa8, 0xb9, 0xba, 0xa9, 0x0c, 0xf6, 0x9a, 0xba,
	0x62, 0xd0, 0x6c, 0xd5, 0x3e, 0xdc, 0x22, 0x2e, 0x91, 0x35, 0xb6, 0xfc, 0xc5, 0xd3, 0x53, 0x86,
	0xed, 0xd3, 0x5c, 0xcc, 0x51, 0x04, 0xef, 0x5b, 0xd3, 0x03, 0x27, 0xe0, 0x67, 0x20, 0x0b, 0x78,
	0x4c, 0x73, 0x31, 0x47, 0xa1, 0x1b, 0x90, 0x09, 0x9c, 0x90, 0xab, 0xfe, 0xd9, 0x85, 0xc2, 0x9d,
	0x10, 0x93, 0x7c, 0xda, 0x60, 0xe7, 0x25, 0x3b, 0xf5, 0x2b, 0x2f, 0x69, 0xb0, 0xf3, 0x32, 0xc4,
	0x14, 0x51, 0xbb, 0x0a, 0x79, 0xd6, 0xa4, 0xb8, 0xa5, 0x9e, 0xe2, 0x96, 0x7a, 0xed, 0x03, 0xc8,
	0xd1, 0x26, 0x90, 0xec, 0x67, 0x8e, 0x90, 0x5e, 0x16, 0xb3, 0x04, 0xd9, 0x72, 0x1d, 0x3a, 0xdf,
	0x09, 0x8d, 0x3c, 0xd6, 0xee, 0x43, 0x9e, 0xb5, 0x19, 0xbd, 0x07, 0x39, 0xda, 0x6a, 0xee, 0xcf,
	0x9c, 0x5f, 0xda, 0x35, 0xcc, 0x30, 0xb5, 0x8b, 0x90, 0xe9, 0x3b, 0xd4, 0x4d, 0x74, 0x43, 0x67,
	0x42, 0x59, 0x4a, 0x98, 0x3e, 0xd7, 0x2e, 0x43, 0x96, 0x34, 0x78, 0xc5, 0x0b, 0x84, 0xbb, 0x7c,
	0x61, 0x05, 0xc8, 0xf7, 0x1b, 0xf5, 0xbd, 0x3a, 0xd6, 0xbe, 0x41, 0x9e, 0x71, 0xbd, 0xb3, 0x43,
	0x8f, 0xda, 0x0a, 0x90, 0xe9, 0x1b, 0x03, 0x76, 0x50, 0x3b, 0x30, 0xbe, 0x18, 0x68, 0x19, 0xfd,
	0x0f, 0x53, 0x50, 0x92, 0xfa, 0xbe, 0xcc, 0x24, 0x91, 0x03, 0x9e, 0x7e, 0x8d, 0x01, 0xcf, 0xbc,
	0xe6, 0x80, 0x67, 0x5f, 0x67, 0xc0, 0xf3, 0x3f, 0xac, 0x01, 0xd7, 0xff, 0x55, 0x05, 0x8a, 0x62,
	0xee, 0xa0, 0xcf, 0xa0, 0x3c, 0xe3, 0xf3, 0x87, 0xb8, 0x25, 0x95, 0x53, 0xac, 0x25, 0x20, 0x18,
	0x5a, 0xa3, 0xff, 0x3f, 0x44, 0x97, 0x3b, 0x41, 0x74, 0xc7, 0x1c, 0x80, 0x7f, 0x07, 0xd6, 0xad,
	0xf1, 0xd8, 0xb3, 0xe9, 0x72, 0x64, 0xba, 0xd3, 0x7d, 0x8f, 0x7b, 0x54, 0x6f, 0x2e, 0x59, 0xd1,
	0xea, 0x12, 0x49, 0x57, 0x91, 0x35, 0x2b, 0x96, 0x46, 0x4d, 0x28, 0x2b, 0x4b, 0x23, 0x37, 0x16,
	0x4f, 0xb3, 0x32, 0xaa, 0x6c, 0x68, 0x1b, 0x2a, 0xb1, 0x05, 0xb6, 0x7a, 0xea, 0x05, 0x36, 0xc6,
	0x47, 0x1c, 0xdf, 0x91, 0x1b, 0x3c, 0xe7, 0xf6, 0xed, 0xa5, 0x25, 0xfc, 0x4d, 0x37, 0xe0, 0xa7,
	0x4e, 0x04, 0x88, 0xbe, 0x4d, 0xf6, 0xea, 0x23, 0xcf, 0xa6, 0x0e, 0x7b, 0x29, 0xe9, 0xbc, 0x28,
	0xb5, 0x72, 0x0c, 0xdb, 0x82, 0x25, 0x0b, 0xba, 0x0f, 0xf9, 0xe0, 0xd0, 0xf2, 0x9d, 0x11, 0x37,
	0xbb, 0xae, 0x2c, 0x61, 0xee, 0x53, 0x00, 0x5b, 0x83, 0x19, 0xb8, 0xf6, 0x36, 0xac, 0xc5, 0xe5,
	0x4a, 0x74, 0x8e, 0x0e, 0x17, 0x7b, 0xb9, 0x44, 0x9f, 0x6b, 0xff, 0x32, 0x05, 0xeb, 0x89, 0xfe,
	0xca, 0xe3, 0xfc, 0x6c, 0xf2, 0x38, 0x7f, 0x95, 0x84, 0x54, 0xd5, 0x14, 0x95, 0x64, 0xa2, 0x4a,
	0xe2, 0xef, 0x36, 0x52, 0xc9, 0x77, 0x1b, 0x91, 0x1b, 0x99, 0xfe, 0x3a, 0x6e, 0x24, 0x59, 0xbd,
	0x06, 0xf5, 0x41, 0xab, 0xa1, 0xa5, 0xa8, 0x4b, 0xf9, 0x65, 0xa7, 0xde, 0x6e, 0x35, 0xb4, 0x74,
	0xed, 0x07, 0x39, 0x28, 0x8a, 0xa1, 0x40, 0x2d, 0x28, 0xcf, 0x88, 0x8f, 0x12, 0x84, 0xce, 0xd4,
	0x76, 0xf8, 0xd6, 0xff, 0xee, 0x31, 0x83, 0xb7, 0xd5, 0x8b, 0xe0, 0x58, 0xe5, 0x25, 0xed, 0x3d,
	0xf2, 0xc6, 0xf3, 0x89, 0xb3, 0xd8, 0xde, 0x27, 0x94, 0x8e, 0x79, 0x3e, 0x7a, 0x20, 0x7d, 0xfa,
	0xcc, 0x4a, 0x9d, 0x95, 0xf5, 0xf5, 0x99, 0xc9, 0xc6, 0x39, 0x6a, 0x0f, 0xa1, 0xac, 0xb4, 0x60,
	0xc1, 0xb5, 0x8b, 0x89, 0x34, 0x9d, 0x10, 0x69, 0xed, 0x2f, 0x65, 0x20, 0xcf, 0xca, 0x53, 0xde,
	0xcd, 0xa4, 0x57, 0x0c, 0x66, 0xa2, 0x05, 0xea, 0x60, 0x3e, 0x54, 0x8e, 0x1e, 0xcb, 0xa7, 0x62,
	0xee, 0x59, 0xe1, 0x21, 0x3f, 0xa3, 0xfc, 0x36, 0xe4, 0x26, 0xde, 0x7c, 0x1a, 0xf2, 0xce, 0x6f,
	0x9e, 0x82, 0xbb, 0x4d, 0xf0, 0x98, 0xb1, 0xf1, 0x2e, 0x67, 0xf9, 0x3b, 0x4f, 0xe2, 0x7e, 0x14,
	0x27, 0x4e, 0x68, 0xd1, 0x93, 0x90, 0xdc, 0x0a, 0x4d, 0x91, 0x08, 0xe2, 0xa3, 0xce, 0x7c, 0x8f,
	0x9e, 0x66, 0x71, 0x1f, 0x95, 0x27, 0x6b, 0x35, 0xc8, 0x92, 0x56, 0x32, 0x4d, 0xf5, 0xc2, 0x68,
	0x3a, 0x78, 0x61, 0xed, 0x12, 0xe4, 0x68, 0x1b, 0x96, 0x65, 0xea, 0xdf, 0x5a, 0xa6, 0x7e, 0x45,
	0xc8, 0xf6, 0xea, 0x83, 0x5d, 0x2d, 0x85, 0x4a, 0x90, 0x6b, 0x77, 0x87, 0x1d, 0xb2, 0x61, 0x96,
	0x20, 0xf7, 0x68, 0xaf, 0xdb, 0x78, 0xac, 0x65, 0xc8, 0x26, 0x8a, 0xeb, 0x4f, 0xb5, 0x6c, 0x6d,
	0x1d, 0xaa, 0xb1, 0x29, 0x5e, 0xab, 0x00, 0x44, 0xd3, 0x56, 0xff, 0x99, 0x34, 0x6c, 0x0c, 0x7c,
	0x6b, 0x7f, 0xdf, 0xb5, 0x89, 0x41, 0xeb, 0x7b, 0xe3, 0x7e, 0x68, 0x85, 0x6e, 0x10, 0xba, 0x76,
	0xb0, 0x30, 0xfa, 0x1b, 0x50, 0x78, 0x66, 0xd9, 0xcf, 0xc7, 0xde, 0x01, 0x1d, 0x9a, 0x2c, 0x16,
	0x49, 0x6a, 0x6b, 0xbc, 0x0a, 0xb9, 0x51, 0x44, 0x6c, 0x0d, 0x92, 0x20, 0xd4, 0x91, 0xef, 0xcd,
	0xd8, 0xf2, 0x9f, 0xc5, 0x2c, 0x81, 0xae, 0x02, 0x78, 0x47, 0x8e, 0x3f, 0x76, 0x27, 0x6e, 0xc8,
	0x5e, 0x05, 0x64, 0xb1, 0x42, 0xa1, 0x22, 0xb4, 0xec, 0xe7, 0x4e, 0xc8, 0x4e, 0xfc, 0xb3, 0x58,
	0x24, 0x89, 0x74, 0xbe, 0x1a, 0x3b, 0x53, 0xba, 0x06, 0x66, 0x31, 0x7d, 0x26, 0x68, 0xdf, 0x0a,
	0x9d, 0x67, 0xb3, 0x80, 0xae, 0xd0, 0x59, 0x2c, 0x92, 0x22, 0x67, 0x36, 0x0b, 0xe8, 0xf2, 0xc7,
	0x73, 0x66, 0x33, 0xfa, 0x42, 0xd4, 0x77, 0xbe, 0x9a, 0x3b, 0x73, 0xfa, 0xd6, 0x92, 0x64, 0xc9,
	0xb4, 0xfe, 0xfd, 0x1c, 0x54, 0x5a, 0x33, 0x45, 0x08, 0x57, 0x01, 0xb6, 0x3d, 0xff, 0x85, 0xe5,
	0x8f, 0xdc, 0xe9, 0x01, 0x1d, 0x98, 0x0c, 0x56, 0x28, 0x24, 0xbf, 0xc9, 0x2c, 0xe1, 0xc1, 0x60,
	0x8f, 0xca, 0x25, 0x83, 0x15, 0x0a, 0xc9, 0x6f, 0x4d, 0xb1, 0x63, 0x3b, 0xee, 0x11, 0x97, 0x4f,
	0x06, 0x2b, 0x14, 0x74, 0x1d, 0xca, 0xad, 0xe9, 0xee, 0xc8, 0x37, 0x7c, 0xdf, 0xf3, 0x99, 0xa8,
	0x32, 0x58, 0x25, 0x21, 0x1d, 0x2a, 0xad, 0x69, 0x7d, 0x24, 0x21, 0x39, 0x0a, 0x89, 0xd1, 0xd0,
	0xdb, 0x50, 0x25, 0x6d, 0x6a, 0x5a, 0xa1, 0x75, 0xe0, 0x5b, 0x13, 0x26, 0xba, 0x0c, 0x8e, 0x13,
	0xd1, 0x26, 0xac, 0xb7, 0xa6, 0xc3, 0xe9, 0xf3, 0xa9, 0xf7, 0x62, 0x4a, 0x8f, 0xdd, 0xd9, 0x79,
	0x49, 0x06, 0x27, 0xc9, 0xac, 0xd5, 0x4d, 0x37, 0xb0, 0x2d, 0x7f, 0xc4, 0x24, 0x4b, 0x5b, 0x2d,
	0x28, 0x3c, 0xdf, 0x19, 0xbb, 0x47, 0xc4, 0x4b, 0x2a, 0xc9, 0x7c, 0x4e, 0x21, 0xbd, 0xea, 0xce,
	0x43, 0x4c, 0xa4, 0x1a, 0x84, 0x4c, 0xca, 0x19, 0xac, 0x92, 0x38, 0x42, 0x56, 0x51, 0x96, 0x08,
	0x59, 0x07, 0x43, 0x74, 0x3c, 0xec, 0x51, 0x0f, 0xa8, 0x22, 0x11, 0x82, 0x44, 0x24, 0x83, 0x1d,
	0x2b, 0x98, 0xf0, 0x37, 0xe8, 0xf4, 0x34, 0x31, 0x83, 0x63, 0x34, 0xd2, 0x52, 0x9a, 0xc6, 0xce,
	0x57, 0x23, 0x76, 0x64, 0x98, 0xc1, 0x0a, 0x85, 0x28, 0x03, 0x4d, 0x75, 0x1f, 0x07, 0xf4, 0x54,
	0x39, 0x83, 0x65, 0x5a, 0xf2, 0x6e, 0x5b, 0xee, 0x38, 0xd8, 0xd0, 0x14, 0x5e, 0x4a, 0x21, 0x2a,
	0xb6, 0xed, 0x5b, 0x07, 0x84, 0xf5, 0x0c, 0xcd, 0x14, 0x49, 0xb2, 0x50, 0x92, 0x47, 0xc6, 0x88,
	0x68, 0x5e, 0x44, 0x20, 0x3d, 0x23, 0x89, 0x86, 0xef, 0x58, 0xa4, 0x67, 0x67, 0x59, 0xcf, 0x14,
	0x92, 0xfe, 0x0f, 0x0a, 0xb0, 0xd6, 0xb2, 0x27, 0xaa, 0x22, 0x5e, 0x80, 0x7c, 0x6b, 0xda, 0x0e,
	0x0e, 0x02, 0xae, 0x84, 0x3c, 0x45, 0x3a, 0xd0, 0x9a, 0x72, 0xd5, 0x60, 0xea, 0x27, 0xd3, 0x4c,
	0x75, 0x1a, 0xc1, 0x7c, 0xc2, 0xf3, 0x33, 0x42, 0x75, 0x22, 0x1a, 0x7a, 0x07, 0xd6, 0xc8, 0xc0,
	0x05, 0xe1, 0x70, 0xea, 0x3b, 0x96, 0x7d, 0x28, 0x74, 0x30, 0x41, 0x65, 0x8a, 0x4a, 0xa4, 0x6a,
	0xbc, 0xb4, 0x47, 0x42, 0x0b, 0x55, 0x12, 0x43, 0xf4, 0x2c, 0x7f, 0xd2, 0xf3, 0xbd, 0x67, 0x42,
	0x05, 0x55, 0x12, 0x6b, 0x4f, 0xdf, 0xb7, 0xbf, 0x3b, 0x77, 0xa6, 0xa4, 0xa6, 0x82, 0x68, 0x4f,
	0x44, 0x63, 0xa5, 0x60, 0x67, 0xe4, 0xfa, 0x8e, 0x1d, 0x0a, 0xdd, 0x53, 0x49, 0x44, 0xec, 0xad,
	0xa9, 0x61, 0x1f, 0x7a, 0x42, 0xf3, 0x44, 0x92, 0xa9, 0x25, 0x79, 0xc4, 0xce, 0x4c, 0x68, 0x9d,
	0x42, 0x61, 0xf5, 0x93, 0x06, 0x07, 0xa1, 0x35, 0x99, 0x09, 0xad, 0x8b, 0xd1, 0xd8, 0x24, 0x91,
	0x69, 0x5a, 0x50, 0x45, 0x4c, 0x92, 0x18, 0x99, 0xb5, 0x94, 0x4c, 0xc2, 0xb6, 0x15, 0x3c, 0x0f,
	0xb8, 0xf6, 0xa9, 0x24, 0x26, 0x5b, 0x91, 0xa4, 0x45, 0xad, 0x09, 0xd9, 0xaa, 0x54, 0xd2, 0xa3,
	0xee, 0x3c, 0xa4, 0x83, 0xcb, 0x74, 0x50, 0x24, 0x89, 0x22, 0x75, 0xe7, 0x21, 0x1f, 0x3e, 0xa6,
	0x81, 0x11, 0x81, 0xb4, 0x95, 0xcc, 0x18, 0x75, 0xf0, 0x98, 0x22, 0x26, 0xc9, 0xa4, 0xe7, 0xdd,
	0x79, 0x18, 0x0d, 0x1f, 0xd3, 0xc9, 0x18, 0x8d, 0x63, 0xa2, 0x01, 0x3c, 0x2b, 0x31, 0xd1, 0x08,
	0xbe, 0x0d, 0xd5, 0xee, 0x3c, 0x54, 0x86, 0xf0, 0x1c, 0x5b, 0x68, 0x62, 0x44, 0x5e, 0x52, 0x34,
	0x88, 0xe7, 0x65, 0x49, 0xd1, 0x28, 0xd6, 0xa0, 0x48, 0x3a, 0x42, 0x87, 0xf1, 0x02, 0xd3, 0x5b,
	0x91, 0xe6, 0x53, 0x5f, 0x0e, 0xe4, 0x1b, 0x72, 0xea, 0xcb, 0x91, 0x64, 0xed, 0x50, 0x86, 0x72,
	0x43, 0xb6, 0x43, 0x19, 0xcb, 0x5b, 0xa0, 0xa9, 0x04, 0x5a, 0xd8, 0x45, 0x0a, 0x5c, 0xa0, 0xf3,
	0x36, 0x47, 0xc3, 0x59, 0x93, 0x6d, 0x8e, 0xc6, 0x93, 0xc9, 0x3b, 0x36, 0xa0, 0x97, 0xa4, 0xbc,
	0x55, 0xb2, 0xfe, 0xcf, 0x32, 0x50, 0x1d, 0xd8, 0xea, 0xfc, 0x25, 0x8b, 0x55, 0xe8, 0xd5, 0xc7,
	0x07, 0x9e, 0xef, 0x86, 0x87, 0x13, 0x3e, 0x8b, 0x63, 0x34, 0x32, 0xc7, 0x71, 0xe8, 0xb5, 0xdd,
	0x29, 0x9f, 0xc9, 0x3c, 0x25, 0xe8, 0xd6, 0x4b, 0x3e, 0x83, 0x79, 0x8a, 0xe8, 0x4d, 0xdb, 0x7a,
	0xd9, 0xf0, 0xa6, 0x53, 0x3e, 0x69, 0x45, 0x92, 0x48, 0xb0, 0x6e, 0x87, 0xee, 0x91, 0xd3, 0x9d,
	0x39, 0x53, 0x39, 0x5b, 0x15, 0x12, 0x69, 0x4f, 0xcf, 0x0a, 0x02, 0x09, 0x61, 0xd3, 0x35, 0x46,
	0x23, 0x98, 0x7a, 0x18, 0x3a, 0x93, 0x59, 0xc8, 0x56, 0x32, 0x3e, 0x5f, 0x55, 0x1a, 0xa9, 0xc9,
	0x08, 0x42, 0xeb, 0x19, 0xb1, 0xce, 0xa3, 0xf9, 0xaa, 0x90, 0x88, 0x0e, 0x37, 0xe6, 0xbe, 0x4f,
	0x49, 0x7c, 0xc6, 0x46, 0x04, 0xb6, 0xae, 0xf5, 0x9d, 0x03, 0x31, 0x5f, 0x79, 0x8a, 0xcf, 0x09,
	0x9a, 0x51, 0x96, 0x73, 0x82, 0xe6, 0x5c, 0x87, 0x32, 0x76, 0x42, 0xdf, 0x9a, 0x06, 0x34, 0x97,
	0x6f, 0x0c, 0x0a, 0x89, 0x95, 0x69, 0xf8, 0xbe, 0x98, 0x94, 0x3c, 0xc5, 0xcb, 0xc4, 0x64, 0x4b,
	0x5a, 0x93, 0x65, 0x92, 0xe4, 0xc2, 0x4a, 0xb9, 0xbe, 0xb8, 0x52, 0xea, 0xbf, 0x90, 0x86, 0xea,
	0x70, 0xa4, 0x8e, 0x29, 0x5d, 0x01, 0xa2, 0x4d, 0x37, 0x25, 0x56, 0x80, 0x68, 0xcb, 0xdd, 0x80,
	0x42, 0xc7, 0xeb, 0x79, 0x7e, 0x28, 0x16, 0x67, 0x91, 0x8c, 0xad, 0xdb, 0x99, 0xc5, 0x75, 0x9b,
	0x4c, 0x60, 0x59, 0x70, 0x56, 0xea, 0x62, 0x54, 0x32, 0xd1, 0x27, 0xfb, 0xe8, 0xd9, 0x7c, 0x3f,
	0x6e, 0x16, 0xa8, 0x34, 0x82, 0xe9, 0x4f, 0x47, 0x11, 0x86, 0x8f, 0xb1, 0x4a, 0x5b, 0xe8, 0x79,
	0x61, 0xc9, 0x1e, 0x41, 0x30, 0x07, 0x53, 0xcf, 0x77, 0x46, 0xed, 0xf9, 0x38, 0x74, 0xf9, 0x20,
	0xc7, 0x68, 0xfa, 0x6f, 0xa5, 0x60, 0xad, 0xdf, 0x69, 0xf7, 0x14, 0xf1, 0xdc, 0x85, 0xa2, 0x3b,
	0x33, 0x83, 0xd0, 0x0a, 0x83, 0xc5, 0xd7, 0xec, 0xaa, 0x95, 0x85, 0x0b, 0x2e, 0x4d, 0x05, 0xe8,
	0x63, 0x00, 0xd7, 0x9e, 0x08, 0xa6, 0x74, 0xf2, 0x9e, 0x51, 0x7c, 0x4f, 0xc4, 0x25, 0x97, 0xa7,
	0x03, 0xf4, 0x11, 0x94, 0x42, 0x5b, 0xf0, 0x65, 0x92, 0x27, 0xcd, 0xb1, 0xa9, 0x88, 0x8b, 0xa1,
	0x1d, 0x71, 0xcd, 0x47, 0x82, 0x6b, 0xe1, 0x7c, 0x3a, 0x36, 0xd8, 0xb8, 0x38, 0x67, 0xc9, 0x40,
	0xff, 0x8d, 0x14, 0xac, 0x11, 0x27, 0x42, 0xe9, 0x6a, 0xe4, 0x74, 0xa5, 0x5e, 0xd7, 0xe9, 0x4a,
	0x7a, 0x89, 0xe9, 0x3f, 0x81, 0x97, 0x78, 0x0d, 0xca, 0xd4, 0x8c, 0x36, 0x55, 0x73, 0x1c, 0x28,
	0xe9, 0x11, 0xb5, 0xc9, 0xaf, 0x00, 0xcc, 0x03, 0x67, 0xc4, 0xf3, 0x99, 0x61, 0x5e, 0x22, 0x14,
	0x9a, 0xad, 0xff, 0xa6, 0x16, 0xdd, 0x17, 0x56, 0x7a, 0x77, 0x19, 0x4a, 0xa1, 0x58, 0x2c, 0xf9,
	0x71, 0x63, 0x44, 0x60, 0x5e, 0xa1, 0x67, 0x3b, 0x41, 0xe0, 0x04, 0x1b, 0x57, 0xaf, 0xa7, 0x36,
	0xab, 0x38, 0x22, 0x90, 0x19, 0x10, 0x1e, 0xfa, 0x8e, 0x35, 0x0a, 0x36, 0xae, 0xd1, 0x3c, 0x91,
	0x44, 0xef, 0xc3, 0x59, 0x7b, 0x36, 0x0f, 0xcc, 0x79, 0xc0, 0xef, 0x47, 0x9a, 0x81, 0x63, 0xf3,
	0x9b, 0x4a, 0x58, 0x23, 0x59, 0xc3, 0x80, 0x5d, 0x8f, 0xec, 0x3b, 0x54, 0x9b, 0xce, 0x53, 0x78,
	0xf0, 0x2a, 0x08, 0x9d, 0x89, 0xc2, 0x40, 0xaf, 0x2b, 0x61, 0x44, 0x32, 0xfb, 0x34, 0x4f, 0xb2,
	0x5c, 0x01, 0xa0, 0x2c, 0x54, 0x00, 0xec, 0xa2, 0x12, 0x2e, 0x11, 0xca, 0x1e, 0x21, 0xa0, 0x77,
	0x60, 0x9d, 0x66, 0x4f, 0x7d, 0xfe, 0x3e, 0x9a, 0x69, 0x7f, 0x15, 0x57, 0x09, 0xb9, 0xe3, 0xb3,
	0x37, 0xce, 0x64, 0x1b, 0x39, 0x23, 0x70, 0xe1, 0xa1, 0xef, 0x85, 0xe1, 0xd8, 0x61, 0x57, 0x02,
	0xaa, 0x78, 0x9d, 0x21, 0x07, 0x82, 0x8c, 0x3e, 0x86, 0x0d, 0x8a, 0x95, 0x40, 0xa5, 0xa1, 0x25,
	0xda, 0x00, 0xda, 0x0b, 0xc9, 0x20, 0xdb, 0xfa, 0x0e, 0xac, 0x4f, 0x48, 0xb7, 0xbc, 0xd0, 0x1a,
	0xf3, 0xe1, 0x79, 0x9b, 0x0e, 0x4f, 0x75, 0xe2, 0x4c, 0x06, 0x84, 0xca, 0x46, 0xf0, 0x2e, 0x9c,
	0x8f, 0x70, 0x13, 0x67, 0x12, 0xbc, 0xe0, 0xe8, 0x1b, 0x14, 0x8d, 0x04, 0xba, 0x4d, 0xb2, 0x18,
	0x0b, 0x2f, 0x5a, 0xd5, 0x8c, 0xbc, 0x2c, 0x7a, 0x2f, 0x52, 0x8e, 0x0f, 0xe0, 0x1c, 0xc1, 0x05,
	0xde, 0x7e, 0x18, 0x03, 0xbf, 0x43, 0xc1, 0x67, 0x26, 0xce, 0xa4, 0xef, 0xed, 0x87, 0x0a, 0xc3,
	0xdb, 0xb0, 0x46, 0x18, 0x88, 0x83, 0xcb, 0xa1, 0xcc, 0x9f, 0xaa, 0x4c, 0x9c, 0xc9, 0xb6, 0x3b,
	0x76, 0x62, 0x28, 0x6b, 0xea, 0x4d, 0x39, 0xaa, 0x2c, 0x51, 0xf5, 0xa9, 0x37, 0x8d, 0x35, 0x92,
	0xde, 0x0c, 0xe1, 0xb0, 0x77, 0x65, 0x23, 0x1b, 0x84, 0xca, 0x70, 0x3a, 0x10, 0x82, 0xe9, 0x07,
	0x01, 0x47, 0x31, 0x17, 0xb2, 0x3c, 0x71, 0x26, 0x38, 0x08, 0x62, 0x32, 0x9a, 0x58, 0xb3, 0x99,
	0x33, 0x52, 0x9b, 0x57, 0x91, 0x32, 0x6a, 0xd3, 0xbc, 0x85, 0x46, 0x06, 0x2f, 0xac, 0x19, 0xc7,
	0x6e, 0xca, 0x46, 0xf6, 0x5f, 0x58, 0x33, 0x86, 0xba, 0xc7, 0x0a, 0x9e, 0x4f, 0x9d, 0x23, 0xd7,
	0xa6, 0x57, 0x5f, 0x38, 0xf8, 0x26, 0x05, 0x9f, 0x9d, 0x38, 0x93, 0x61, 0x94, 0xc7, 0x78, 0x3e,
	0x86, 0x0d, 0x2a, 0x7d, 0xef, 0x85, 0x39, 0xf3, 0x9d, 0x20, 0x98, 0xfb, 0x8e, 0x69, 0x13, 0x77,
	0xdf, 0xf1, 0x37, 0xae, 0x53, 0x36, 0x52, 0xe6, 0x9e, 0xf7, 0xa2, 0xc7, 0x73, 0x1b, 0x2c, 0x13,
	0x7d, 0x06, 0x97, 0x68, 0x2f, 0x9c, 0x91, 0x3b, 0x9f, 0x2c, 0xf2, 0xbe, 0x49, 0x79, 0x49, 0xd9,
	0x6d, 0x8a, 0x48, 0xb2, 0xd7, 0xe1, 0x0a, 0x15, 0xa8, 0xef, 0x86, 0xae, 0x6d, 0x8d, 0x17, 0x0b,
	0xd0, 0x69, 0x01, 0x35, 0x22, 0x5e, 0x8e, 0x49, 0x16, 0xb1, 0x09, 0xda, 0xc8, 0x0d, 0x9e, 0xc7,
	0x94, 0xa1, 0x46, 0xb9, 0xd6, 0x08, 0x5d, 0xd1, 0x84, 0x77, 0x60, 0x9d, 0x22, 0x95, 0xc5, 0xe5,
	0x12, 0x1b, 0x3d, 0x42, 0x1e, 0x8a, 0x05, 0x06, 0xd5, 0x39, 0x2e, 0x90, 0x8b, 0xcb, 0xc6, 0x7b,
	0xf4, 0x48, 0x74, 0x23, 0x76, 0x8d, 0x44, 0x59, 0x5a, 0x59, 0x55, 0xca, 0x62, 0xd4, 0x03, 0xed,
	0xd9, 0xf8, 0xb9, 0xeb, 0xa9, 0x65, 0xdc, 0xa6, 0x6b, 0xe6, 0x0d, 0xe5, 0x0d, 0xd1, 0x81, 0xef,
	0xcd, 0x67, 0x74, 0xb1, 0x7c, 0x44, 0xc0, 0x5b, 0x4a, 0x81, 0xeb, 0x94, 0x5d, 0x29, 0xf1, 0x36,
	0x64, 0x67, 0x8e, 0xbf, 0xcf, 0x6f, 0xa3, 0x28, 0x2d, 0xe9, 0x39, 0xfe, 0xbe, 0xc2, 0x48, 0x51,
	0x44, 0x53, 0xa6, 0x4e, 0x68, 0xfa, 0x2f, 0x4d, 0x71, 0x4e, 0xb1, 0xc6, 0x34, 0x65, 0xea, 0x84,
	0xf8, 0x65, 0x8f, 0x1f, 0x56, 0x5c, 0x87, 0x0a, 0x47, 0x31, 0x69, 0xac, 0xb3, 0xa5, 0x98, 0x62,
	0xa4, 0x22, 0x73, 0x84, 0x13, 0x99, 0xf7, 0x59, 0x5c, 0xa6, 0x10, 0xe9, 0xd7, 0x8b, 0xba, 0x46,
	0xbe, 0x47, 0x14, 0x96, 0xda, 0xf7, 0xa2, 0xae, 0x26, 0xa3, 0x09, 0x54, 0x18, 0xb5, 0x08, 0x49,
	0xd4, 0x20, 0xd9, 0xa2, 0x50, 0xb4, 0xe8, 0xac, 0x6c, 0xd1, 0x20, 0xde, 0xa2, 0x50, 0xb6, 0xe8,
	0x9c, 0x6c, 0xd1, 0x20, 0xd1, 0xa2, 0x30, 0x6a, 0xd1, 0x79, 0xa5, 0x2e, 0xd1, 0xa2, 0x4f, 0xe0,
	0x22, 0x45, 0xd9, 0x33, 0xd3, 0x0f, 0x43, 0x73, 0xe2, 0xda, 0xbe, 0x47, 0x96, 0x40, 0x73, 0x76,
	0xff, 0x0e, 0xb5, 0xf6, 0x53, 0xf8, 0x3c, 0x61, 0xb0, 0x67, 0x38, 0x0c, 0xdb, 0x22, 0xb7, 0x77,
	0xff, 0xce, 0x31, 0x9c, 0x9f, 0xde, 0xa1, 0x8e, 0xc0, 0x72, 0xce, 0x4f, 0x8f, 0xe5, 0xbc, 0x4f,
	0xdd, 0x83, 0x15, 0x9c, 0xf7, 0x8f, 0xe3, 0xfc, 0x94, 0xfa, 0x0b, 0x2b, 0x38, 0x3f, 0x45, 0x0f,
	0xa1, 0x26, 0x38, 0x2d, 0x6a, 0x5b, 0x9b, 0xb6, 0x37, 0x9d, 0x3a, 0x36, 0x3b, 0xec, 0xbf, 0x4c,
	0x59, 0xdf, 0x60, 0xac, 0xcc, 0xf6, 0x6e, 0x44, 0xd9, 0xe8, 0x73, 0xb8, 0x22, 0x98, 0xe9, 0x1e,
	0xf1, 0xc2, 0x72, 0xc3, 0x18, 0xff, 0x15, 0xca, 0x7f, 0x91, 0xf1, 0x93, 0x8d, 0xe2, 0xa9, 0xe5,
	0x86, 0x6a, 0x09, 0x07, 0x70, 0x95, 0x96, 0xc0, 0x4e, 0xf0, 0x08, 0x6f, 0xe8, 0x7b, 0x63, 0x75,
	0x62, 0xbc, 0x95, 0x7c, 0xdf, 0xb0, 0xea, 0xb4, 0x0f, 0x5f, 0x22, 0xd5, 0xac, 0x3a, 0x0a, 0xdc,
	0x85, 0xb3, 0xa4, 0xa2, 0x60, 0xca, 0x4d, 0x33, 0x5e, 0xfa, 0xad, 0xe4, 0x84, 0x89, 0x1b, 0x80,
	0xf8, 0xcc, 0xd4, 0x09, 0xfb, 0x53, 0xd5, 0x64, 0xd3, 0x7f, 0x25, 0x0b, 0x55, 0x61, 0x61, 0x0c,
	0x03, 0xeb, 0xc0, 0x41, 0xdf, 0x86, 0x92, 0xb8, 0x79, 0x27, 0xae, 0x52, 0x2e, 0x79, 0x53, 0x41,
	0xb1, 0xf2, 0xba, 0x1e, 0x8e, 0x58, 0xd0, 0x26, 0xe4, 0xe8, 0x66, 0xc8, 0xdf, 0x91, 0x2f, 0xbb,
	0x91, 0xc0, 0x00, 0xb5, 0x7f, 0x92, 0x81, 0xa2, 0x28, 0x01, 0x3d, 0x84, 0x6a, 0x74, 0x33, 0x70,
	0xba, 0xef, 0xf1, 0xb7, 0xcc, 0x17, 0x96, 0xdf, 0x29, 0xc4, 0x15, 0x47, 0xbd, 0x87, 0x78, 0x07,
	0x4a, 0xfc, 0x75, 0x91, 0x33, 0x3a, 0xa6, 0xde, 0x08, 0x84, 0xbe, 0x05, 0xa0, 0x08, 0x2e, 0xb3,
	0xea, 0xc5, 0x9d, 0x22, 0x3c, 0x05, 0x8f, 0x3e, 0x81, 0x8a, 0xbc, 0x61, 0x60, 0xd2, 0xf3, 0xe9,
	0xf4, 0xea, 0x6f, 0xbf, 0xca, 0x12, 0xda, 0x1a, 0xa1, 0x87, 0x90, 0x0b, 0xa9, 0x3f, 0xcb, 0x5e,
	0xed, 0xdf, 0x38, 0x49, 0xb2, 0x5b, 0x03, 0xe2, 0xc2, 0x32, 0x9e, 0xda, 0xcf, 0xa7, 0x20, 0x4b,
	0xd2, 0x4b, 0x5f, 0x1c, 0x5e, 0xa7, 0xc7, 0xc3, 0xec, 0x16, 0x9a, 0x72, 0x26, 0xce, 0x3e, 0x83,
	0xa3, 0x07, 0xc6, 0xaf, 0x7f, 0x5f, 0x24, 0x7a, 0x2b, 0x93, 0x3d, 0xe1, 0xad, 0xcc, 0xbf, 0xd1,
	0x60, 0x2d, 0xbe, 0x3c, 0x9f, 0x60, 0xa5, 0xd6, 0x62, 0x5f, 0x4a, 0x91, 0x4c, 0x99, 0x26, 0xfe,
	0xa2, 0xfd, 0xca, 0x1e, 0x4b, 0x8b, 0x99, 0xa7, 0xd0, 0x37, 0xe1, 0x8d, 0x20, 0xb4, 0xc6, 0xc4,
	0x8a, 0x63, 0x14, 0x73, 0xdf, 0xf7, 0xa6, 0xa1, 0x33, 0x1d, 0x71, 0xd3, 0xf9, 0x3c, 0xcf, 0x6e,
	0xd0, 0xdc, 0x6d, 0x9e, 0x89, 0x3e, 0x82, 0x0b, 0x09, 0xbe, 0x67, 0x64, 0x11, 0x9e, 0x8e, 0xb8,
	0xb1, 0x72, 0x2e, 0xc6, 0xf6, 0x88, 0xe5, 0x11, 0x2f, 0xcb, 0x9d, 0x06, 0xa1, 0x3f, 0xe7, 0xd3,
	0x9f, 0xd9, 0x68, 0x31, 0x1a, 0xba, 0x09, 0x1a, 0xb3, 0x90, 0x7c, 0x67, 0xdf, 0xf1, 0x89, 0xcd,
	0x1f, 0xf0, 0xf3, 0xf0, 0x75, 0x4a, 0xc7, 0x92, 0x8c, 0xde, 0x84, 0x0a, 0x83, 0x4e, 0x5c, 0x6a,
	0x99, 0xb3, 0xf3, 0xf1, 0x32, 0xa5, 0xb5, 0x29, 0x89, 0xc8, 0xe4, 0x99, 0x6f, 0x4d, 0xed, 0x43,
	0x47, 0x1c, 0x92, 0xcb, 0x34, 0x7a, 0x0b, 0xaa, 0xec, 0x59, 0xf0, 0x73, 0xd3, 0x8e, 0x11, 0x79,
	0x01, 0x57, 0x00, 0x9e, 0xcd, 0x03, 0xde, 0x49, 0x6e, 0xd6, 0x95, 0x9e, 0xcd, 0x03, 0xd6, 0x31,
	0x92, 0xed, 0x3b, 0xfb, 0x22, 0x9b, 0x19, 0x5f, 0x25, 0xdf, 0xd9, 0xe7, 0xd9, 0x97, 0x80, 0x18,
	0xe3, 0xa6, 0x3d, 0xf6, 0xec, 0xe7, 0x74, 0xf3, 0x4d, 0xe1, 0xa2, 0x3d, 0x9b, 0x37, 0x48, 0x9a,
	0xf0, 0x12, 0x25, 0xe4, 0xb9, 0x6b, 0xcc, 0x76, 0x27, 0x14, 0x96, 0x7d, 0x0d, 0xca, 0x33, 0xeb,
	0xc0, 0x31, 0xe9, 0x41, 0xbb, 0xdc, 0x5e, 0x09, 0x89, 0xde, 0x7d, 0xa4, 0xdd, 0x9f, 0xb8, 0x53,
	0xcf, 0x17, 0x08, 0xbe, 0xbb, 0x52, 0x9a, 0x02, 0xb1, 0xfe, 0x74, 0x04, 0x39, 0xc3, 0x21, 0x84,
	0xc6, 0x21, 0x44, 0xde, 0x64, 0x50, 0x5f, 0x86, 0x66, 0xf0, 0xc2, 0x0d, 0xa9, 0xa4, 0x10, 0x97,
	0x37, 0xa3, 0xf7, 0x39, 0x19, 0xdd, 0x80, 0x35, 0xd2, 0x9b, 0x89, 0x7b, 0xe0, 0xf3, 0x97, 0xbd,
	0x6c, 0x87, 0x25, 0xce, 0x44, 0x5b, 0x12, 0x49, 0x89, 0xd6, 0xd8, 0x3d, 0xa0, 0x37, 0xbb, 0x45,
	0xc5, 0x6c, 0x9f, 0x5d, 0x97, 0xf4, 0xa8, 0x72, 0x67, 0x32, 0x1f, 0xb3, 0xb7, 0xd9, 0x1c, 0xca,
	0x76, 0xdb, 0x75, 0x49, 0xe7, 0xd0, 0x77, 0x60, 0x7d, 0x7c, 0xd7, 0x1c, 0xb1, 0x01, 0x1f, 0x7b,
	0xc4, 0xdb, 0xba, 0xc0, 0x6a, 0x1f, 0xdf, 0x6d, 0x52, 0xea, 0x1e, 0x21, 0x12, 0xcb, 0x38, 0x8e,
	0x13, 0xa3, 0xfb, 0x06, 0xb3, 0x8c, 0x55, 0x34, 0x1f, 0xe3, 0x4d, 0xd0, 0x22, 0x96, 0x20, 0xf4,
	0x7c, 0x87, 0x9d, 0xb6, 0x65, 0xf1, 0x9a, 0x40, 0xf7, 0x29, 0x15, 0x7d, 0x08, 0x17, 0x12, 0x48,
	0x51, 0xfa, 0x45, 0x66, 0x1e, 0xc7, 0xf0, 0xbc, 0xf8, 0x3b, 0x70, 0x2e, 0x62, 0x9a, 0x11, 0xb5,
	0x66, 0x52, 0xae, 0xc5, 0x1b, 0xd4, 0x93, 0x39, 0xe8, 0x53, 0xb8, 0xb8, 0xc8, 0x21, 0x6a, 0x62,
	0x56, 0xe7, 0x85, 0x24, 0x1b, 0xaf, 0x8c, 0x89, 0xc9, 0x55, 0xc5, 0x74, 0x59, 0x88, 0xa9, 0xb5,
	0x20, 0x26, 0x77, 0x51, 0x4c, 0x57, 0x44, 0xab, 0x5a, 0x49, 0x31, 0xb1, 0x7e, 0xb8, 0x0b, 0xfd,
	0xb8, 0x1a, 0xe7, 0x58, 0xe8, 0x87, 0xbb, 0xbc, 0x1f, 0xd7, 0x44, 0x3f, 0x5a, 0xcb, 0xfa, 0x71,
	0x09, 0x4a, 0xe3, 0xb1, 0xcd, 0x7b, 0xc0, 0x9c, 0x88, 0xe2, 0x78, 0x6c, 0xb3, 0xc6, 0x93, 0x4e,
	0xf2, 0x4c, 0x51, 0xda, 0x9b, 0xbc, 0x93, 0x0c, 0x12, 0x4d, 0x5e, 0x82, 0xe3, 0x43, 0xca, 0xbc,
	0x01, 0x52, 0x2c, 0x1f, 0x4d, 0x32, 0xee, 0x22, 0x5b, 0x94, 0xf3, 0x16, 0x1f, 0x77, 0x0e, 0xe2,
	0x05, 0xdd, 0x00, 0x42, 0x51, 0x3b, 0xfd, 0xb6, 0xac, 0x4f, 0xe9, 0xef, 0x16, 0x9c, 0x55, 0x61,
	0xa2, 0x4c, 0xe6, 0xb7, 0x9e, 0x51, 0xb0, 0x51, 0xfb, 0x46, 0xe1, 0xf8, 0x19, 0xef, 0x25, 0x73,
	0x42, 0x4b, 0x84, 0xc2, 0xba, 0x49, 0x9c, 0x13, 0x91, 0x2d, 0xca, 0x7a, 0x97, 0x3b, 0x27, 0x1c,
	0xc4, 0x0b, 0xba, 0x06, 0x65, 0x8a, 0xe4, 0x3d, 0x65, 0x8e, 0x1d, 0x2d, 0x9b, 0x77, 0xf5, 0x16,
	0x9c, 0x89, 0x00, 0xa2, 0x2c, 0xe6, 0xd2, 0xad, 0x4b, 0x18, 0x2f, 0xec, 0x5d, 0xa0, 0x24, 0xb5,
	0xb7, 0xb7, 0xa2, 0x5a, 0x95, 0xee, 0xde, 0x81, 0x73, 0x31, 0xa0, 0x28, 0xf7, 0x3d, 0xa6, 0x10,
	0x2a, 0x3a, 0xea, 0xb0, 0x1b, 0x75, 0xf8, 0x36, 0xeb, 0xb0, 0xab, 0x76, 0xd8, 0x4d, 0x76, 0xf8,
	0x7d, 0x56, 0xb5, 0x1b, 0xef, 0xf0, 0x9b, 0xc0, 0x97, 0x69, 0x5e, 0xd4, 0x16, 0x5b, 0xd8, 0x18,
	0x8d, 0x15, 0x76, 0x1b, 0x90, 0x02, 0x11, 0xc5, 0x7d, 0x40, 0x81, 0x5a, 0x04, 0x8c, 0x5a, 0x36,
	0xf5, 0x46, 0x62, 0xca, 0xdc, 0x61, 0x2d, 0x23, 0x14, 0xd9, 0x32, 0x99, 0x2d, 0x8a, 0xba, 0xcb,
	0x5a, 0x26, 0x40, 0xd1, 0x50, 0x50, 0x24, 0x1f, 0x8a, 0x7b, 0xdc, 0x07, 0xf1, 0x46, 0x4e, 0x34,
	0x14, 0x11, 0x40, 0x94, 0xf5, 0x21, 0x1b, 0x0a, 0x09, 0x8b, 0x86, 0x82, 0x62, 0x95, 0xa1, 0xf8,
	0x28, 0xaa, 0x35, 0x3e, 0x14, 0x31, 0xa0, 0x28, 0xf7, 0x3e, 0x1b, 0x0a, 0x15, 0xcd, 0x8a, 0xd6,
	0x5d, 0x28, 0xf0, 0x57, 0x95, 0xe8, 0x36, 0x14, 0xad, 0x03, 0xb2, 0x58, 0xcb, 0xcb, 0x9b, 0x4b,
	0x6e, 0x2a, 0x17, 0x28, 0xa4, 0x95, 0xb0, 0x79, 0xd2, 0xa7, 0xb0, 0x79, 0xf4, 0xdf, 0x3a, 0x07,
	0x39, 0x1a, 0x7d, 0x80, 0xdf, 0x86, 0x4e, 0x25, 0xbf, 0x45, 0xe7, 0xa1, 0x09, 0xa8, 0x49, 0x95,
	0xfc, 0x30, 0x25, 0x9d, 0x34, 0x04, 0x57, 0x7e, 0x98, 0xa2, 0x76, 0x23, 0xb3, 0xf0, 0xb9, 0x7b,
	0xb2, 0x1b, 0xea, 0xad, 0xf1, 0x6c, 0xe2, 0xd6, 0xf8, 0x35, 0xc8, 0xcc, 0xfd, 0x31, 0xbf, 0x11,
	0x55, 0x55, 0x8e, 0x4b, 0xf1, 0x1e, 0x26, 0x39, 0xca, 0x95, 0xed, 0xf2, 0x29, 0xae, 0xd8, 0xbf,
	0xfe, 0x97, 0x2c, 0xf1, 0xab, 0xb1, 0x85, 0xd3, 0x5d, 0x8d, 0xfd, 0x18, 0x2a, 0xca, 0x97, 0x40,
	0xc4, 0xba, 0xca, 0xac, 0xfc, 0x14, 0xa8, 0x1c, 0x7d, 0x0a, 0x14, 0x2c, 0xf9, 0x20, 0xbd, 0xf4,
	0x7a, 0x1f, 0xa4, 0x2f, 0xbb, 0x96, 0x06, 0x5f, 0xf3, 0x5a, 0x5a, 0xed, 0x97, 0x34, 0x28, 0xc9,
	0x28, 0x0d, 0xe8, 0x5e, 0xec, 0x7e, 0xfb, 0xd5, 0x84, 0xce, 0x6c, 0x49, 0xa0, 0x7a, 0xbd, 0x86,
	0x7d, 0xbc, 0x5e, 0x49, 0xde, 0xf8, 0x56, 0x42, 0x3f, 0x70, 0x4d, 0xcb, 0x8f, 0xad, 0xf9, 0xd4,
	0x16, 0xf7, 0x70, 0xae, 0xaf, 0x2e, 0x7c, 0x8f, 0xe2, 0x30, 0xc7, 0xa3, 0x5d, 0xa8, 0xb0, 0x27,
	0x93, 0x1e, 0xc2, 0xf0, 0x3b, 0x6b, 0x37, 0x4e, 0xe2, 0xdf, 0x21, 0x60, 0x5c, 0x1e, 0x47, 0x09,
	0xf4, 0x10, 0x0a, 0xec, 0x16, 0x9c, 0xb8, 0xcb, 0xf4, 0xe6, 0xea, 0x42, 0xd8, 0xed, 0x30, 0x07,
	0x0b, 0x0e, 0x54, 0x87, 0xd2, 0x7c, 0x2a, 0xd8, 0xb3, 0xc9, 0xaf, 0x36, 0x93, 0xec, 0x43, 0x01,
	0xc5, 0x11, 0x17, 0x91, 0x81, 0x4d, 0xdf, 0xc8, 0xf3, 0xab, 0x3f, 0xc7, 0xc8, 0x80, 0xbd, 0xb9,
	0xc7, 0x1c, 0x4f, 0x5a, 0x3e, 0x72, 0x82, 0xd0, 0xf7, 0x5e, 0xf1, 0xab, 0xa0, 0xc7, 0xb4, 0xbc,
	0xc9, 0x80, 0x58, 0x70, 0x20, 0x03, 0xca, 0x07, 0xbe, 0xf7, 0xc2, 0xe4, 0x17, 0xbe, 0xd8, 0xb1,
	0xd4, 0xdb, 0xab, 0x0b, 0xd8, 0xf1, 0xbd, 0x17, 0xfc, 0x12, 0x18, 0x1c, 0xc8, 0x67, 0xf4, 0x18,
	0xaa, 0xc1, 0xa1, 0xef, 0x4e, 0x9f, 0x8b, 0x82, 0xd6, 0x92, 0x77, 0xb2, 0x93, 0x05, 0xf5, 0x29,
	0x9c, 0x17, 0x55, 0x09, 0x94, 0x14, 0x29, 0x8c, 0x75, 0x4d, 0x14, 0x56, 0x3c, 0xa9, 0x30, 0x26,
	0x11, 0x51, 0x98, 0xad, 0xa4, 0x50, 0x07, 0xd6, 0x78, 0x5f, 0x45, 0x69, 0xa5, 0xe4, 0x4b, 0x8f,
	0x15, 0x42, 0xe2, 0xc5, 0x55, 0x47, 0x6a, 0x92, 0x68, 0x1c, 0x6f, 0xdc, 0x33, 0xea, 0x2d, 0xc0,
	0x49, 0x1a, 0xc7, 0xda, 0xf6, 0x88, 0x80, 0x71, 0xd9, 0x8e, 0x12, 0xa4, 0x9b, 0xa2, 0x65, 0xac,
	0xa8, 0xf2, 0x49, 0xdd, 0xe4, 0x0d, 0x63, 0x65, 0x55, 0x46, 0x4a, 0xaa, 0xf6, 0x10, 0xf2, 0x4c,
	0xb5, 0xd1, 0x5d, 0xee, 0xcc, 0x90, 0xb9, 0x2f, 0x0e, 0x39, 0x50, 0xc2, 0x67, 0xa6, 0x17, 0x30,
	0x43, 0xfe, 0x14, 0xd4, 0x5e, 0x41, 0x59, 0x99, 0x17, 0xe8, 0x1e, 0x14, 0xc5, 0xa2, 0x74, 0xc2,
	0x49, 0x85, 0xc4, 0xa1, 0x6f, 0xf2, 0x5a, 0xd9, 0x34, 0x4c, 0x27, 0x6f, 0xd1, 0x93, 0x5a, 0x77,
	0xc4, 0x31, 0x29, 0xab, 0x9a, 0x26, 0x6b, 0x0f, 0xc9, 0xe6, 0xc7, 0x66, 0x40, 0x6c, 0x71, 0x4e,
	0x9d, 0x62, 0x71, 0xae, 0x7d, 0x06, 0x25, 0x39, 0x97, 0xbe, 0x06, 0xfb, 0x37, 0x21, 0xcf, 0x06,
	0x07, 0xdd, 0x86, 0x02, 0x53, 0x8e, 0xe3, 0x38, 0x05, 0xa4, 0xf6, 0x31, 0x14, 0xf8, 0x48, 0xbc,
	0x26, 0xe3, 0x21, 0x40, 0x34, 0x7f, 0xd0, 0x2d, 0x79, 0xcd, 0x72, 0x21, 0xf4, 0x8a, 0x64, 0x15,
	0x17, 0x2d, 0xb7, 0xa0, 0x68, 0x8d, 0x46, 0xae, 0x3c, 0x51, 0x58, 0x8e, 0x96, 0x98, 0xda, 0x14,
	0x2a, 0xea, 0x04, 0x7b, 0xad, 0xba, 0xee, 0x41, 0x31, 0x98, 0x3f, 0x63, 0x5f, 0xd8, 0xa6, 0x93,
	0xc3, 0x1f, 0xbb, 0x7d, 0x2d, 0x71, 0xb5, 0xef, 0xa7, 0xa0, 0xa2, 0x4e, 0x42, 0x52, 0xa1, 0x7c,
	0x49, 0xb9, 0xb2, 0x42, 0xfe, 0x52, 0x72, 0x17, 0xca, 0xa1, 0xe5, 0x1f, 0x38, 0xa1, 0xa9, 0xdc,
	0x0e, 0x3f, 0xf5, 0x45, 0x4e, 0x60, 0xbc, 0xe4, 0xb9, 0xf6, 0x10, 0xaa, 0xb1, 0xc9, 0xfb, 0x3a,
	0xfd, 0xae, 0x7d, 0x0a, 0x65, 0x65, 0xae, 0xbe, 0x4e, 0x0f, 0x6a, 0x9f, 0x40, 0x45, 0x9d, 0x9b,
	0x68, 0x13, 0x72, 0x6c, 0x4a, 0xaf, 0x66, 0x65, 0x00, 0xfd, 0xd7, 0x53, 0x2b, 0xae, 0xfc, 0xee,
	0xd5, 0x87, 0x9d, 0xc6, 0x2e, 0xfb, 0xe0, 0x88, 0x3d, 0x9b, 0x3b, 0xb8, 0x3b, 0xec, 0x69, 0x79,
	0x02, 0x65, 0xdf, 0x7c, 0x19, 0x5a, 0x1a, 0x55, 0xa1, 0x34, 0xec, 0x88, 0x64, 0x86, 0x7e, 0x66,
	0x8a, 0x8d, 0xfa, 0xc0, 0xd0, 0xb2, 0xec, 0xfb, 0xd3, 0xfe, 0x00, 0x77, 0xbf, 0xd4, 0x72, 0xe8,
	0x0c, 0x54, 0x59, 0x86, 0xf8, 0xea, 0xab, 0x80, 0x10, 0xac, 0xf1, 0x7c, 0x41, 0x2b, 0x92, 0xda,
	0x38, 0x8c, 0xdd, 0xef, 0x2c, 0x11, 0x46, 0x81, 0x62, 0x24, 0x40, 0xeb, 0x50, 0xde, 0xc1, 0xdd,
	0xa7, 0x82, 0xab, 0x4c, 0x30, 0xfd, 0x5d, 0xdc, 0xea, 0x3c, 0x16, 0xa4, 0x8a, 0xfe, 0x77, 0xd3,
	0x50, 0x69, 0x4d, 0x8f, 0x1c, 0x3f, 0x70, 0x4e, 0x6d, 0x71, 0x72, 0x6b, 0x2f, 0xbd, 0xd2, 0xda,
	0x4b, 0x9a, 0xa4, 0x99, 0xaf, 0x65, 0x92, 0x66, 0x4f, 0xb4, 0xac, 0x17, 0xed, 0xb0, 0x1c, 0xad,
	0xe9, 0xf4, 0x76, 0x58, 0x6c, 0x35, 0xca, 0x9f, 0xc6, 0x36, 0xff, 0xab, 0x39, 0x28, 0x8a, 0xc5,
	0x79, 0xe9, 0x21, 0xe8, 0x4d, 0x28, 0xb0, 0x85, 0x7d, 0xf5, 0x49, 0x68, 0x9e, 0xae, 0xe9, 0xaf,
	0x6b, 0x80, 0xc7, 0xda, 0x9a, 0x3d, 0x8d, 0x55, 0xac, 0xee, 0x10, 0xb9, 0xe4, 0x6d, 0x8b, 0x15,
	0x3b, 0xc4, 0x9f, 0xec, 0x6b, 0xf5, 0xd2, 0xa9, 0xbf, 0x56, 0xff, 0x04, 0x2a, 0x87, 0x34, 0xdc,
	0x85, 0x49, 0x23, 0x19, 0x2d, 0x7e, 0x4f, 0xaf, 0x04, 0xc3, 0xc0, 0xe5, 0x43, 0x25, 0x90, 0xc9,
	0x4d, 0xc8, 0x31, 0x96, 0x6a, 0xf2, 0xb3, 0x90, 0x28, 0x60, 0x06, 0x43, 0xa0, 0xfb, 0x50, 0x7e,
	0xee, 0x8e, 0xc7, 0xe6, 0x8c, 0x06, 0x7a, 0xe0, 0x16, 0xae, 0x62, 0xe0, 0x47, 0x41, 0x20, 0x30,
	0x3c, 0x8f, 0x02, 0x42, 0x88, 0xef, 0xdc, 0xf3, 0xca, 0x77, 0xee, 0xd1, 0x39, 0x34, 0x1c, 0x7f,
	0x0e, 0x1d, 0xff, 0x22, 0xbe, 0x7c, 0xea, 0x2f, 0xe2, 0xb7, 0xe1, 0xec, 0xc4, 0x7a, 0x69, 0xda,
	0xde, 0x64, 0x36, 0x76, 0xa8, 0x5b, 0x10, 0xba, 0xd2, 0x42, 0x5b, 0xf5, 0x3d, 0xfc, 0x99, 0x89,
	0xf5, 0xb2, 0x21, 0x39, 0x06, 0xee, 0xc4, 0xd1, 0x3f, 0x85, 0x6a, 0x6c, 0x1b, 0xa7, 0x6f, 0x43,
	0xe8, 0x79, 0xff, 0x6a, 0x23, 0x83, 0x01, 0xf4, 0x9f, 0xcd, 0x1d, 0x73, 0xb8, 0xff, 0x1a, 0x7a,
	0xfd, 0xf5, 0xe7, 0x7f, 0x22, 0x38, 0x43, 0x36, 0x39, 0x60, 0x2b, 0x82, 0x33, 0xa8, 0x13, 0x29,
	0x77, 0xe2, 0x44, 0xba, 0x49, 0x63, 0xa9, 0x85, 0xce, 0x46, 0x9e, 0x6e, 0x61, 0x67, 0xe3, 0xfd,
	0xe8, 0x93, 0x2c, 0xcc, 0x10, 0xf1, 0x39, 0x57, 0x38, 0xcd, 0x9c, 0xbb, 0xa3, 0x44, 0x44, 0x29,
	0x26, 0x1d, 0x4a, 0x51, 0xfe, 0x3c, 0x88, 0xe2, 0xa4, 0xa0, 0x06, 0x9c, 0x65, 0xcf, 0xe6, 0x7c,
	0x36, 0x22, 0x16, 0x2b, 0x6b, 0x5c, 0x89, 0x3a, 0x70, 0x4b, 0x1b, 0x77, 0x86, 0xe1, 0x87, 0x14,
	0x4e, 0x49, 0xe8, 0x36, 0xa0, 0x78, 0x21, 0xf3, 0xb9, 0xcb, 0x3e, 0xd4, 0xa9, 0x60, 0x4d, 0x85,
	0x0f, 0xe7, 0xee, 0xe8, 0xf4, 0x11, 0xb6, 0xbe, 0x6e, 0x78, 0x87, 0xd8, 0xa2, 0x50, 0x3d, 0xf5,
	0xa2, 0x20, 0xc2, 0x90, 0xac, 0x45, 0x61, 0x48, 0xf4, 0xef, 0xc0, 0x05, 0xfa, 0x02, 0x8a, 0x4b,
	0x98, 0xde, 0x30, 0x60, 0xae, 0xee, 0x6b, 0x9b, 0x92, 0xfa, 0x65, 0xc8, 0x0e, 0x87, 0xc9, 0x40,
	0x86, 0x15, 0xf1, 0x1d, 0xe2, 0xdf, 0x4f, 0xab, 0x8e, 0x74, 0x52, 0x89, 0x53, 0xa7, 0x0e, 0xf8,
	0xa1, 0x6a, 0x63, 0xfa, 0xc4, 0x4d, 0xec, 0x7d, 0xc8, 0x52, 0xff, 0x9f, 0x4d, 0x92, 0x8b, 0x2b,
	0xdd, 0x0a, 0x4c, 0x61, 0xe8, 0xdb, 0x50, 0x1d, 0x5b, 0xa1, 0x13, 0x84, 0x26, 0x1b, 0x55, 0xfe,
	0xe2, 0xef, 0xe2, 0x12, 0xb7, 0x9d, 0x6b, 0x5a, 0x85, 0xe1, 0x59, 0x0a, 0xdd, 0x57, 0xf4, 0x33,
	0x97, 0x8c, 0x52, 0x93, 0x64, 0x8d, 0x94, 0x54, 0x87, 0x2c, 0xd5, 0xa8, 0x3c, 0xad, 0x6d, 0x4d,
	0xd9, 0x60, 0x87, 0xad, 0x26, 0xa6, 0x79, 0xfa, 0x1f, 0xa5, 0x60, 0x3d, 0x51, 0x02, 0x91, 0xa2,
	0x27, 0x48, 0x4b, 0xa5, 0xa8, 0x1e, 0x32, 0x94, 0x25, 0xb4, 0x35, 0x42, 0x5b, 0x62, 0x96, 0x32,
	0x43, 0x73, 0x63, 0x45, 0x2b, 0xe5, 0x54, 0xdd, 0x80, 0xc2, 0xc4, 0x09, 0x02, 0xeb, 0x40, 0x7c,
	0xf3, 0x25, 0x92, 0x64, 0x82, 0xd9, 0x1e, 0xb1, 0x71, 0x42, 0x67, 0x64, 0x9e, 0x66, 0x0b, 0x45,
	0x12, 0x8e, 0xe5, 0xbc, 0x16, 0x02, 0x60, 0xfb, 0xe8, 0x72, 0x01, 0xfc, 0x46, 0x1a, 0xd6, 0xe9,
	0x1e, 0xc4, 0x3a, 0xff, 0x35, 0xa2, 0xb0, 0x3d, 0x4c, 0x7e, 0x80, 0xff, 0x66, 0x82, 0x21, 0x2a,
	0x79, 0x31, 0x16, 0xdb, 0xbd, 0x58, 0x2c, 0xb6, 0xab, 0xab, 0x39, 0x95, 0x88, 0x6c, 0x1f, 0xb0,
	0x50, 0x54, 0xd9, 0xe4, 0x17, 0x7d, 0x49, 0x16, 0x11, 0x97, 0xad, 0xf6, 0x4e, 0x14, 0x12, 0xed,
	0x12, 0x94, 0x9c, 0x97, 0xf4, 0x82, 0xc2, 0x88, 0xf5, 0x2f, 0x47, 0xec, 0x08, 0x37, 0x6c, 0x78,
	0x23, 0xa7, 0xf6, 0x2e, 0x0f, 0x7f, 0x76, 0x0d, 0xca, 0x7c, 0x61, 0x92, 0xb0, 0x2a, 0x7b, 0x91,
	0x3d, 0x0f, 0x28, 0xf0, 0x2d, 0x16, 0xf7, 0xec, 0x32, 0x94, 0x82, 0xb9, 0x6d, 0x3b, 0xce, 0xc8,
	0x61, 0x5a, 0x52, 0xc4, 0x11, 0x41, 0xff, 0xe9, 0x75, 0x80, 0x68, 0xf1, 0x54, 0xf7, 0xa2, 0xd4,
	0x09, 0x7b, 0xd1, 0xcd, 0xb8, 0x1a, 0x1d, 0xb7, 0xd8, 0x2b, 0x1a, 0x94, 0x8d, 0x6b, 0xd0, 0x87,
	0xd2, 0xc9, 0x28, 0x25, 0xc3, 0x0c, 0x45, 0xad, 0x4a, 0x5e, 0xe2, 0xfc, 0x10, 0xf2, 0xbe, 0x63,
	0x05, 0x1e, 0x0b, 0x53, 0xb1, 0x8a, 0x09, 0x53, 0x08, 0xe6, 0x50, 0x69, 0x7a, 0x64, 0x14, 0xd3,
	0x23, 0xbe, 0xbb, 0x9d, 0xb4, 0x9e, 0x24, 0xb6, 0xd0, 0xc2, 0x29, 0xb7, 0xd0, 0xd8, 0xab, 0xf2,
	0x3c, 0x7f, 0xb7, 0x2a, 0x5f, 0x95, 0x23, 0xae, 0xfd, 0x65, 0xd6, 0x2c, 0xf2, 0x4c, 0xc4, 0xc5,
	0xcc, 0xb2, 0x57, 0xd4, 0x78, 0x2b, 0x62, 0x91, 0x44, 0xdf, 0x82, 0x0a, 0xb5, 0xbf, 0xc4, 0x12,
	0xb5, 0x4e, 0xdb, 0x70, 0x71, 0xa5, 0x76, 0xe1, 0xb2, 0x1d, 0x11, 0x94, 0xcd, 0xa9, 0x72, 0xc2,
	0xe6, 0xd4, 0x64, 0xaf, 0x62, 0xd9, 0x1d, 0x08, 0x5e, 0x57, 0x75, 0xa1, 0x2e, 0x81, 0xe0, 0x6b,
	0xda, 0xba, 0x1d, 0x27, 0xa0, 0xcf, 0x40, 0x9b, 0xb3, 0x8f, 0x22, 0xe8, 0xed, 0x3d, 0xc5, 0xea,
	0x5a, 0x16, 0x65, 0x75, 0x5d, 0xc1, 0x12, 0x22, 0xfa, 0x1c, 0xd8, 0x6d, 0x5a, 0x76, 0x8f, 0x40,
	0x4b, 0x9e, 0x0a, 0x2e, 0xdf, 0xbb, 0xb0, 0xc2, 0xa3, 0x3f, 0x92, 0x1f, 0x49, 0x12, 0x07, 0x8d,
	0x05, 0x02, 0x69, 0xd7, 0xfb, 0x03, 0x03, 0xb3, 0x60, 0x2e, 0x9c, 0x44, 0x63, 0xba, 0x68, 0x29,
	0x74, 0x16, 0xd6, 0x39, 0xc5, 0xf8, 0xc2, 0x68, 0x0c, 0x07, 0x5d, 0xac, 0xa5, 0xf5, 0xdf, 0x2d,
	0x42, 0x9e, 0xa9, 0x12, 0xd2, 0xe1, 0x2a, 0x36, 0xea, 0xfd, 0x6e, 0xc7, 0xe4, 0x31, 0xd0, 0x24,
	0xce, 0xdc, 0xae, 0xb7, 0xf6, 0x8c, 0xa6, 0xf6, 0x8d, 0x18, 0xa6, 0x33, 0xa8, 0xb7, 0x3a, 0x06,
	0x36, 0xb9, 0xfb, 0xca, 0x31, 0xe7, 0xd1, 0x35, 0xb8, 0xb4, 0x88, 0x69, 0xb5, 0x5b, 0x03, 0x1a,
	0xc3, 0x44, 0x3b, 0x8b, 0xde, 0x86, 0xeb, 0xc7, 0x00, 0xcc, 0x66, 0xab, 0xff, 0x58, 0x3b, 0x87,
	0xde, 0x01, 0xfd, 0x38, 0x54, 0xdb, 0x68, 0x77, 0xf1, 0x97, 0x5a, 0x11, 0x5d, 0x85, 0xda, 0x02,
	0xae, 0x87, 0x0d, 0xa3, 0xdd, 0x1b, 0x18, 0x4d, 0xed, 0xcc, 0xd2, 0x26, 0xb3, 0x00, 0x37, 0xa2,
	0xc9, 0x17, 0x94, 0xba, 0xda, 0xf5, 0x2f, 0x48, 0xf7, 0x7b, 0x7b, 0x06, 0xad, 0x65, 0xd0, 0x6a,
	0x1b, 0x26, 0x36, 0xea, 0x8d, 0x5d, 0xa3, 0xa9, 0xbd, 0x89, 0x36, 0xe1, 0x6d, 0x8e, 0x93, 0xa2,
	0xc1, 0xc6, 0x4e, 0xab, 0x3f, 0xc0, 0x75, 0x09, 0xef, 0x0e, 0x07, 0xda, 0x1b, 0xe8, 0x16, 0xbc,
	0xb3, 0x88, 0x5c, 0x8a, 0xdd, 0x50, 0x7a, 0x20, 0xb1, 0x03, 0x03, 0xb7, 0x5b, 0x9d, 0x3a, 0xe9,
	0x41, 0x0a, 0x5d, 0x87, 0xcb, 0xc9, 0xfc, 0x61, 0x87, 0x95, 0x65, 0x60, 0xa3, 0xa9, 0xa5, 0xd1,
	0x65, 0xd8, 0xe0, 0x88, 0x6d, 0x5c, 0x6f, 0x1b, 0x4f, 0xbb, 0xf8, 0xb1, 0x89, 0x8d, 0x76, 0xf7,
	0x89, 0xd1, 0xd4, 0x32, 0x64, 0xe0, 0x79, 0xee, 0x4e, 0xc3, 0x34, 0x30, 0xee, 0x62, 0x2d, 0xab,
	0x54, 0xda, 0xea, 0x3c, 0xa9, 0xef, 0xb5, 0x9a, 0x11, 0x6b, 0xab, 0xa9, 0xe5, 0xd0, 0x45, 0x38,
	0x9f, 0xc8, 0xef, 0x6e, 0x6f, 0x1b, 0xb8, 0xaf, 0xe5, 0x95, 0xf6, 0xb4, 0xba, 0x66, 0xff, 0x69,
	0x6b, 0xd0, 0xd8, 0x7d, 0xd4, 0xad, 0x63, 0xa2, 0x2f, 0x2d, 0xd2, 0xe2, 0x4b, 0x4a, 0xe1, 0x4c,
	0x1f, 0xc9, 0x98, 0x36, 0xba, 0x9d, 0x8e, 0xd1, 0x20, 0xf9, 0x05, 0xa5, 0x70, 0x6c, 0x34, 0xba,
	0x9d, 0x46, 0x6b, 0xaf, 0xc5, 0x94, 0xa3, 0xa4, 0x74, 0x45, 0x06, 0x3d, 0x35, 0xc5, 0xc9, 0x09,
	0x42, 0x57, 0xe0, 0x22, 0xcf, 0x65, 0x91, 0x8a, 0x62, 0xe5, 0x02, 0xda, 0x80, 0x73, 0xb1, 0x6c,
	0x21, 0x83, 0xb2, 0xa2, 0x73, 0xb1, 0x1c, 0xf3, 0xd1, 0x97, 0x66, 0xb7, 0x67, 0xe0, 0x3a, 0x99,
	0x0d, 0xd7, 0x16, 0x8a, 0x17, 0x43, 0x46, 0xc5, 0x7c, 0x9d, 0x45, 0xe3, 0x89, 0x65, 0xf7, 0x07,
	0x75, 0x4c, 0xaa, 0xae, 0x2c, 0x54, 0x2d, 0xda, 0x5c, 0x55, 0xaa, 0x96, 0x81, 0x5f, 0x8d, 0xa6,
	0xd9, 0x1c, 0xe2, 0x56, 0x67, 0x87, 0x4f, 0x1e, 0xed, 0x6a, 0x12, 0xd5, 0xd8, 0x35, 0x1a, 0x8f,
	0x69, 0x70, 0xd8, 0x61, 0x9f, 0xab, 0x6b, 0x53, 0xbb, 0x8c, 0xde, 0x83, 0x77, 0x55, 0xd4, 0xae,
	0x51, 0xdf, 0x1b, 0xec, 0x2e, 0x07, 0x5f, 0x51, 0x7a, 0x43, 0xc1, 0xf4, 0x7c, 0x49, 0x8c, 0xa6,
	0x76, 0x51, 0x99, 0x18, 0x4a, 0xf6, 0xb0, 0x53, 0x1f, 0x0e, 0x76, 0xbb, 0xb8, 0xf5, 0x3d, 0xa3,
	0xa9, 0xd5, 0x58, 0x18, 0xdb, 0x08, 0x23, 0x98, 0xd7, 0x94, 0x61, 0xa2, 0x19, 0x31, 0xb6, 0xf5,
	0x24, 0x9b, 0x90, 0x85, 0xa6, 0x7f, 0x08, 0x85, 0x6d, 0x77, 0x1c, 0x3a, 0xf4, 0xb2, 0xdd, 0x9a,
	0xef, 0xec, 0xcf, 0x03, 0xc7, 0x8c, 0x62, 0x78, 0xd3, 0x80, 0xc6, 0xf7, 0x71, 0x95, 0x65, 0xf0,
	0x80, 0x9c, 0xfa, 0xcf, 0xa7, 0xa1, 0xac, 0x44, 0x34, 0x44, 0xdf, 0x82, 0xd2, 0x91, 0xe5, 0xbb,
	0x64, 0x25, 0x15, 0xf6, 0xfb, 0xd5, 0xa5, 0xb1, 0x0f, 0xb7, 0x9e, 0x70, 0x18, 0x8e, 0x18, 0x6a,
	0xff, 0x34, 0x05, 0x45, 0x41, 0x5f, 0xea, 0xb0, 0x7e, 0x5b, 0x46, 0xbe, 0x49, 0x44, 0x7a, 0x5a,
	0x56, 0x32, 0x35, 0xc2, 0x1e, 0xe4, 0x9e, 0xd4, 0xf7, 0x86, 0x06, 0xb7, 0xc5, 0xa4, 0x93, 0x90,
	0x56, 0xe3, 0x28, 0x6e, 0x42, 0x3e, 0x70, 0x6c, 0x5f, 0x46, 0x70, 0x51, 0x76, 0xa7, 0x3e, 0xa5,
	0x63, 0x9e, 0xaf, 0xdf, 0x5a, 0x76, 0x64, 0x58, 0x02, 0x56, 0x07, 0x0b, 0x35, 0xd7, 0x37, 0x1a,
	0xd8, 0x18, 0x68, 0x69, 0xfd, 0x43, 0x28, 0xc9, 0x00, 0xe1, 0x48, 0x83, 0xcc, 0x73, 0xe7, 0x15,
	0xef, 0x0b, 0x79, 0x54, 0x9b, 0xa2, 0xc4, 0x4d, 0xf9, 0x11, 0x00, 0xc9, 0x14, 0xa0, 0xbb, 0x50,
	0x9a, 0x89, 0x14, 0x97, 0xe6, 0xd2, 0xf0, 0xe3, 0x11, 0x4a, 0x7f, 0x04, 0xd0, 0xf0, 0x9d, 0x91,
	0x33, 0x0d, 0x5d, 0x6b, 0x9c, 0x8c, 0x8e, 0x90, 0x8e, 0x47, 0x47, 0xb8, 0x20, 0xfb, 0x9d, 0xe6,
	0x91, 0x42, 0x59, 0x2f, 0x0d, 0x7a, 0x1c, 0xcb, 0xcb, 0x08, 0xd0, 0x37, 0xa1, 0x6c, 0x47, 0x49,
	0xde, 0x0e, 0xc5, 0xfa, 0x88, 0xb0, 0x58, 0x05, 0xea, 0x7f, 0x25, 0x0d, 0x79, 0x26, 0x3f, 0x74,
	0x33, 0x66, 0x31, 0x9f, 0x4f, 0xca, 0x57, 0x35, 0x97, 0x3f, 0x21, 0x1e, 0x20, 0xbf, 0xde, 0xc6,
	0x0d, 0xe6, 0xda, 0x02, 0x5e, 0x5e, 0x80, 0xc3, 0x11, 0x18, 0xdd, 0x56, 0x83, 0x64, 0xc6, 0xce,
	0x57, 0x38, 0x17, 0x3d, 0x41, 0x17, 0x21, 0x74, 0xee, 0x42, 0x49, 0x96, 0xb2, 0x54, 0xd7, 0xf8,
	0x90, 0x31, 0xd1, 0x90, 0xc7, 0xda, 0x25, 0x11, 0x79, 0x48, 0x58, 0x74, 0xcc, 0xd5, 0xa4, 0xcf,
	0xfa, 0xfb, 0xcb, 0x54, 0xa3, 0x0a, 0x25, 0x6c, 0x6c, 0x1b, 0xd8, 0xe8, 0xd0, 0x08, 0x56, 0x52,
	0x53, 0xd2, 0xfa, 0x53, 0x28, 0x61, 0x2b, 0x64, 0xe6, 0x03, 0xa9, 0xea, 0xab, 0x19, 0x9f, 0x64,
	0x98, 0x3c, 0x26, 0x63, 0x30, 0x24, 0x06, 0xae, 0x06, 0x45, 0xdb, 0x9a, 0x59, 0xb6, 0x88, 0x9b,
	0x9e, 0xc5, 0x32, 0xad, 0xff, 0xed, 0x14, 0x80, 0x2c, 0x39, 0x40, 0xef, 0x41, 0x9e, 0x7f, 0x84,
	0xbf, 0xa0, 0x3f, 0x12, 0x85, 0x39, 0x04, 0xdd, 0x83, 0xf3, 0xd6, 0xc1, 0x81, 0xef, 0x1c, 0x58,
	0xa1, 0x63, 0x8a, 0xd0, 0x51, 0xa4, 0x65, 0xec, 0x6b, 0x9d, 0xb3, 0x32, 0x93, 0x7f, 0xfa, 0xfe,
	0xdd, 0x59, 0x80, 0xbe, 0x05, 0xb5, 0x45, 0x9e, 0x44, 0xeb, 0x36, 0x92, 0x8c, 0x0d, 0xd1, 0xda,
	0xbf, 0x96, 0x81, 0x5c, 0x6b, 0x42, 0xec, 0xf1, 0x95, 0xd1, 0x9c, 0x68, 0xb6, 0xaa, 0x21, 0x9b,
	0x90, 0xb5, 0x66, 0x33, 0x9b, 0x2b, 0xc7, 0x02, 0xb2, 0x3e, 0x9b, 0xd9, 0x98, 0x22, 0xd0, 0x16,
	0xe4, 0x47, 0x9e, 0xfd, 0xdc, 0x59, 0x12, 0xcb, 0x86, 0x61, 0x9b, 0x34, 0x17, 0x73, 0x14, 0xba,
	0x0c, 0x79, 0x7a, 0x0f, 0x8b, 0x9d, 0x52, 0x89, 0xf8, 0xa6, 0x9c, 0x56, 0x1b, 0x40, 0x96, 0x94,
	0xbd, 0x54, 0x59, 0xd6, 0xf8, 0x35, 0x59, 0x11, 0x50, 0x22, 0x32, 0x78, 0x33, 0x27, 0xc4, 0x3b,
	0xff, 0xb1, 0x14, 0xe4, 0x59, 0x33, 0x96, 0x16, 0xfc, 0x09, 0x40, 0x34, 0xa7, 0x16, 0xbb, 0x1c,
	0xcd, 0x3d, 0x1a, 0x20, 0x47, 0xc1, 0x92, 0x26, 0xd8, 0xde, 0x74, 0xdf, 0x3d, 0x58, 0x6c, 0x82,
	0x58, 0xd5, 0x58, 0xbe, 0x7e, 0x99, 0xab, 0x6e, 0x11, 0xb2, 0xf5, 0x5e, 0xaf, 0xc1, 0xd6, 0xb1,
	0x66, 0xb7, 0xf1, 0xd8, 0x20, 0x66, 0xe8, 0x4f, 0xa4, 0x40, 0xa3, 0x81, 0x2b, 0x7a, 0xbe, 0x37,
	0xb3, 0x0e, 0xd8, 0x49, 0xca, 0x87, 0x3c, 0xde, 0x3f, 0x9b, 0xd0, 0x6a, 0xa4, 0xc4, 0x04, 0x52,
	0x09, 0xfa, 0xaf, 0x7f, 0xc6, 0x43, 0xf6, 0xc7, 0xa6, 0xc8, 0x79, 0x38, 0xb3, 0xdb, 0xed, 0x0f,
	0xcc, 0x41, 0x37, 0x32, 0x02, 0xb5, 0x14, 0x31, 0x9b, 0x1f, 0xb5, 0x9a, 0x2d, 0x6c, 0x34, 0x88,
	0xf1, 0x51, 0xdf, 0xd3, 0xd2, 0xfa, 0xbf, 0x2b, 0x40, 0x9e, 0xbf, 0x5c, 0xba, 0xc9, 0xab, 0xcf,
	0x50, 0x65, 0x39, 0x9f, 0x8c, 0x92, 0xa2, 0xfe, 0xd3, 0xc0, 0x0d, 0x58, 0x8b, 0x1c, 0x0a, 0x1a,
	0x71, 0x84, 0x89, 0xb7, 0x2a, 0xa9, 0x34, 0x62, 0xc7, 0x25, 0x28, 0x1d, 0x7a, 0x41, 0x68, 0x2a,
	0xe1, 0x90, 0xe9, 0x5d, 0x18, 0x9a, 0x79, 0x03, 0x72, 0xee, 0x44, 0xf8, 0x90, 0xe5, 0x7b, 0xeb,
	0x09, 0x35, 0xc2, 0x2c, 0x17, 0x7d, 0x20, 0x5d, 0xca, 0x5c, 0xf2, 0x78, 0x8c, 0xb7, 0x2b, 0x11,
	0x88, 0xe5, 0x0f, 0x73, 0xd2, 0x4d, 0xb8, 0x13, 0x5b, 0x21, 0x2f, 0xaf, 0xe0, 0x54, 0xa7, 0x41,
	0x0b, 0xaa, 0x4c, 0x6d, 0xcd, 0x58, 0xc8, 0x98, 0xb7, 0x57, 0xb1, 0x32, 0x25, 0x13, 0x6f, 0xea,
	0x47, 0x4a, 0x0a, 0x7d, 0xa6, 0x76, 0x7e, 0xe1, 0x12, 0x44, 0xbc, 0x98, 0x5d, 0x2e, 0x14, 0x45,
	0x3c, 0xdb, 0x50, 0x09, 0xac, 0xe9, 0xe8, 0x99, 0xf7, 0xd2, 0x94, 0xff, 0x9e, 0x11, 0xbb, 0x86,
	0x11, 0x2f, 0xa1, 0xcf, 0xb0, 0xb4, 0x90, 0x72, 0x10, 0x25, 0x4e, 0xbf, 0x0f, 0xd7, 0x5e, 0x40,
	0x45, 0xed, 0x0e, 0xd9, 0xc9, 0x46, 0xbe, 0x7b, 0x44, 0x77, 0x49, 0xba, 0x93, 0xb1, 0xd4, 0xd2,
	0xd8, 0x7f, 0x0f, 0x61, 0x8d, 0xe5, 0x9a, 0xde, 0x8c, 0xdd, 0xe0, 0xcd, 0x24, 0x67, 0x55, 0xb4,
	0x05, 0xe3, 0x2a, 0xc3, 0x76, 0x19, 0xb4, 0x76, 0x00, 0x45, 0x21, 0x00, 0x19, 0x3c, 0x9b, 0x4f,
	0x57, 0x1a, 0x98, 0x66, 0x07, 0xce, 0xd0, 0x08, 0x33, 0xe6, 0x2c, 0x9a, 0x02, 0x8b, 0xbb, 0x58,
	0x72, 0x92, 0x60, 0x6d, 0x92, 0xa0, 0xd4, 0x7e, 0x2a, 0x05, 0x65, 0x45, 0x50, 0xe8, 0x5b, 0x31,
	0xfd, 0xd8, 0x3c, 0x85, 0x6c, 0x13, 0x91, 0x93, 0xb8, 0x62, 0xcb, 0xa6, 0xea, 0x37, 0x57, 0x84,
	0x9c, 0xe9, 0x1b, 0x7b, 0xdb, 0x6c, 0x09, 0xe8, 0xd5, 0x31, 0x71, 0x4f, 0xd3, 0x7a, 0x7f, 0x19,
	0xf4, 0x0c, 0x54, 0xd9, 0x1a, 0x21, 0xde, 0x3c, 0xa6, 0xc8, 0x76, 0x47, 0xe7, 0x32, 0x8d, 0x5a,
	0x93, 0xa5, 0x7e, 0x6e, 0xbd, 0xd3, 0x7c, 0xd4, 0xfd, 0x82, 0x51, 0xd2, 0x8a, 0x7d, 0x94, 0xd1,
	0x2f, 0x44, 0x7f, 0xe0, 0x81, 0x9f, 0x6a, 0x29, 0xfa, 0xdb, 0x25, 0x6e, 0x6f, 0x06, 0xca, 0x4a,
	0xe8, 0x70, 0xf4, 0x08, 0x2a, 0xee, 0xcc, 0xe4, 0x81, 0x5d, 0xe5, 0x09, 0xe7, 0xb5, 0xe5, 0x71,
	0xc6, 0x5b, 0x3d, 0x11, 0x0a, 0xb6, 0xec, 0xce, 0xea, 0x82, 0x47, 0xea, 0x41, 0x5e, 0x89, 0x8a,
	0x7c, 0x01, 0xf2, 0xf4, 0xca, 0x04, 0xfb, 0x68, 0xa1, 0x84, 0x79, 0xea, 0xf4, 0x5f, 0x27, 0xa0,
	0x6d, 0xa8, 0xce, 0x3c, 0x3f, 0xa4, 0x5f, 0x20, 0xba, 0xd3, 0x03, 0xf1, 0x36, 0xe1, 0xcd, 0x15,
	0x21, 0xd0, 0x3d, 0x3f, 0x6c, 0x33, 0x24, 0xae, 0xcc, 0xa2, 0x44, 0x50, 0x1b, 0x43, 0x49, 0xb6,
	0x3b, 0x16, 0x52, 0x3d, 0xf5, 0xb5, 0x42, 0xaa, 0x5f, 0x01, 0x88, 0x04, 0x26, 0x02, 0x38, 0x49,
	0x69, 0xd4, 0x26, 0x50, 0x56, 0x9a, 0x12, 0x2d, 0x7c, 0x51, 0x14, 0x76, 0x36, 0xb3, 0x3d, 0x3f,
	0x4c, 0x2c, 0x9e, 0x04, 0xc1, 0x22, 0xfe, 0x2a, 0x8b, 0x27, 0x81, 0xd5, 0x94, 0x36, 0xb3, 0x83,
	0x5a, 0x99, 0xd6, 0xaf, 0x42, 0x51, 0xb4, 0x94, 0x68, 0x17, 0x69, 0x2b, 0x0b, 0xe0, 0xde, 0xea,
	0x1d, 0x7d, 0x53, 0x4b, 0xeb, 0xbf, 0x99, 0x83, 0xb5, 0x28, 0x3a, 0x2b, 0x1d, 0xf1, 0x9d, 0x44,
	0x38, 0x5e, 0x16, 0xfc, 0x54, 0x59, 0x4f, 0xe2, 0xf8, 0x95, 0x21, 0x79, 0xf5, 0x1f, 0xcf, 0xc5,
	0xe2, 0xc4, 0x26, 0x5e, 0xf4, 0xe7, 0x1a, 0xbb, 0xe4, 0xf1, 0xb7, 0x0a, 0xe8, 0x0c, 0x54, 0x9a,
	0xf5, 0x86, 0xd9, 0x7d, 0x62, 0x60, 0xdc, 0x6a, 0x1a, 0xda, 0x6f, 0x17, 0xd0, 0x39, 0x58, 0x27,
	0x24, 0x6c, 0xd4, 0x9b, 0x66, 0xdf, 0xa8, 0xe3, 0xc6, 0xae, 0xf6, 0xef, 0x0b, 0xa8, 0x0c, 0xf9,
	0xed, 0xee, 0x53, 0xb2, 0x43, 0xfd, 0x0e, 0x4b, 0xf4, 0x8d, 0x41, 0xab, 0xa9, 0xfd, 0x6e, 0x01,
	0x95, 0x20, 0x4b, 0xbc, 0x47, 0xed, 0x3f, 0x50, 0x7a, 0xdf, 0x18, 0xec, 0xb4, 0x9a, 0xda, 0xef,
	0x89, 0xc4, 0xb0, 0xd5, 0xd4, 0xfe, 0x63, 0x01, 0x55, 0xa0, 0xd0, 0x37, 0x06, 0xbd, 0x46, 0xbd,
	0xa7, 0xfd, 0x27, 0x5a, 0xc5, 0x5e, 0xab, 0x33, 0xfc, 0xc2, 0x6c, 0xb5, 0xdb, 0xc3, 0x41, 0xfd,
	0xd1, 0x9e, 0xa1, 0xfd, 0x7e, 0x01, 0x9d, 0x07, 0xad, 0x63, 0x0c, 0xcc, 0x47, 0xad, 0x4e, 0x53,
	0x46, 0x3a, 0xfd, 0xcf, 0x05, 0x84, 0xa0, 0x4a, 0xc9, 0xb8, 0x5b, 0x6f, 0x36, 0xea, 0xfd, 0x81,
	0xf6, 0x5f, 0x0a, 0x68, 0x0d, 0x4a, 0x84, 0x56, 0x6f, 0xb6, 0x5b, 0x1d, 0xed, 0xbf, 0xd2, 0xe2,
	0x49, 0x1a, 0xd7, 0x9f, 0x6a, 0xff, 0xad, 0x80, 0xaa, 0x50, 0x6c, 0xf5, 0x1a, 0x26, 0xbd, 0x38,
	0xf0, 0x07, 0x14, 0x4c, 0x92, 0xac, 0xf5, 0xff, 0xbd, 0x80, 0xd6, 0x01, 0xfa, 0x5f, 0xf6, 0xcd,
	0x76, 0xb7, 0x39, 0xdc, 0x33, 0xb4, 0xff, 0x41, 0x01, 0x84, 0x80, 0xeb, 0x4f, 0x5b, 0x5d, 0xed,
	0x7f, 0x4a, 0x40, 0x63, 0x17, 0x77, 0xbb, 0x03, 0xed, 0x0f, 0x25, 0xa1, 0x37, 0xc0, 0xf5, 0x86,
	0xa1, 0xfd, 0x2f, 0xc9, 0xd1, 0xab, 0x37, 0x1a, 0x03, 0xed, 0x7f, 0xcb, 0x34, 0x6b, 0xcf, 0xff,
	0xa1, 0x2d, 0x20, 0xe9, 0x47, 0x84, 0xff, 0x8f, 0x64, 0xb2, 0x43, 0x7a, 0xf4, 0xc7, 0x54, 0xe8,
	0xb4, 0x3e, 0x7e, 0x94, 0xa0, 0xfd, 0x58, 0x51, 0x20, 0x06, 0xad, 0xb6, 0xa1, 0xfd, 0x99, 0x22,
	0x3a, 0x0b, 0x6b, 0x34, 0x39, 0xf8, 0x92, 0x98, 0x06, 0xdb, 0xad, 0x1d, 0xed, 0xcf, 0x16, 0xc9,
	0xb8, 0xb5, 0x1f, 0x77, 0xba, 0x4d, 0xed, 0xc7, 0xe9, 0xf3, 0x9e, 0x51, 0xef, 0x1b, 0xda, 0xf7,
	0x8b, 0x48, 0x83, 0x72, 0x7d, 0xd8, 0x6c, 0x0d, 0xcc, 0xa7, 0xb8, 0x35, 0x30, 0xb4, 0x3f, 0x57,
	0x24, 0x22, 0x63, 0x14, 0x1e, 0x4d, 0x56, 0xfb, 0x89, 0x22, 0x1f, 0x81, 0x6d, 0x32, 0x02, 0x7f,
	0xbe, 0x48, 0x9a, 0xd0, 0x56, 0xc7, 0xfd, 0x27, 0x8b, 0xa4, 0x0f, 0x84, 0xc4, 0xfa, 0xf0, 0x17,
	0x8a, 0x74, 0xfc, 0xbe, 0xec, 0xef, 0x75, 0x77, 0xb4, 0x9f, 0x2a, 0x12, 0x09, 0x3c, 0xad, 0x3f,
	0x36, 0xcc, 0xfa, 0x5e, 0x1d, 0xb7, 0xb5, 0xbf, 0x48, 0xab, 0xa0, 0x37, 0x33, 0xcc, 0xfe, 0xb0,
	0xdf, 0x33, 0x3a, 0x4d, 0xed, 0x07, 0x14, 0xc4, 0xaa, 0x25, 0xba, 0xa3, 0xfd, 0x74, 0x51, 0xff,
	0xeb, 0x69, 0x28, 0xed, 0xb9, 0xd3, 0xf9, 0x4b, 0xaa, 0xdc, 0x06, 0xac, 0x4b, 0x1d, 0x7d, 0x25,
	0xbe, 0x49, 0x4b, 0xfe, 0xd1, 0x4a, 0x4c, 0xbf, 0xa9, 0x65, 0xb7, 0x66, 0xc7, 0xe7, 0x48, 0x1b,
	0xce, 0x3f, 0xf3, 0xe6, 0xd3, 0x91, 0x3b, 0x3d, 0x30, 0x63, 0x93, 0x25, 0x7d, 0x7c, 0x61, 0xf8,
	0x9c, 0x60, 0x6b, 0xa8, 0xff, 0xcf, 0xd3, 0x85, 0x0b, 0xce, 0xfe, 0xbe, 0xc3, 0xbf, 0x6e, 0x54,
	0xcb, 0xcb, 0x9c, 0x50, 0xde, 0x79, 0xc9, 0x17, 0x2b, 0x70, 0x0b, 0xce, 0xd2, 0x60, 0x81, 0xe6,
	0xcc, 0x1d, 0x99, 0x64, 0xbd, 0x0d, 0x66, 0x96, 0x2d, 0xfe, 0x19, 0xe0, 0x0c, 0xcd, 0xea, 0xb9,
	0xa3, 0x8e, 0xc8, 0xd0, 0x7f, 0x25, 0x03, 0x80, 0xa9, 0x37, 0x42, 0xbb, 0x77, 0x1f, 0x0a, 0x7e,
	0xcc, 0x6f, 0x51, 0x83, 0x21, 0x4a, 0x18, 0x7f, 0xc4, 0x02, 0x5b, 0xfb, 0xe3, 0x34, 0xe4, 0x19,
	0x0d, 0x7d, 0x14, 0xdb, 0x30, 0xaf, 0x1f, 0xc3, 0x9e, 0xd8, 0x28, 0x0f, 0x2d, 0x7f, 0xc4, 0x43,
	0x9f, 0xd1, 0x67, 0x42, 0x0b, 0xbc, 0xfd, 0x90, 0xfb, 0x32, 0xf4, 0x59, 0xff, 0xb9, 0xf4, 0x8a,
	0xb0, 0xf3, 0x78, 0xaf, 0x3d, 0x30, 0xeb, 0x7d, 0xb6, 0x19, 0xd2, 0x44, 0xa3, 0x8b, 0x0d, 0x2d,
	0x8d, 0x2a, 0x50, 0x64, 0xc9, 0xde, 0x50, 0xcb, 0xc8, 0xcc, 0x66, 0x7d, 0x50, 0xd7, 0xb2, 0x68,
	0x8d, 0x74, 0xbe, 0x3d, 0x30, 0xb7, 0xfb, 0xad, 0xef, 0xf1, 0xff, 0x0c, 0xa2, 0x69, 0xa2, 0x5b,
	0x7d, 0x2d, 0x4f, 0xff, 0x17, 0x88, 0xa4, 0xdb, 0x46, 0x9b, 0xce, 0xe7, 0x02, 0x0d, 0x25, 0x4d,
	0x29, 0xfd, 0x9d, 0xef, 0x0e, 0x8d, 0xa1, 0xa1, 0x15, 0x65, 0x99, 0x74, 0x82, 0x95, 0xd0, 0x3a,
	0x94, 0x59, 0xb2, 0xbb, 0xdd, 0xda, 0x33, 0x34, 0x90, 0x85, 0x76, 0x7a, 0xb8, 0xdb, 0xd0, 0xca,
	0xb2, 0x45, 0xb8, 0xdf, 0xd7, 0x2a, 0x12, 0x8e, 0x07, 0x3d, 0xdc, 0xea, 0x6a, 0x55, 0x85, 0x40,
	0xe7, 0xe3, 0x1a, 0x3d, 0xab, 0x24, 0x84, 0x7e, 0x6b, 0x87, 0xe8, 0x7a, 0xab, 0xb3, 0xa3, 0xad,
	0xcb, 0x42, 0xfb, 0x83, 0x7a, 0xe3, 0xb1, 0xa6, 0xe9, 0xdf, 0x4f, 0x41, 0x61, 0x30, 0xf8, 0x92,
	0x0e, 0xe2, 0x67, 0x50, 0x7e, 0xe1, 0x4e, 0x47, 0xde, 0x0b, 0x33, 0x70, 0x7f, 0xd4, 0x59, 0x8c,
	0x89, 0xcc, 0x71, 0x5b, 0x4f, 0x29, 0xa8, 0xef, 0xfe, 0xa8, 0x83, 0xe1, 0x85, 0x7c, 0xae, 0x3d,
	0x00, 0x88, 0x72, 0x58, 0xd4, 0xbc, 0x17, 0x81, 0xf8, 0xa3, 0x10, 0xf2, 0x8c, 0x36, 0xa0, 0x60,
	0x13, 0xf3, 0x67, 0x1a, 0xf0, 0x7d, 0x49, 0x24, 0xf5, 0x7f, 0x58, 0x84, 0x6a, 0x3c, 0x9a, 0xf6,
	0x9d, 0x98, 0x7f, 0x79, 0x79, 0xc5, 0x9b, 0x6b, 0x55, 0x17, 0x6e, 0x45, 0x37, 0x0c, 0xd9, 0x15,
	0xff, 0xc5, 0x68, 0x8c, 0x02, 0x90, 0xb8, 0x49, 0x1f, 0x0f, 0x69, 0xff, 0x20, 0xe1, 0x85, 0xea,
	0xab, 0xea, 0x66, 0x26, 0xad, 0xb8, 0x36, 0x4f, 0x5d, 0xc2, 0x8f, 0x21, 0x47, 0xc1, 0xdc, 0x2a,
	0x7f, 0x73, 0x15, 0x6b, 0x9b, 0x90, 0xd9, 0xbd, 0x0f, 0x8a, 0x40, 0x0f, 0xe8, 0x57, 0xde, 0xec,
	0x45, 0x37, 0xbd, 0x8e, 0x5a, 0x48, 0x86, 0xfb, 0x55, 0x6c, 0x09, 0xfa, 0x5d, 0xb7, 0x48, 0x04,
	0xe8, 0x1e, 0xc0, 0x98, 0xac, 0x57, 0x6c, 0x75, 0x2a, 0x26, 0xaf, 0xe4, 0xc8, 0xb5, 0x0c, 0x97,
	0xc6, 0x72, 0x59, 0xbb, 0x0f, 0x65, 0x36, 0x09, 0x19, 0x53, 0x29, 0x69, 0x52, 0x47, 0xb3, 0x0e,
	0x03, 0x03, 0xf2, 0x57, 0xa9, 0xc5, 0x50, 0x2c, 0x83, 0x90, 0x7c, 0x0f, 0xc6, 0xf5, 0x03, 0x17,
	0x42, 0xb6, 0xd6, 0xd4, 0x7e, 0x2e, 0x0b, 0x10, 0x09, 0x09, 0x9d, 0x13, 0x6e, 0x19, 0x0f, 0x3d,
	0xcc, 0xbc, 0xb0, 0xef, 0x40, 0x81, 0xf7, 0x86, 0xff, 0x25, 0xcd, 0xad, 0x93, 0xe5, 0x2d, 0x84,
	0xf1, 0x20, 0x4b, 0xec, 0x57, 0x2c, 0x0a, 0x40, 0xfd, 0xa4, 0x85, 0xc7, 0xbe, 0x6f, 0xdd, 0x3a,
	0x45, 0x89, 0x2b, 0xcd, 0x3d, 0x74, 0x03, 0x60, 0xe6, 0xbb, 0x47, 0xee, 0xd8, 0x39, 0x90, 0x27,
	0x0d, 0xe2, 0x2f, 0xe0, 0xa2, 0x0c, 0xf4, 0x21, 0x80, 0x3c, 0xd6, 0x5b, 0x12, 0x6a, 0x3f, 0x3a,
	0xfd, 0x53, 0x60, 0x68, 0x13, 0xb4, 0x7d, 0xcf, 0xb7, 0x1d, 0x73, 0x36, 0x1f, 0x8f, 0x4d, 0x26,
	0x1d, 0xfa, 0x7f, 0x32, 0x78, 0x8d, 0xd2, 0x7b, 0xf3, 0xf1, 0x98, 0x9d, 0xb7, 0xbc, 0x0b, 0x55,
	0xa6, 0xbc, 0x26, 0xf7, 0x9c, 0x0a, 0xf2, 0xbf, 0x41, 0x2a, 0x2c, 0xa3, 0x49, 0xe9, 0xff, 0xaf,
	0xed, 0xc5, 0x0f, 0xa1, 0xc0, 0x07, 0x83, 0xfe, 0xcb, 0x4f, 0xb7, 0xcf, 0xff, 0xc2, 0xe3, 0x11,
	0x6e, 0x35, 0x77, 0x0c, 0x16, 0x31, 0xba, 0xd3, 0xed, 0x18, 0x5a, 0x86, 0x3c, 0x0d, 0xfb, 0x06,
	0xd6, 0xb2, 0xb5, 0x7b, 0x50, 0x92, 0x33, 0x20, 0xf2, 0xd6, 0x53, 0xc7, 0x79, 0xeb, 0xfa, 0x95,
	0x28, 0x44, 0x35, 0x3f, 0xeb, 0x60, 0x71, 0x36, 0x8d, 0x7e, 0xb7, 0xaf, 0xa5, 0xf5, 0x7f, 0x9b,
	0x82, 0xf5, 0xc4, 0x7b, 0xc6, 0x25, 0x1f, 0x68, 0xa7, 0x4e, 0xf9, 0x81, 0xf6, 0xc2, 0x74, 0x4c,
	0x9d, 0x7e, 0x3a, 0xde, 0x87, 0xb2, 0x4d, 0x7d, 0x13, 0x36, 0x4d, 0x16, 0xcf, 0x80, 0x64, 0x14,
	0x0c, 0x0c, 0xb6, 0x7c, 0x46, 0x6f, 0x2a, 0x9f, 0xc2, 0xcc, 0xf8, 0x1f, 0x19, 0x56, 0xa3, 0x8f,
	0x5e, 0x7a, 0xee, 0x48, 0xff, 0xfd, 0x12, 0x40, 0xc4, 0x8d, 0x3e, 0xa2, 0x33, 0xc7, 0xb4, 0xc7,
	0x22, 0x90, 0xd3, 0xa5, 0xa5, 0xa1, 0x36, 0x3a, 0x4e, 0xd8, 0x20, 0x5e, 0xd0, 0x94, 0xfe, 0xd6,
	0x7e, 0xb2, 0x04, 0x39, 0x1a, 0x7d, 0xa3, 0xd6, 0x17, 0xe7, 0xa3, 0x1f, 0x41, 0xda, 0x9b, 0x2d,
	0xfe, 0xf5, 0xc5, 0x42, 0xb8, 0x8e, 0xe8, 0x22, 0x4c, 0xda, 0x9b, 0xc5, 0x0f, 0xe7, 0xb3, 0xe2,
	0x9c, 0xf6, 0x67, 0xb2, 0x90, 0x69, 0x6c, 0x7f, 0xb7, 0xf6, 0x13, 0x59, 0x00, 0xe5, 0x33, 0xf0,
	0x0f, 0x20, 0x3f, 0x72, 0x8e, 0x5c, 0x19, 0x8a, 0x49, 0xbd, 0xc1, 0x44, 0xe9, 0x5b, 0x9d, 0xf9,
	0xe4, 0x19, 0x3d, 0xdb, 0xa3, 0x49, 0xb2, 0x57, 0x04, 0x8e, 0x1d, 0x8a, 0x00, 0x8a, 0x59, 0x2c,
	0x92, 0x34, 0x9c, 0xbe, 0xcb, 0xff, 0x2e, 0x2b, 0x8b, 0xe9, 0x33, 0xaa, 0x43, 0xd9, 0xf5, 0x4c,
	0xfe, 0x27, 0x0a, 0x23, 0x7e, 0xaf, 0xe4, 0xfa, 0x31, 0x5d, 0x61, 0x67, 0xcb, 0xe0, 0x7a, 0xfc,
	0x2f, 0x0d, 0x46, 0xe8, 0x3b, 0xa0, 0x45, 0x45, 0xc8, 0x28, 0x36, 0xa7, 0x2b, 0x67, 0x4d, 0x96,
	0xc3, 0x62, 0x76, 0xec, 0xc2, 0xba, 0x52, 0x16, 0x6d, 0x6d, 0xfe, 0x94, 0x45, 0x55, 0x65, 0x51,
	0xf4, 0xd5, 0x36, 0xf1, 0xa6, 0x3d, 0x16, 0x84, 0x82, 0x16, 0x53, 0x38, 0x7d, 0xcf, 0x9e, 0x5a,
	0x2e, 0x8d, 0xa6, 0x87, 0x3e, 0x83, 0x92, 0xeb, 0x99, 0x13, 0xc7, 0x3f, 0xa0, 0x11, 0x92, 0x4e,
	0x57, 0x40, 0xd1, 0xf5, 0xda, 0x94, 0x83, 0xb3, 0xd3, 0x50, 0xac, 0x23, 0xfe, 0x57, 0x2b, 0xa7,
	0x62, 0xff, 0x2e, 0xe5, 0xa8, 0xfd, 0xeb, 0x14, 0x00, 0x0f, 0xac, 0xe4, 0x4e, 0x0f, 0x6a, 0xbf,
	0x96, 0xfa, 0x93, 0xe9, 0x45, 0x62, 0xa4, 0xd3, 0x3f, 0xa4, 0x91, 0xce, 0x7c, 0xbd, 0x91, 0xae,
	0xfd, 0x4e, 0xbc, 0x3b, 0x0f, 0x21, 0x63, 0xef, 0x7f, 0xc5, 0x57, 0x8b, 0x9b, 0xc7, 0x94, 0xd6,
	0xd8, 0xfe, 0xae, 0x1a, 0xfd, 0x86, 0x70, 0xa1, 0x0e, 0x54, 0xed, 0xfd, 0xaf, 0x4c, 0xdf, 0xb1,
	0xe7, 0x7e, 0xe0, 0x1e, 0x39, 0xbc, 0x73, 0xaf, 0x51, 0x4c, 0xc5, 0xde, 0xff, 0x0a, 0x0b, 0x76,
	0xd4, 0x03, 0x08, 0xa5, 0xe0, 0x79, 0x0f, 0xef, 0x1c, 0x53, 0x58, 0x34, 0x4a, 0x6a, 0x99, 0x4a,
	0x19, 0x7a, 0x5b, 0xbd, 0x9d, 0x97, 0x7c, 0xa9, 0x36, 0xe8, 0x0e, 0xea, 0x7b, 0xec, 0xac, 0x80,
	0xba, 0x52, 0x34, 0xf6, 0x31, 0xf3, 0xee, 0xe8, 0xda, 0xdf, 0xff, 0xb2, 0xd3, 0xd0, 0xb2, 0x84,
	0x58, 0xa7, 0x8f, 0xb9, 0x9a, 0x0e, 0x79, 0xb6, 0x38, 0x51, 0xcb, 0x70, 0x6c, 0x05, 0x01, 0xbf,
	0x9e, 0x46, 0x2c, 0x43, 0x96, 0xd4, 0xef, 0x42, 0x9e, 0x1d, 0xe3, 0xa0, 0x77, 0xe5, 0x41, 0x0f,
	0x13, 0xef, 0x7a, 0xe2, 0xa0, 0x47, 0x46, 0xa1, 0xf8, 0x00, 0x72, 0x94, 0x70, 0xfc, 0x5b, 0xbc,
	0xe8, 0x85, 0xa2, 0xfe, 0xcb, 0x29, 0xc8, 0xd2, 0x8d, 0xee, 0x02, 0xe4, 0xa7, 0x54, 0xdd, 0xf8,
	0x4e, 0xc9, 0x53, 0xca, 0xb9, 0xa4, 0xfa, 0x2f, 0x5d, 0x2b, 0x37, 0x45, 0xf4, 0x08, 0xe0, 0xc8,
	0x0d, 0x5c, 0x7e, 0x23, 0x9e, 0x05, 0x4f, 0xd7, 0x57, 0xdc, 0xd9, 0xdc, 0x7a, 0x22, 0x91, 0x58,
	0xe1, 0x52, 0xce, 0xb5, 0x72, 0x27, 0x44, 0xdd, 0x78, 0x1f, 0x72, 0x2c, 0x7a, 0xe1, 0xdb, 0x90,
	0x9b, 0xd1, 0xa8, 0x86, 0x4c, 0x40, 0xca, 0x0d, 0x39, 0x92, 0x8f, 0x59, 0xa6, 0xfe, 0xab, 0x69,
	0xa8, 0xc6, 0x5a, 0x90, 0x68, 0x2e, 0xb3, 0xb8, 0x5f, 0xb7, 0xb9, 0xcb, 0x44, 0x74, 0x3d, 0xfe,
	0xdf, 0x7a, 0x4c, 0x4a, 0x89, 0x3f, 0xd1, 0x2b, 0x8a, 0x0f, 0x29, 0x85, 0x1d, 0x2e, 0xd2, 0xea,
	0x5f, 0x4b, 0xe5, 0xe2, 0x7f, 0x2d, 0x75, 0x43, 0xf4, 0x33, 0x9f, 0xb4, 0x18, 0xa8, 0x1c, 0x78,
	0x47, 0x15, 0x09, 0x16, 0x4e, 0x90, 0xe0, 0x37, 0x01, 0xa2, 0x6e, 0x11, 0xc7, 0x4c, 0x5e, 0xe0,
	0xe0, 0xff, 0x64, 0xb8, 0x37, 0xa4, 0x77, 0x81, 0xe8, 0xdf, 0x16, 0x1b, 0x5f, 0x0c, 0x0c, 0xcc,
	0x5e, 0x71, 0x7c, 0x02, 0xf0, 0xd4, 0x71, 0x0f, 0x0e, 0x99, 0x71, 0x7c, 0x01, 0xf2, 0x2f, 0x68,
	0x8a, 0xc7, 0x39, 0xe1, 0x29, 0x19, 0x07, 0x3f, 0x1d, 0xc5, 0xc1, 0xd7, 0xff, 0x45, 0x0a, 0xca,
	0x4f, 0x58, 0x77, 0x28, 0xaf, 0xd2, 0x59, 0xa6, 0xae, 0xb2, 0xb3, 0x34, 0x9a, 0x87, 0x3b, 0x1e,
	0x99, 0x23, 0x76, 0x85, 0x8e, 0x1e, 0x0f, 0x52, 0x4a, 0xd3, 0x0a, 0x9d, 0x28, 0x5b, 0xee, 0x89,
	0x29, 0x9e, 0x4d, 0xd7, 0x7e, 0x99, 0x4d, 0x2f, 0xf5, 0x66, 0x15, 0xee, 0x61, 0xe0, 0xf8, 0xe8,
	0x0d, 0x28, 0x1c, 0xb8, 0xa1, 0x19, 0x1c, 0x5a, 0x5c, 0xc6, 0xf9, 0x03, 0x37, 0xec, 0x1f, 0x5a,
	0x84, 0x8f, 0x64, 0xb0, 0x6f, 0xce, 0xf9, 0x39, 0x6c, 0xe9, 0xc0, 0x0d, 0x1f, 0x51, 0x82, 0xe0,
	0x0b, 0xad, 0x03, 0xfe, 0xef, 0xc5, 0x84, 0x6f, 0x60, 0x1d, 0xe8, 0x77, 0x20, 0xbb, 0x3d, 0xb6,
	0x0e, 0x96, 0xbe, 0x1b, 0x5b, 0x3e, 0xf9, 0x7e, 0x21, 0x05, 0x59, 0xec, 0xad, 0xb8, 0x40, 0x10,
	0x89, 0x34, 0x1d, 0x13, 0xe9, 0x7d, 0x00, 0x79, 0xdd, 0x57, 0x2c, 0xde, 0x2b, 0xee, 0x05, 0x2b,
	0xc0, 0xd7, 0xff, 0x7e, 0x43, 0xbf, 0x07, 0xf9, 0xb6, 0x13, 0xfa, 0xae, 0x7d, 0x72, 0x8f, 0xc4,
	0xbf, 0xbd, 0xe8, 0x7f, 0x2b, 0x05, 0xc5, 0x6d, 0x77, 0x2c, 0xff, 0xab, 0x6d, 0xe1, 0xad, 0xc3,
	0x39, 0xc8, 0x4d, 0xc7, 0xee, 0x94, 0x39, 0x3c, 0x39, 0xcc, 0x12, 0xf4, 0xdc, 0x82, 0xf8, 0xdd,
	0xe2, 0xdc, 0x82, 0x78, 0xd1, 0x9b, 0x90, 0x9b, 0xd0, 0x81, 0xcd, 0xae, 0xbc, 0x0d, 0xc7, 0x00,
	0x84, 0x9b, 0xbe, 0x62, 0xa3, 0x7f, 0xe3, 0xca, 0xdf, 0xa5, 0x69, 0x90, 0x99, 0xf3, 0x7f, 0xf2,
	0x2a, 0x61, 0xf2, 0x48, 0x28, 0x07, 0xfc, 0x46, 0x62, 0x09, 0x93, 0x47, 0xfd, 0x17, 0x53, 0x90,
	0x67, 0x3b, 0xad, 0xd2, 0xd4, 0xe8, 0xdf, 0x45, 0x3f, 0x90, 0x2b, 0x62, 0xfa, 0x84, 0xfd, 0x99,
	0xc1, 0x6a, 0x1d, 0xc8, 0x33, 0x4a, 0x14, 0xc8, 0x45, 0x59, 0x52, 0x45, 0x20, 0x17, 0x05, 0x42,
	0xc3, 0xc1, 0xc8, 0x3a, 0xd2, 0x32, 0x1c, 0x0c, 0x83, 0xe8, 0x7f, 0x2f, 0x05, 0x15, 0x56, 0x53,
	0xdd, 0xb6, 0x9d, 0x80, 0xce, 0x6a, 0x69, 0x31, 0x24, 0xee, 0x9d, 0x32, 0x9c, 0x34, 0x15, 0xee,
	0x43, 0xde, 0xa2, 0x3c, 0xfc, 0x6b, 0x89, 0x2b, 0x49, 0x24, 0x2b, 0x71, 0x8b, 0xfd, 0x60, 0x0e,
	0xae, 0xed, 0x42, 0x9e, 0x57, 0x45, 0x26, 0xae, 0x63, 0x89, 0xbb, 0xb0, 0xf4, 0x99, 0x8c, 0xdd,
	0x0b, 0xdf, 0x0d, 0xc5, 0xff, 0x6d, 0xb2, 0x04, 0xa1, 0x4e, 0x9e, 0x4f, 0x3d, 0x66, 0xb5, 0x17,
	0x31, 0x4b, 0xe8, 0x18, 0xd6, 0x59, 0x45, 0x4f, 0x0f, 0xdd, 0xd0, 0x19, 0xbb, 0x41, 0x88, 0x7e,
	0x84, 0x7d, 0x75, 0xfe, 0xc2, 0x19, 0x99, 0xac, 0x95, 0x62, 0xb1, 0xbe, 0xb0, 0xbc, 0x71, 0xec,
	0x53, 0xf3, 0x17, 0xce, 0x88, 0x11, 0x83, 0x5b, 0x7f, 0x0a, 0xf2, 0xdc, 0xbb, 0xb9, 0x00, 0xa8,
	0x89, 0x5b, 0x4f, 0x0c, 0x6c, 0x76, 0xba, 0xf4, 0x40, 0x07, 0xb3, 0x3b, 0x6e, 0x08, 0xd6, 0x38,
	0x1d, 0x0f, 0x3b, 0xfc, 0xff, 0xd5, 0x23, 0x5a, 0xfd, 0x51, 0x97, 0xe2, 0x32, 0x0a, 0xad, 0x3f,
	0xe8, 0xf6, 0x7a, 0x46, 0x53, 0xcb, 0xde, 0xfa, 0x41, 0x1a, 0x4a, 0xf2, 0x52, 0x2e, 0xd2, 0xa0,
	0x42, 0x2f, 0x1d, 0xf5, 0x07, 0xf5, 0x1d, 0x52, 0x4e, 0x1e, 0x9d, 0x81, 0xaa, 0xa0, 0xe0, 0x01,
	0x21, 0x7d, 0x43, 0x82, 0x44, 0x65, 0x29, 0x49, 0xe1, 0xff, 0xcb, 0xad, 0x15, 0x25, 0xdb, 0x76,
	0xab, 0xd3, 0xea, 0xef, 0xd2, 0x7b, 0x76, 0xeb, 0x50, 0x66, 0x24, 0x76, 0x71, 0x30, 0x23, 0x09,
	0xec, 0x52, 0x17, 0x3b, 0x64, 0xa3, 0x04, 0x76, 0xcd, 0xae, 0x40, 0x96, 0x65, 0x9a, 0xde, 0x23,
	0x3e, 0x66, 0x4e, 0xd6, 0xd2, 0xc4, 0xac, 0xf1, 0x25, 0x74, 0x0e, 0x34, 0x7e, 0x47, 0x8a, 0x5e,
	0x33, 0xa4, 0x27, 0xf4, 0x20, 0xd9, 0x76, 0x88, 0x13, 0x5a, 0x46, 0x17, 0xe1, 0xbc, 0x4c, 0xc6,
	0xae, 0xac, 0x55, 0x64, 0x89, 0xf2, 0xbe, 0xd9, 0xad, 0x9f, 0x4c, 0xc3, 0x5a, 0xfc, 0xaa, 0x3b,
	0xe1, 0x67, 0x2c, 0xad, 0x6e, 0xc7, 0x1c, 0x76, 0xfa, 0xc3, 0x5e, 0x8f, 0x09, 0x94, 0xbe, 0x1a,
	0x8f, 0xb2, 0xc4, 0x91, 0x1b, 0xfd, 0x9b, 0xf2, 0x88, 0xac, 0x48, 0xe0, 0x1c, 0x68, 0x0a, 0x5d,
	0x88, 0xe1, 0x2c, 0xac, 0x47, 0x54, 0x71, 0xc3, 0x30, 0x56, 0xb2, 0xe8, 0x70, 0x2e, 0xd9, 0x96,
	0xa8, 0xd7, 0x79, 0x74, 0x15, 0x6a, 0x51, 0xd6, 0x42, 0x5f, 0x0b, 0x68, 0x03, 0xce, 0x45, 0xf9,
	0xd8, 0x68, 0x74, 0x9f, 0x18, 0x98, 0x8d, 0x55, 0xac, 0x2e, 0x21, 0x8a, 0xd2, 0xa3, 0x2b, 0x70,
	0xd6, 0xf3, 0x0f, 0xb6, 0xac, 0x99, 0x65, 0x1f, 0x3a, 0x52, 0x57, 0x1f, 0xe5, 0xd9, 0x7f, 0x13,
	0xfc, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3a, 0xfa, 0x6c, 0xb8, 0xe9, 0x83, 0x00, 0x00,
}
