// Code generated by protoc-gen-go. DO NOT EDIT.
// source: quota.proto

package mesos_v1_quota

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	v1 "github.com/mesos/go-proto/mesos/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
// Describes the resource guarantees for a role.
// Persisted in the registry.
type QuotaInfo struct {
	Role *string `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	// Principal which set the quota. Currently only operators can set quotas.
	Principal            *string        `protobuf:"bytes,2,opt,name=principal" json:"principal,omitempty"`
	Guarantee            []*v1.Resource `protobuf:"bytes,3,rep,name=guarantee" json:"guarantee,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *QuotaInfo) Reset()         { *m = QuotaInfo{} }
func (m *QuotaInfo) String() string { return proto.CompactTextString(m) }
func (*QuotaInfo) ProtoMessage()    {}
func (*QuotaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d42a6e345ff44a, []int{0}
}

func (m *QuotaInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuotaInfo.Unmarshal(m, b)
}
func (m *QuotaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuotaInfo.Marshal(b, m, deterministic)
}
func (m *QuotaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuotaInfo.Merge(m, src)
}
func (m *QuotaInfo) XXX_Size() int {
	return xxx_messageInfo_QuotaInfo.Size(m)
}
func (m *QuotaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QuotaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QuotaInfo proto.InternalMessageInfo

func (m *QuotaInfo) GetRole() string {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return ""
}

func (m *QuotaInfo) GetPrincipal() string {
	if m != nil && m.Principal != nil {
		return *m.Principal
	}
	return ""
}

func (m *QuotaInfo) GetGuarantee() []*v1.Resource {
	if m != nil {
		return m.Guarantee
	}
	return nil
}

//*
// Describes an update to a role's quota. This is a copy of
// `QuotaInfo` which omits the principal since it is determined
// during authentication. Also allows the user to force the update
// in the case of a guarantee overcommit.
type QuotaRequest struct {
	// See `guarantee` for the behavior of `force`.
	Force *bool   `protobuf:"varint,1,opt,name=force" json:"force,omitempty"`
	Role  *string `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
	// Mesos will try its best to ensure that the role can be
	// allocated at least as many resources as the guarantee.
	// Despite this, it's possible for the guarantee to not be
	// satisfiable, if:
	//   (1) The operator has overcommitted guarantees.
	//   (2) There is a loss of agents that such that the
	//       guarantees overcommit the cluster.
	//   (3) The scheduler is pickier than mesos knows about,
	//       e.g. the scheduler needs resources from agents
	//       with specific attributes.
	//
	// The provided guarantee will be validated to ensure it
	// is not overcommitting the cluster. The operator can
	// disable this via `QuotaRequest.force`.
	//
	// If the guarantee is omitted, there is no guarantee.
	//
	// Operators may want to set up alerting to let them know
	// when a guarantee cannot be satisfied.
	//
	// NOTE: The resources must be scalars without additional
	// metadata like reservations, disk information, etc.
	Guarantee            []*v1.Resource `protobuf:"bytes,3,rep,name=guarantee" json:"guarantee,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *QuotaRequest) Reset()         { *m = QuotaRequest{} }
func (m *QuotaRequest) String() string { return proto.CompactTextString(m) }
func (*QuotaRequest) ProtoMessage()    {}
func (*QuotaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d42a6e345ff44a, []int{1}
}

func (m *QuotaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuotaRequest.Unmarshal(m, b)
}
func (m *QuotaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuotaRequest.Marshal(b, m, deterministic)
}
func (m *QuotaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuotaRequest.Merge(m, src)
}
func (m *QuotaRequest) XXX_Size() int {
	return xxx_messageInfo_QuotaRequest.Size(m)
}
func (m *QuotaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuotaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuotaRequest proto.InternalMessageInfo

func (m *QuotaRequest) GetForce() bool {
	if m != nil && m.Force != nil {
		return *m.Force
	}
	return false
}

func (m *QuotaRequest) GetRole() string {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return ""
}

func (m *QuotaRequest) GetGuarantee() []*v1.Resource {
	if m != nil {
		return m.Guarantee
	}
	return nil
}

//*
// Describes a role's quota configuration. This replaces the legacy
// quota related messages: `QuotaInfo` and `QuotaRequest`. This is
// used in both `UPDATE_QUOTA` and `GET_QUOTA` calls as well as persisted
// in the registry.
//
// We use this new message in the new call `UPDATE_QUOTA` instead of reusing
// the legacy `QuotaRequest` message. This avoids confusions with deprecated
// fields and provides a cleaner interface. In `QuotaStatus` returned by
// `GET_QUOTA`, the legacy `infos` field is still filled along side `configs`
// for backwards compatibility.
type QuotaConfig struct {
	Role *string `protobuf:"bytes,1,req,name=role" json:"role,omitempty"`
	// Name-value pairs that define the resource guarantees.
	// Only scalar resources are currently supported.
	//
	// Mesos will try its best to ensure that the role can be
	// allocated at least as many resources as the guarantee.
	// Despite this, it's possible for the guarantee to not be
	// satisfiable, if:
	//   (1) The operator has overcommitted guarantees.
	//   (2) There is a loss of agents that such that the
	//       guarantees overcommit the cluster.
	//   (3) The scheduler is pickier than mesos knows about,
	//       e.g. the scheduler needs resources from agents
	//       with specific attributes.
	//
	// The provided guarantees will be validated to ensure it
	// is not overcommitting the cluster. The operator can
	// disable this via `UpdateQuota.force`.
	//
	// If the guarantee is omitted, there is no guarantee.
	//
	// Operators may want to set up alerting to let them know
	// when a guarantee cannot be satisfied.
	Guarantees map[string]*v1.Value_Scalar `protobuf:"bytes,2,rep,name=guarantees" json:"guarantees,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Name-value pairs that define the resource limits.
	// Only scalar resources are currently supported.
	//
	// Imposes a limit on the amount of resources allocated to the
	// role. Mesos will try its best to ensure that the role does
	// not exceed this limit. Despite this, the limit can be exceeded
	// when:
	//   (1) The limit is lowered below the allocation.
	//   (2) Some agents are partitioned and re-connect with
	//       resources allocated to the role.
	//
	// The provided limits will be validated to ensure it does not
	// exceed the total cluster size. The operator can disable
	// this check via `UpdateQuota.force`.
	//
	// If the limit is omitted, there is no limit.
	//
	// Operators may want to set up alerting to let them know
	// when the limit is exceeded.
	Limits               map[string]*v1.Value_Scalar `protobuf:"bytes,3,rep,name=limits" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *QuotaConfig) Reset()         { *m = QuotaConfig{} }
func (m *QuotaConfig) String() string { return proto.CompactTextString(m) }
func (*QuotaConfig) ProtoMessage()    {}
func (*QuotaConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d42a6e345ff44a, []int{2}
}

func (m *QuotaConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuotaConfig.Unmarshal(m, b)
}
func (m *QuotaConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuotaConfig.Marshal(b, m, deterministic)
}
func (m *QuotaConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuotaConfig.Merge(m, src)
}
func (m *QuotaConfig) XXX_Size() int {
	return xxx_messageInfo_QuotaConfig.Size(m)
}
func (m *QuotaConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_QuotaConfig.DiscardUnknown(m)
}

var xxx_messageInfo_QuotaConfig proto.InternalMessageInfo

func (m *QuotaConfig) GetRole() string {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return ""
}

func (m *QuotaConfig) GetGuarantees() map[string]*v1.Value_Scalar {
	if m != nil {
		return m.Guarantees
	}
	return nil
}

func (m *QuotaConfig) GetLimits() map[string]*v1.Value_Scalar {
	if m != nil {
		return m.Limits
	}
	return nil
}

//*
// `QuotaStatus` describes the internal representation for the
// /quota/status response and `GET_QUOTA` `master::Response`.
type QuotaStatus struct {
	// Returns all non-default quotas. Those omitted from this
	// list have the default of: no guarantee and no limit.
	//
	// For backwards compatibility, `infos` are still filled along
	// side `configs`. Note, however `infos` will contain less information
	// comparing to `configs` (e.g. info does not contain information
	// regarding quota limits).
	Infos []*QuotaInfo `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"` // Deprecated: Do not use.
	// Returns all non-default quotas. Those omitted from this
	// list have the default of: no guarantee and no limit.
	Configs              []*QuotaConfig `protobuf:"bytes,2,rep,name=configs" json:"configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *QuotaStatus) Reset()         { *m = QuotaStatus{} }
func (m *QuotaStatus) String() string { return proto.CompactTextString(m) }
func (*QuotaStatus) ProtoMessage()    {}
func (*QuotaStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d42a6e345ff44a, []int{3}
}

func (m *QuotaStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuotaStatus.Unmarshal(m, b)
}
func (m *QuotaStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuotaStatus.Marshal(b, m, deterministic)
}
func (m *QuotaStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuotaStatus.Merge(m, src)
}
func (m *QuotaStatus) XXX_Size() int {
	return xxx_messageInfo_QuotaStatus.Size(m)
}
func (m *QuotaStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_QuotaStatus.DiscardUnknown(m)
}

var xxx_messageInfo_QuotaStatus proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *QuotaStatus) GetInfos() []*QuotaInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (m *QuotaStatus) GetConfigs() []*QuotaConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

func init() {
	proto.RegisterType((*QuotaInfo)(nil), "mesos.v1.quota.QuotaInfo")
	proto.RegisterType((*QuotaRequest)(nil), "mesos.v1.quota.QuotaRequest")
	proto.RegisterType((*QuotaConfig)(nil), "mesos.v1.quota.QuotaConfig")
	proto.RegisterMapType((map[string]*v1.Value_Scalar)(nil), "mesos.v1.quota.QuotaConfig.GuaranteesEntry")
	proto.RegisterMapType((map[string]*v1.Value_Scalar)(nil), "mesos.v1.quota.QuotaConfig.LimitsEntry")
	proto.RegisterType((*QuotaStatus)(nil), "mesos.v1.quota.QuotaStatus")
}

func init() { proto.RegisterFile("quota.proto", fileDescriptor_d3d42a6e345ff44a) }

var fileDescriptor_d3d42a6e345ff44a = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x5f, 0x4b, 0xeb, 0x30,
	0x14, 0xa7, 0xd9, 0xdd, 0xee, 0xed, 0xe9, 0x45, 0x25, 0x0c, 0xe9, 0xa6, 0x0f, 0x63, 0x3e, 0x38,
	0x50, 0x32, 0x37, 0x11, 0xc4, 0x17, 0x61, 0x22, 0x22, 0xfa, 0xe0, 0x32, 0xf4, 0x3d, 0x94, 0x74,
	0x56, 0xbb, 0xa6, 0x4b, 0xd2, 0xc1, 0x3e, 0xaa, 0xdf, 0x46, 0x9a, 0x74, 0x5d, 0x1d, 0x32, 0x10,
	0x7c, 0x4b, 0xce, 0xf9, 0xfd, 0x39, 0xe7, 0x97, 0x80, 0x37, 0xcf, 0x84, 0x66, 0x24, 0x95, 0x42,
	0x0b, 0xbc, 0x33, 0xe3, 0x4a, 0x28, 0xb2, 0x18, 0x10, 0x53, 0x6d, 0x37, 0xcd, 0xbd, 0xbf, 0x18,
	0xf4, 0x6d, 0xc3, 0xa0, 0xba, 0x02, 0xdc, 0x71, 0xde, 0xbe, 0x4f, 0x42, 0x81, 0x31, 0xfc, 0x91,
	0x22, 0xe6, 0xbe, 0xd3, 0x71, 0x7a, 0x2e, 0x35, 0x67, 0x7c, 0x08, 0x6e, 0x2a, 0xa3, 0x24, 0x88,
	0x52, 0x16, 0xfb, 0xc8, 0x34, 0xd6, 0x05, 0x7c, 0x06, 0xee, 0x34, 0x63, 0x92, 0x25, 0x9a, 0x73,
	0xbf, 0xd6, 0xa9, 0xf5, 0xbc, 0x21, 0x26, 0xa5, 0x31, 0xe5, 0x4a, 0x64, 0x32, 0xe0, 0x74, 0x0d,
	0xea, 0xbe, 0xc1, 0x7f, 0x63, 0x48, 0xf9, 0x3c, 0xe3, 0x4a, 0xe3, 0x26, 0xd4, 0x43, 0x21, 0x03,
	0x6b, 0xfa, 0x8f, 0xda, 0x4b, 0x39, 0x09, 0xaa, 0x4c, 0xf2, 0x73, 0xaf, 0x0f, 0x04, 0x9e, 0x31,
	0xbb, 0x11, 0x49, 0x18, 0x4d, 0x2b, 0xfb, 0xa1, 0x52, 0xf5, 0x01, 0xa0, 0x24, 0x28, 0x1f, 0x19,
	0xd9, 0x13, 0xf2, 0x35, 0x3b, 0x52, 0x11, 0x21, 0x77, 0x25, 0xfa, 0x36, 0xd1, 0x72, 0x49, 0x2b,
	0x74, 0x7c, 0x0d, 0x8d, 0x38, 0x9a, 0x45, 0x5a, 0x15, 0xf3, 0x1d, 0x6f, 0x13, 0x7a, 0x34, 0x48,
	0x2b, 0x52, 0xd0, 0xda, 0xcf, 0xb0, 0xbb, 0xa1, 0x8f, 0xf7, 0xa0, 0xf6, 0xce, 0x97, 0xc5, 0x9b,
	0xe4, 0x47, 0x7c, 0x0a, 0xf5, 0x05, 0x8b, 0x33, 0x9b, 0x8e, 0x37, 0xdc, 0x5f, 0x9b, 0xbc, 0xe4,
	0x65, 0x32, 0x09, 0x58, 0xcc, 0x24, 0xb5, 0xa0, 0x2b, 0x74, 0xe9, 0xb4, 0xc7, 0xe0, 0x55, 0xdc,
	0x7e, 0x43, 0xb2, 0xbb, 0x2c, 0xa2, 0x9d, 0x68, 0xa6, 0x33, 0x85, 0xcf, 0xa1, 0x1e, 0x25, 0xa1,
	0x50, 0xbe, 0x63, 0x16, 0x6f, 0x7d, 0xbb, 0x78, 0xfe, 0xc9, 0x46, 0xc8, 0x77, 0xa8, 0xc5, 0xe2,
	0x0b, 0xf8, 0x1b, 0x98, 0x2c, 0x56, 0xc1, 0x1f, 0x6c, 0xc9, 0x8b, 0xae, 0xb0, 0xa3, 0x23, 0x68,
	0x09, 0x39, 0x25, 0x2c, 0x65, 0xc1, 0x2b, 0xdf, 0x60, 0x8c, 0x1a, 0x4f, 0xf9, 0xbf, 0x56, 0x9f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x90, 0x8b, 0x35, 0x0c, 0x03, 0x00, 0x00,
}
